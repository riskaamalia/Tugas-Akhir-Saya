<!DOCTYPE html>
<!-- saved from url=(0042)http://rosettacode.org/wiki/Combinations#C -->
<html lang="en" dir="ltr" class="client-js"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Combinations - Rosetta Code</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.20.3">
<script data-rocketsrc="https://apis.google.com/_/scs/apps-static/_/js/k=oz.gapi.en.8MBMJQDFWYQ.O/m=auth/exm=plusone/rt=j/sv=1/d=1/ed=1/am=AQ/rs=AItRSTMREy9788-4iP4Aj7uai0zi45VrJw/cb=gapi.loaded_1" data-rocketoptimized="true" async=""></script><script data-rocketsrc="https://apis.google.com/_/scs/apps-static/_/js/k=oz.gapi.en.8MBMJQDFWYQ.O/m=plusone/rt=j/sv=1/d=1/ed=1/am=AQ/rs=AItRSTMREy9788-4iP4Aj7uai0zi45VrJw/cb=gapi.loaded_0" data-rocketoptimized="true" async=""></script><script type="text/javascript" async="" data-rocketsrc="http://platform.stumbleupon.com/1/widgets.js" data-rocketoptimized="true"></script><script type="text/javascript" src="./Combinations - Rosetta Code_files/widgets.js"></script><script id="twitter-wjs" data-rocketsrc="//platform.twitter.com/widgets.js" data-rocketoptimized="true"></script><script type="text/javascript" src="./Combinations - Rosetta Code_files/widgets(1).js"></script><script type="text/javascript" async="" data-rocketsrc="https://apis.google.com/js/plusone.js" data-rocketoptimized="true" gapi_processed="true"></script><script type="text/javascript" src="./Combinations - Rosetta Code_files/plusone.js" gapi_processed="true"></script><script type="text/javascript" async="" src="./Combinations - Rosetta Code_files/ga.js"></script><script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok8v=02fcfa4f56/"},atok:"b1f269ad95dafa8b34b56a385235c6c8",petok:"939d8403ece1ef0617b7f95432f6cb4e2efd6618-1394786645-1800",zone:"rosettacode.org",rocket:"a",apps:{"ga_key":{"ua":"UA-1219419-1","ga_bs":"2"}}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok8v=b064e16429/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script><script type="text/javascript" src="./Combinations - Rosetta Code_files/cloudflare.min.js"></script><style type="text/css">.cf-hidden { display: none; } .cf-invisible { visibility: hidden; }</style><script data-module="cloudflare/rocket" id="cfjs_block_b0f15f18a0" onload="CloudFlare.__cfjs_block_b0f15f18a0_load()" onerror="CloudFlare.__cfjs_block_b0f15f18a0_error()" onreadystatechange="CloudFlare.__cfjs_block_b0f15f18a0_readystatechange()" type="text/javascript" src="./Combinations - Rosetta Code_files/rocket.js"></script>
<link rel="alternate" type="application/x-wiki" title="Edit" href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit">
<link rel="edit" title="Edit" href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit">
<link rel="shortcut icon" href="http://rosettacode.org/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://rosettacode.org/mw/opensearch_desc.php" title="Rosetta Code (en)">
<link rel="EditURI" type="application/rsd+xml" href="http://rosettacode.org/mw/api.php?action=rsd">
<link rel="copyright" href="http://www.gnu.org/licenses/fdl-1.2.html">
<link rel="alternate" type="application/atom+xml" title="Rosetta Code Atom feed" href="http://rosettacode.org/mw/index.php?title=Special:RecentChanges&feed=atom">
<link rel="stylesheet" href="http://rosettacode.org/mw/load.php?debug=false&lang=en&modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&only=styles&skin=vector&*">
<style>.mw-collapsible-toggle{float:right} li .mw-collapsible-toggle{float:none} .mw-collapsible-toggle-li{list-style:none}
/* cache key: rosettacode:resourceloader:filter:minify-css:7:4250852ed2349a0d4d0fc6509a3e7d4c */.suggestions{overflow:hidden;position:absolute;top:0;left:0;width:0;border:none;z-index:1099;padding:0;margin:-1px -1px 0 0} html > body .suggestions{margin:-1px 0 0 0}.suggestions-special{position:relative;background-color:white;cursor:pointer;border:solid 1px #aaaaaa;padding:0;margin:0;margin-top:-2px;display:none;padding:0.25em 0.25em;line-height:1.25em}.suggestions-results{background-color:white;cursor:pointer;border:solid 1px #aaaaaa;padding:0;margin:0}.suggestions-result{color:black;margin:0;line-height:1.5em;padding:0.01em 0.25em;text-align:left}.suggestions-result-current{background-color:#4C59A6;color:white}.suggestions-special .special-label{color:gray;text-align:left}.suggestions-special .special-query{color:black;font-style:italic;text-align:left}.suggestions-special .special-hover{background-color:silver}.suggestions-result-current .special-label,.suggestions-result-current .special-query{color:white}.autoellipsis-matched,.highlight{font-weight:bold}
/* cache key: rosettacode:resourceloader:filter:minify-css:7:9780324491b653a3780e2d029bdc140c */</style><meta name="ResourceLoaderDynamicStyles" content="">
<link rel="stylesheet" href="http://rosettacode.org/mw/load.php?debug=false&lang=en&modules=site&only=styles&skin=vector&*">
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}</style>
<script data-rocketsrc="http://rosettacode.org/mw/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*" type="text/rocketscript" data-rocketoptimized="true"></script><script data-rocketsrc="/mw/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=20130304T180825Z" type="text/rocketscript" data-rocketoptimized="true"></script><script type="text/javascript" src="./Combinations - Rosetta Code_files/load.php"></script>
<script type="text/rocketscript" data-rocketoptimized="true">if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Combinations","wgTitle":"Combinations","wgCurRevisionId":177162,"wgArticleId":2405,"wgIsArticle":true,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Programming Tasks","Discrete math","Ada","ALGOL 68","AppleScript","AutoHotkey","AWK","BBC BASIC","Bracmat","C","C++","C sharp","Clojure","CoffeeScript","Common Lisp","D","E","Egison","Erlang","Elena","Factor","Fortran","GAP","Go","Groovy","Haskell","Icon","Unicon","Icon Programming Library","J","Java","JavaScript","Julia","Logo","Lua","Mathematica","M4","MATLAB","Maxima","OCaml","Octave","Oz","PARI/GP","Pascal","Perl","Perl5i","Perl 6","PicoLisp","Pop11","Prolog","Pure","PureBasic","Python","Racket","R","REXX","Ruby","Rust","Scala","Scheme","Seed7","SETL","Smalltalk","Standard ML","Tcl","TXR","Ursala","V","XPL0"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Combinations","wgRestrictionEdit":[],"wgRestrictionMove":[],"sfgRemoveText":"Remove","sfgAutocompleteOnAllChars":false,"sfgAutocompleteValues":{},"sfgShowOnSelect":{},"sfgFormErrorsHeader":"There were errors with your form input; see below","sfgBlankErrorStr":"cannot be blank","sfgBadURLErrorStr":"must have the correct URL format, starting with \"http\"","sfgBadEmailErrorStr":"must have a valid email address format","sfgBadNumberErrorStr":"must be a valid number","sfgBadDateErrorStr":"must be a valid date","sfgAnonEditWarning":"Warning: You are not logged in. Your IP address will be recorded in this page\'s edit history."});
}</script><script type="text/rocketscript" data-rocketoptimized="true">if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,
"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs102":false,"searchNs103":false,"searchNs106":false,"searchNs107":false,"searchNs108":false,"searchNs109":false,"searchNs110":false,"searchNs111":false,"searchNs112":false,"searchNs113":false,"searchNs114":false,"searchNs115":false,"searchNs170":false,"searchNs171":false,"searchNs274":false,"searchNs275":false});;},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","watchToken":false});;},{},{});
/* cache key: rosettacode:resourceloader:filter:minify-js:7:2ce58c77cc7227488637c1087f1776c6 */
}</script>
<script type="text/rocketscript" data-rocketoptimized="true">if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax"]);
}</script><script type="text/rocketscript" data-rocketsrc="/mw/load.php?debug=false&amp;lang=en&amp;modules=jquery.client%2Ccookie%2CmwExtension%7Cmediawiki.legacy.ajax%2Cwikibits%7Cmediawiki.notify%2Cutil%7Cmediawiki.page.startup&amp;skin=vector&amp;version=20140205T132715Z&amp;*" data-rocketoptimized="true"></script>
<link rel="alternate" type="application/rdf+xml" title="Combinations" href="http://rosettacode.org/mw/index.php?title=Special:ExportRDF/Combinations&xmlmime=rdf">
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/mw/skins/vector/csshover.min.htc")}</style><![endif]--><script type="text/javascript">
/* <![CDATA[ */
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-1219419-1']);
_gaq.push(['_trackPageview']);

(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

(function(b){(function(a){"__CF"in b&&"DJS"in b.__CF?b.__CF.DJS.push(a):"addEventListener"in b?b.addEventListener("load",a,!1):b.attachEvent("onload",a)})(function(){"FB"in b&&"Event"in FB&&"subscribe"in FB.Event&&(FB.Event.subscribe("edge.create",function(a){_gaq.push(["_trackSocial","facebook","like",a])}),FB.Event.subscribe("edge.remove",function(a){_gaq.push(["_trackSocial","facebook","unlike",a])}),FB.Event.subscribe("message.send",function(a){_gaq.push(["_trackSocial","facebook","send",a])}));"twttr"in b&&"events"in twttr&&"bind"in twttr.events&&twttr.events.bind("tweet",function(a){if(a){var b;if(a.target&&a.target.nodeName=="IFRAME")a:{if(a=a.target.src){a=a.split("#")[0].match(/[^?=&]+=([^&]*)?/g);b=0;for(var c;c=a[b];++b)if(c.indexOf("url")===0){b=unescape(c.split("=")[1]);break a}}b=void 0}_gaq.push(["_trackSocial","twitter","tweet",b])}})})})(window);
/* ]]> */
</script>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Combinations skin-vector action-view vector-animateLayout" data-twttr-rendered="true">
<div id="mw-page-base" class="noprint"></div>
<div id="mw-head-base" class="noprint"></div>
 
<div id="content" class="mw-body">
<a id="top"></a>
<div id="mw-js-message" style="display:none;"></div>
 
<h1 id="firstHeading" class="firstHeading"><span dir="auto">Combinations</span></h1>
 
 
<div id="bodyContent">
 
<div id="siteSub">From Rosetta Code</div>
 
 
<div id="contentSub"></div>
 
 
<div id="jump-to-nav" class="mw-jump">
Jump to: <a href="http://rosettacode.org/wiki/Combinations#mw-head">navigation</a>, <a href="http://rosettacode.org/wiki/Combinations#p-search">search</a>
</div>
 
 
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="infobox" style="width: 2in"><div class="floatleft"><a href="http://rosettacode.org/wiki/Category:Solutions_by_Programming_Task" title="Category:Solutions by Programming Task"><img alt="Task" src="./Combinations - Rosetta Code_files/64px-Rcode-button-task-crushed.png" width="64" height="64"></a></div><b>Combinations</b><br>
You are encouraged to <a href="http://rosettacode.org/wiki/Rosetta_Code:Solve_a_Task" title="Rosetta Code:Solve a Task">solve this task</a> according to the task description, using any language you may know.</div>Given non-negative integers <tt>m</tt> and <tt>n</tt>, generate all size <tt>m</tt> <a rel="nofollow" class="external text" href="http://mathworld.wolfram.com/Combination.html">combinations</a> of the integers from 0 to <tt>n-1</tt> in sorted order (each combination is sorted and the entire table is sorted).
<p>For example, <tt>3 comb 5</tt> is
</p>
<pre>0 1 2
0 1 3
0 1 4
0 2 3
0 2 4
0 3 4
1 2 3
1 2 4
1 3 4
2 3 4
</pre>
<p>If it is more "natural" in your language to start counting from <tt>1</tt> instead of <tt>0</tt> the combinations can be of the integers from <tt>1</tt> to <tt>n</tt>.
</p><p><b>See Also:</b>
</p>
<table class="wikitable">
<caption> The number of samples of size k from n objects.<br>With <a href="http://rosettacode.org/wiki/Combinations_and_permutations" title="Combinations and permutations">combinations and permutations</a> generation tasks.
</caption>
<tbody><tr>
<th>
</th>
<th> Order Unimportant
</th>
<th> Order Important
</th></tr>
<tr>
<th rowspan="2"> Without replacement
</th>
<td align="center"><img class="tex" alt=" \binom nk = ^n\operatorname C_k = \frac{n(n-1)\ldots(n-k+1)}{k(k-1)\dots1} " src="./Combinations - Rosetta Code_files/920b3c93ceffc9cdc626e70e1ba3583e.png">
</td>
<td align="center"><img class="tex" alt="^n\operatorname P_k = n\cdot(n-1)\cdot(n-2)\cdots(n-k+1)" src="./Combinations - Rosetta Code_files/f8fe0d65158c0a391f14229f7d9403ab.png">
</td></tr>
<tr>
<td align="center">Task: <strong class="selflink">Combinations</strong>
</td>
<td align="center">Task: <a href="http://rosettacode.org/wiki/Permutations" title="Permutations">Permutations</a>
</td></tr>
<tr>
<th rowspan="2"> With replacement
</th>
<td align="center"><img class="tex" alt=" \binom {n+k-1}k = ^{n+k-1}\operatorname C_k = {(n+k-1)! \over (n-1)!k!}" src="./Combinations - Rosetta Code_files/30fba48b37994e107a7f8f897dc27538.png">
</td>
<td align="center"><span class="texhtml" dir="ltr"><i>n</i><sup><i>k</i></sup></span>
</td></tr>
<tr>
<td align="center">Task: <a href="http://rosettacode.org/wiki/Combinations_with_repetitions" title="Combinations with repetitions">Combinations with repetitions</a>
</td>
<td align="center">Task: <a href="http://rosettacode.org/wiki/Permutations_with_repetitions" title="Permutations with repetitions">Permutations with repetitions</a>
</td></tr></tbody></table>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2><span class="toctoggle">&nbsp;[<a href="http://rosettacode.org/wiki/Combinations#" class="internal" id="togglelink">hide</a>]&nbsp;</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="http://rosettacode.org/wiki/Combinations#Ada"><span class="tocnumber">1</span> <span class="toctext">Ada</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="http://rosettacode.org/wiki/Combinations#ALGOL_68"><span class="tocnumber">2</span> <span class="toctext">ALGOL 68</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="http://rosettacode.org/wiki/Combinations#AppleScript"><span class="tocnumber">3</span> <span class="toctext">AppleScript</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="http://rosettacode.org/wiki/Combinations#AutoHotkey"><span class="tocnumber">4</span> <span class="toctext">AutoHotkey</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="http://rosettacode.org/wiki/Combinations#AWK"><span class="tocnumber">5</span> <span class="toctext">AWK</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="http://rosettacode.org/wiki/Combinations#BBC_BASIC"><span class="tocnumber">6</span> <span class="toctext">BBC BASIC</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="http://rosettacode.org/wiki/Combinations#Bracmat"><span class="tocnumber">7</span> <span class="toctext">Bracmat</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="./Combinations - Rosetta Code_files/Combinations - Rosetta Code.htm"><span class="tocnumber">8</span> <span class="toctext">C</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="http://rosettacode.org/wiki/Combinations#Lexicographic_ordered_generation"><span class="tocnumber">8.1</span> <span class="toctext">Lexicographic ordered generation</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-10"><a href="http://rosettacode.org/wiki/Combinations#C.2B.2B"><span class="tocnumber">9</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="http://rosettacode.org/wiki/Combinations#C.23"><span class="tocnumber">10</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="http://rosettacode.org/wiki/Combinations#Clojure"><span class="tocnumber">11</span> <span class="toctext">Clojure</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="http://rosettacode.org/wiki/Combinations#CoffeeScript"><span class="tocnumber">12</span> <span class="toctext">CoffeeScript</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="http://rosettacode.org/wiki/Combinations#Common_Lisp"><span class="tocnumber">13</span> <span class="toctext">Common Lisp</span></a>
<ul>
<li class="toclevel-2 tocsection-15"><a href="http://rosettacode.org/wiki/Combinations#Recursive_method"><span class="tocnumber">13.1</span> <span class="toctext">Recursive method</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="http://rosettacode.org/wiki/Combinations#Alternate.2C_iterative_method"><span class="tocnumber">13.2</span> <span class="toctext">Alternate, iterative method</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-17"><a href="http://rosettacode.org/wiki/Combinations#D"><span class="tocnumber">14</span> <span class="toctext">D</span></a>
<ul>
<li class="toclevel-2 tocsection-18"><a href="http://rosettacode.org/wiki/Combinations#Slow_Recursive_Version"><span class="tocnumber">14.1</span> <span class="toctext">Slow Recursive Version</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="http://rosettacode.org/wiki/Combinations#More_Functional_Recursive_Version"><span class="tocnumber">14.2</span> <span class="toctext">More Functional Recursive Version</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="http://rosettacode.org/wiki/Combinations#Fast_lazy_version"><span class="tocnumber">14.3</span> <span class="toctext">Fast lazy version</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="http://rosettacode.org/wiki/Combinations#Lazy_Lexicographical_Combinations"><span class="tocnumber">14.4</span> <span class="toctext">Lazy Lexicographical Combinations</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-22"><a href="http://rosettacode.org/wiki/Combinations#E"><span class="tocnumber">15</span> <span class="toctext">E</span></a></li>
<li class="toclevel-1 tocsection-23"><a href="http://rosettacode.org/wiki/Combinations#Egison"><span class="tocnumber">16</span> <span class="toctext">Egison</span></a></li>
<li class="toclevel-1 tocsection-24"><a href="http://rosettacode.org/wiki/Combinations#Erlang"><span class="tocnumber">17</span> <span class="toctext">Erlang</span></a></li>
<li class="toclevel-1 tocsection-25"><a href="http://rosettacode.org/wiki/Combinations#Elena"><span class="tocnumber">18</span> <span class="toctext">Elena</span></a></li>
<li class="toclevel-1 tocsection-26"><a href="http://rosettacode.org/wiki/Combinations#Factor"><span class="tocnumber">19</span> <span class="toctext">Factor</span></a></li>
<li class="toclevel-1 tocsection-27"><a href="http://rosettacode.org/wiki/Combinations#Fortran"><span class="tocnumber">20</span> <span class="toctext">Fortran</span></a></li>
<li class="toclevel-1 tocsection-28"><a href="http://rosettacode.org/wiki/Combinations#GAP"><span class="tocnumber">21</span> <span class="toctext">GAP</span></a></li>
<li class="toclevel-1 tocsection-29"><a href="http://rosettacode.org/wiki/Combinations#Go"><span class="tocnumber">22</span> <span class="toctext">Go</span></a></li>
<li class="toclevel-1 tocsection-30"><a href="http://rosettacode.org/wiki/Combinations#Groovy"><span class="tocnumber">23</span> <span class="toctext">Groovy</span></a>
<ul>
<li class="toclevel-2 tocsection-31"><a href="http://rosettacode.org/wiki/Combinations#In_General"><span class="tocnumber">23.1</span> <span class="toctext">In General</span></a></li>
<li class="toclevel-2 tocsection-32"><a href="http://rosettacode.org/wiki/Combinations#Zero-based_Integers"><span class="tocnumber">23.2</span> <span class="toctext">Zero-based Integers</span></a></li>
<li class="toclevel-2 tocsection-33"><a href="http://rosettacode.org/wiki/Combinations#One-based_Integers"><span class="tocnumber">23.3</span> <span class="toctext">One-based Integers</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-34"><a href="http://rosettacode.org/wiki/Combinations#Haskell"><span class="tocnumber">24</span> <span class="toctext">Haskell</span></a>
<ul>
<li class="toclevel-2 tocsection-35"><a href="http://rosettacode.org/wiki/Combinations#Dynamic_Programming"><span class="tocnumber">24.1</span> <span class="toctext">Dynamic Programming</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-36"><a href="http://rosettacode.org/wiki/Combinations#Icon_and_Unicon"><span class="tocnumber">25</span> <span class="toctext">Icon and Unicon</span></a></li>
<li class="toclevel-1 tocsection-37"><a href="http://rosettacode.org/wiki/Combinations#J"><span class="tocnumber">26</span> <span class="toctext">J</span></a>
<ul>
<li class="toclevel-2 tocsection-38"><a href="http://rosettacode.org/wiki/Combinations#Iteration"><span class="tocnumber">26.1</span> <span class="toctext">Iteration</span></a></li>
<li class="toclevel-2 tocsection-39"><a href="http://rosettacode.org/wiki/Combinations#Recursion"><span class="tocnumber">26.2</span> <span class="toctext">Recursion</span></a></li>
<li class="toclevel-2 tocsection-40"><a href="http://rosettacode.org/wiki/Combinations#Brute_Force"><span class="tocnumber">26.3</span> <span class="toctext">Brute Force</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-41"><a href="http://rosettacode.org/wiki/Combinations#Java"><span class="tocnumber">27</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-1 tocsection-42"><a href="http://rosettacode.org/wiki/Combinations#JavaScript"><span class="tocnumber">28</span> <span class="toctext">JavaScript</span></a></li>
<li class="toclevel-1 tocsection-43"><a href="http://rosettacode.org/wiki/Combinations#Julia"><span class="tocnumber">29</span> <span class="toctext">Julia</span></a></li>
<li class="toclevel-1 tocsection-44"><a href="http://rosettacode.org/wiki/Combinations#Logo"><span class="tocnumber">30</span> <span class="toctext">Logo</span></a></li>
<li class="toclevel-1 tocsection-45"><a href="http://rosettacode.org/wiki/Combinations#Lua"><span class="tocnumber">31</span> <span class="toctext">Lua</span></a></li>
<li class="toclevel-1 tocsection-46"><a href="http://rosettacode.org/wiki/Combinations#Mathematica"><span class="tocnumber">32</span> <span class="toctext">Mathematica</span></a></li>
<li class="toclevel-1 tocsection-47"><a href="http://rosettacode.org/wiki/Combinations#M4"><span class="tocnumber">33</span> <span class="toctext">M4</span></a></li>
<li class="toclevel-1 tocsection-48"><a href="http://rosettacode.org/wiki/Combinations#MATLAB"><span class="tocnumber">34</span> <span class="toctext">MATLAB</span></a></li>
<li class="toclevel-1 tocsection-49"><a href="http://rosettacode.org/wiki/Combinations#Maxima"><span class="tocnumber">35</span> <span class="toctext">Maxima</span></a></li>
<li class="toclevel-1 tocsection-50"><a href="http://rosettacode.org/wiki/Combinations#OCaml"><span class="tocnumber">36</span> <span class="toctext">OCaml</span></a></li>
<li class="toclevel-1 tocsection-51"><a href="http://rosettacode.org/wiki/Combinations#Octave"><span class="tocnumber">37</span> <span class="toctext">Octave</span></a></li>
<li class="toclevel-1 tocsection-52"><a href="http://rosettacode.org/wiki/Combinations#Oz"><span class="tocnumber">38</span> <span class="toctext">Oz</span></a></li>
<li class="toclevel-1 tocsection-53"><a href="http://rosettacode.org/wiki/Combinations#PARI.2FGP"><span class="tocnumber">39</span> <span class="toctext">PARI/GP</span></a></li>
<li class="toclevel-1 tocsection-54"><a href="http://rosettacode.org/wiki/Combinations#Pascal"><span class="tocnumber">40</span> <span class="toctext">Pascal</span></a></li>
<li class="toclevel-1 tocsection-55"><a href="http://rosettacode.org/wiki/Combinations#Perl"><span class="tocnumber">41</span> <span class="toctext">Perl</span></a></li>
<li class="toclevel-1 tocsection-56"><a href="http://rosettacode.org/wiki/Combinations#Perl5i"><span class="tocnumber">42</span> <span class="toctext">Perl5i</span></a></li>
<li class="toclevel-1 tocsection-57"><a href="http://rosettacode.org/wiki/Combinations#Perl_6"><span class="tocnumber">43</span> <span class="toctext">Perl 6</span></a></li>
<li class="toclevel-1 tocsection-58"><a href="http://rosettacode.org/wiki/Combinations#PicoLisp"><span class="tocnumber">44</span> <span class="toctext">PicoLisp</span></a></li>
<li class="toclevel-1 tocsection-59"><a href="http://rosettacode.org/wiki/Combinations#Pop11"><span class="tocnumber">45</span> <span class="toctext">Pop11</span></a></li>
<li class="toclevel-1 tocsection-60"><a href="http://rosettacode.org/wiki/Combinations#Prolog"><span class="tocnumber">46</span> <span class="toctext">Prolog</span></a>
<ul>
<li class="toclevel-2 tocsection-61"><a href="http://rosettacode.org/wiki/Combinations#List_comprehension"><span class="tocnumber">46.1</span> <span class="toctext">List comprehension</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-62"><a href="http://rosettacode.org/wiki/Combinations#Pure"><span class="tocnumber">47</span> <span class="toctext">Pure</span></a></li>
<li class="toclevel-1 tocsection-63"><a href="http://rosettacode.org/wiki/Combinations#PureBasic"><span class="tocnumber">48</span> <span class="toctext">PureBasic</span></a></li>
<li class="toclevel-1 tocsection-64"><a href="http://rosettacode.org/wiki/Combinations#Python"><span class="tocnumber">49</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-1 tocsection-65"><a href="http://rosettacode.org/wiki/Combinations#Racket"><span class="tocnumber">50</span> <span class="toctext">Racket</span></a></li>
<li class="toclevel-1 tocsection-66"><a href="http://rosettacode.org/wiki/Combinations#R"><span class="tocnumber">51</span> <span class="toctext">R</span></a></li>
<li class="toclevel-1 tocsection-67"><a href="http://rosettacode.org/wiki/Combinations#REXX"><span class="tocnumber">52</span> <span class="toctext">REXX</span></a></li>
<li class="toclevel-1 tocsection-68"><a href="http://rosettacode.org/wiki/Combinations#Ruby"><span class="tocnumber">53</span> <span class="toctext">Ruby</span></a></li>
<li class="toclevel-1 tocsection-69"><a href="http://rosettacode.org/wiki/Combinations#Rust"><span class="tocnumber">54</span> <span class="toctext">Rust</span></a></li>
<li class="toclevel-1 tocsection-70"><a href="http://rosettacode.org/wiki/Combinations#Scala"><span class="tocnumber">55</span> <span class="toctext">Scala</span></a>
<ul>
<li class="toclevel-2 tocsection-71"><a href="http://rosettacode.org/wiki/Combinations#Scala_2.9.x"><span class="tocnumber">55.1</span> <span class="toctext">Scala 2.9.x</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-72"><a href="http://rosettacode.org/wiki/Combinations#Scheme"><span class="tocnumber">56</span> <span class="toctext">Scheme</span></a></li>
<li class="toclevel-1 tocsection-73"><a href="http://rosettacode.org/wiki/Combinations#Seed7"><span class="tocnumber">57</span> <span class="toctext">Seed7</span></a></li>
<li class="toclevel-1 tocsection-74"><a href="http://rosettacode.org/wiki/Combinations#SETL"><span class="tocnumber">58</span> <span class="toctext">SETL</span></a></li>
<li class="toclevel-1 tocsection-75"><a href="http://rosettacode.org/wiki/Combinations#Smalltalk"><span class="tocnumber">59</span> <span class="toctext">Smalltalk</span></a></li>
<li class="toclevel-1 tocsection-76"><a href="http://rosettacode.org/wiki/Combinations#Standard_ML"><span class="tocnumber">60</span> <span class="toctext">Standard ML</span></a></li>
<li class="toclevel-1 tocsection-77"><a href="http://rosettacode.org/wiki/Combinations#Tcl"><span class="tocnumber">61</span> <span class="toctext">Tcl</span></a></li>
<li class="toclevel-1 tocsection-78"><a href="http://rosettacode.org/wiki/Combinations#TXR"><span class="tocnumber">62</span> <span class="toctext">TXR</span></a></li>
<li class="toclevel-1 tocsection-79"><a href="http://rosettacode.org/wiki/Combinations#Ursala"><span class="tocnumber">63</span> <span class="toctext">Ursala</span></a></li>
<li class="toclevel-1 tocsection-80"><a href="http://rosettacode.org/wiki/Combinations#V"><span class="tocnumber">64</span> <span class="toctext">V</span></a></li>
<li class="toclevel-1 tocsection-81"><a href="http://rosettacode.org/wiki/Combinations#XPL0"><span class="tocnumber">65</span> <span class="toctext">XPL0</span></a></li>
</ul>
</td></tr></tbody></table>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=1" title="Edit section: Ada">edit</a>]</span> <span class="mw-headline" id="Ada"><a href="http://rosettacode.org/wiki/Category:Ada" title="Category:Ada">Ada</a></span></h2>
<pre class="ada highlighted_source"><span class="kw3">with</span> Ada.<span class="me1">Text_IO</span>;  <span class="kw3">use</span> Ada.<span class="me1">Text_IO</span>;<br>&nbsp;<br><span class="kw3">procedure</span> Test_Combinations <span class="kw1">is</span><br>   <span class="kw3">generic</span><br>      <span class="kw3">type</span> Integers <span class="kw1">is</span> <span class="kw3">range</span> &lt;&gt;;<br>   <span class="kw3">package</span> Combinations <span class="kw1">is</span><br>      <span class="kw3">type</span> Combination <span class="kw1">is</span> <span class="kw3">array</span> <span class="br0">(</span>Positive <span class="kw3">range</span> &lt;&gt;<span class="br0">)</span> <span class="kw3">of</span> Integers;<br>      <span class="kw3">procedure</span> First <span class="br0">(</span>X&nbsp;: <span class="kw3">in</span> <span class="kw3">out</span> Combination<span class="br0">)</span>;<br>      <span class="kw3">procedure</span> Next <span class="br0">(</span>X&nbsp;: <span class="kw3">in</span> <span class="kw3">out</span> Combination<span class="br0">)</span>; <br>      <span class="kw3">procedure</span> Put <span class="br0">(</span>X&nbsp;: Combination<span class="br0">)</span>;<br>   <span class="kw1">end</span> Combinations;<br>&nbsp;<br>   <span class="kw3">package</span> <span class="kw3">body</span> Combinations <span class="kw1">is</span><br>      <span class="kw3">procedure</span> First <span class="br0">(</span>X&nbsp;: <span class="kw3">in</span> <span class="kw3">out</span> Combination<span class="br0">)</span> <span class="kw1">is</span><br>      <span class="kw1">begin</span><br>         X <span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span>&nbsp;:= Integers'First;<br>         <span class="kw1">for</span> I <span class="kw3">in</span> <span class="nu0">2</span>..<span class="me1">X</span>'Last <span class="kw1">loop</span><br>            X <span class="br0">(</span>I<span class="br0">)</span>&nbsp;:= X <span class="br0">(</span>I - <span class="nu0">1</span><span class="br0">)</span> + <span class="nu0">1</span>;<br>         <span class="kw1">end</span> <span class="kw1">loop</span>;<br>      <span class="kw1">end</span> First;<br>      <span class="kw3">procedure</span> Next <span class="br0">(</span>X&nbsp;: <span class="kw3">in</span> <span class="kw3">out</span> Combination<span class="br0">)</span> <span class="kw1">is</span><br>      <span class="kw1">begin</span><br>         <span class="kw1">for</span> I <span class="kw3">in</span> <span class="kw3">reverse</span> X'<span class="kw3">Range</span> <span class="kw1">loop</span><br>            <span class="kw1">if</span> X <span class="br0">(</span>I<span class="br0">)</span> &lt; Integers'Val <span class="br0">(</span>Integers'Pos <span class="br0">(</span>Integers'Last<span class="br0">)</span> - X'Last + I<span class="br0">)</span> <span class="kw1">then</span><br>               X <span class="br0">(</span>I<span class="br0">)</span>&nbsp;:= X <span class="br0">(</span>I<span class="br0">)</span> + <span class="nu0">1</span>;<br>               <span class="kw1">for</span> J <span class="kw3">in</span> I + <span class="nu0">1</span>..<span class="me1">X</span>'Last <span class="kw1">loop</span><br>                  X <span class="br0">(</span>J<span class="br0">)</span>&nbsp;:= X <span class="br0">(</span>J - <span class="nu0">1</span><span class="br0">)</span> + <span class="nu0">1</span>;<br>               <span class="kw1">end</span> <span class="kw1">loop</span>;<br>               <span class="kw1">return</span>;<br>            <span class="kw1">end</span> <span class="kw1">if</span>;<br>         <span class="kw1">end</span> <span class="kw1">loop</span>;<br>         <span class="kw3">raise</span> Constraint_Error;<br>      <span class="kw1">end</span> Next;<br>      <span class="kw3">procedure</span> Put <span class="br0">(</span>X&nbsp;: Combination<span class="br0">)</span> <span class="kw1">is</span><br>      <span class="kw1">begin</span><br>         <span class="kw1">for</span> I <span class="kw3">in</span> X'<span class="kw3">Range</span> <span class="kw1">loop</span><br>            Put <span class="br0">(</span>Integers'Image <span class="br0">(</span>X <span class="br0">(</span>I<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>;<br>         <span class="kw1">end</span> <span class="kw1">loop</span>;<br>      <span class="kw1">end</span> Put;<br>   <span class="kw1">end</span> Combinations;<br>&nbsp;<br>   <span class="kw3">type</span> Five <span class="kw1">is</span> <span class="kw3">range</span> <span class="nu0">0</span>..<span class="nu0">4</span>;<br>   <span class="kw3">package</span> Fives <span class="kw1">is</span> <span class="kw3">new</span> Combinations <span class="br0">(</span>Five<span class="br0">)</span>;<br>   <span class="kw3">use</span> Fives;<br>&nbsp;<br>   X&nbsp;: Combination <span class="br0">(</span><span class="nu0">1</span>..<span class="nu0">3</span><span class="br0">)</span>;<br><span class="kw1">begin</span><br>   First <span class="br0">(</span>X<span class="br0">)</span>;<br>   <span class="kw1">loop</span><br>      Put <span class="br0">(</span>X<span class="br0">)</span>; New_Line;<br>      Next <span class="br0">(</span>X<span class="br0">)</span>;<br>   <span class="kw1">end</span> <span class="kw1">loop</span>;<br><span class="kw1">exception</span><br>   <span class="kw3">when</span> Constraint_Error =&gt;<br>      <span class="kw3">null</span>;<br><span class="kw1">end</span> Test_Combinations;</pre>
<p>The solution is generic the formal parameter is the integer type to make combinations of. The type range determines <i>n</i>. In the example it is
</p>
<pre class="ada highlighted_source"><span class="kw3">type</span> Five <span class="kw1">is</span> <span class="kw3">range</span> <span class="nu0">0</span>..<span class="nu0">4</span>;</pre>
<p>The parameter <i>m</i> is the object's constraint. When <i>n</i> &lt; <i>m</i> the procedure First (selects the first combination) will propagate Constraint_Error. The procedure Next selects the next combination. Constraint_Error is propagated when it is the last one. Sample output:
</p>
<pre> 0 1 2
 0 1 3
 0 1 4
 0 2 3
 0 2 4
 0 3 4
 1 2 3
 1 2 4
 1 3 4
 2 3 4
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=2" title="Edit section: ALGOL 68">edit</a>]</span> <span class="mw-headline" id="ALGOL_68"><a href="http://rosettacode.org/wiki/Category:ALGOL_68" title="Category:ALGOL 68">ALGOL 68</a></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Combinations#Python" title="Combinations">Python</a></div>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/ALGOL_68" title="ALGOL 68" class="mw-redirect">ALGOL 68</a> version Revision 1 - one minor extension to language used - PRAGMA READ, similar to C's #include directive.</div>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/ALGOL_68G" title="ALGOL 68G" class="mw-redirect">ALGOL 68G</a> version Any - tested with release <a rel="nofollow" class="external text" href="http://sourceforge.net/projects/algol68/files/algol68g/algol68g-2.6">algol68g-2.6</a>.</div>
<b>File: prelude_combinations.a68</b><pre class="algol68 highlighted_source"><span class="coMULTI"># -*- coding: utf-8 -*- #</span><br>&nbsp;<br>COMMENT REQUIRED <span class="kw2">BY</span> <span class="st0">"prelude_combinations_generative.a68"</span><br>  <span class="kw4">MODE</span> COMBDATA <span class="sy1">=</span> <span class="sy1">~;</span><br>PROVIDES<span class="sy1">:</span><br><span class="coMULTI"># COMBDATA*=~* #</span><br><span class="coMULTI"># comb*=~ list* #</span><br><span class="kw2">END</span> COMMENT<br>&nbsp;<br><span class="kw4">MODE</span> COMBDATALIST <span class="sy1">=</span> <span class="kw4">REF</span><span class="br0">[</span><span class="br0">]</span>COMBDATA<span class="sy1">;</span><br><span class="kw4">MODE</span> COMBDATALISTYIELD <span class="sy1">=</span> <span class="kw4">PROC</span><span class="br0">(</span>COMBDATALIST<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw4">PROC</span> comb gen combinations <span class="sy1">=</span> <span class="br0">(</span><span class="kw3">INT</span> m<span class="sy1">,</span> COMBDATALIST list<span class="sy1">,</span> COMBDATALISTYIELD yield<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">:</span><span class="br0">(</span><br>  <span class="kw2">CASE</span> m <span class="kw2">IN</span><br>  <span class="coMULTI"># case 1: transpose list #</span><br>    <span class="kw2">FOR</span> i <span class="kw2">TO</span> <span class="kw8">UPB</span> list <span class="kw2">DO</span> yield<span class="br0">(</span>list<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span> <span class="kw2">OD</span><br>  <span class="kw2">OUT</span><br>    <span class="br0">[</span>m <span class="sy1">+</span> <span class="kw8">LWB</span> list <span class="sy1">-</span> 1<span class="br0">]</span>COMBDATA out<span class="sy1">;</span><br>    <span class="kw3">INT</span> index out <span class="sy1">:=</span> 1<span class="sy1">;</span><br>    <span class="kw2">FOR</span> i <span class="kw2">TO</span> <span class="kw8">UPB</span> list <span class="kw2">DO</span><br>      COMBDATA first <span class="sy1">=</span> list<span class="br0">[</span>i<span class="br0">]</span><span class="sy1">;</span><br>    <span class="coMULTI"># FOR COMBDATALIST sub recombination IN #</span> comb gen combinations<span class="br0">(</span>m <span class="sy1">-</span> 1<span class="sy1">,</span> list<span class="br0">[</span>i<span class="sy1">+</span>1<span class="sy1">:</span><span class="br0">]</span> <span class="coMULTI">#) DO (#</span><span class="sy1">,</span><br>    <span class="coMULTI">##</span>   <span class="br0">(</span>COMBDATALIST sub recombination<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">:</span><span class="br0">(</span><br>        out<span class="br0">[</span><span class="kw8">LWB</span> list   <span class="br0">]</span> <span class="sy1">:=</span> first<span class="sy1">;</span><br>        out<span class="br0">[</span><span class="kw8">LWB</span> list<span class="sy1">+</span>1<span class="sy1">:</span><span class="br0">]</span> <span class="sy1">:=</span> sub recombination<span class="sy1">;</span><br>        yield<span class="br0">(</span>out<span class="br0">)</span><br>    <span class="coMULTI"># OD #</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="kw2">OD</span><br>  <span class="kw2">ESAC</span><br><span class="br0">)</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw7">SKIP</span></pre><b>File: test_combinations.a68</b><pre class="algol68 highlighted_source"><span class="coMULTI">#!/usr/bin/a68g --script #</span><br><span class="coMULTI"># -*- coding: utf-8 -*- #</span><br>&nbsp;<br><span class="co1">CO REQUIRED BY "prelude_combinations.a68" CO</span><br>  <span class="kw4">MODE</span> COMBDATA <span class="sy1">=</span> <span class="kw3">INT</span><span class="sy1">;</span><br><span class="coMULTI">#PROVIDES:#</span><br><span class="coMULTI"># COMBDATA~=INT~ #</span><br><span class="coMULTI"># comb ~=int list ~#</span><br><span class="co2">PR READ "prelude_combinations.a68" PR</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw6">FORMAT</span> data fmt <span class="sy1">=</span> $g<span class="br0">(</span>0<span class="br0">)</span>$<span class="sy1">;</span><br>&nbsp;<br>main<span class="sy1">:</span><span class="br0">(</span><br>  <span class="kw3">INT</span> m <span class="sy1">=</span> 3<span class="sy1">;</span><br>  <span class="kw6">FORMAT</span> list fmt <span class="sy1">=</span> $<span class="st0">"("</span>n<span class="br0">(</span>m<span class="sy1">-</span>1<span class="br0">)</span><span class="br0">(</span>f<span class="br0">(</span>data fmt<span class="br0">)</span><span class="st0">","</span><span class="br0">)</span>f<span class="br0">(</span>data fmt<span class="br0">)</span><span class="st0">")"</span>$<span class="sy1">;</span><br>  <span class="kw4">FLEX</span><span class="br0">[</span>0<span class="br0">]</span>COMBDATA test data list <span class="sy1">:=</span> <span class="br0">(</span>1<span class="sy1">,</span>2<span class="sy1">,</span>3<span class="sy1">,</span>4<span class="sy1">,</span>5<span class="br0">)</span><span class="sy1">;</span><br><span class="coMULTI"># FOR COMBDATALIST recombination data IN #</span> comb gen combinations<span class="br0">(</span>m<span class="sy1">,</span> test data list <span class="coMULTI">#) DO (#</span><span class="sy1">,</span><br><span class="coMULTI">##</span>    <span class="br0">(</span>COMBDATALIST recombination<span class="br0">)</span><span class="kw3">VOID</span><span class="sy1">:</span><span class="br0">(</span><br>    <span class="kw22">printf</span> <span class="br0">(</span><span class="br0">(</span>list fmt<span class="sy1">,</span> recombination<span class="sy1">,</span> $l$<span class="br0">)</span><span class="br0">)</span><br><span class="coMULTI"># OD #</span> <span class="br0">)</span><span class="br0">)</span><br><span class="br0">)</span><br>&nbsp;</pre><b>Output:</b>
<pre>(1,2,3)
(1,2,4)
(1,2,5)
(1,3,4)
(1,3,5)
(1,4,5)
(2,3,4)
(2,3,5)
(2,4,5)
(3,4,5)
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=3" title="Edit section: AppleScript">edit</a>]</span> <span class="mw-headline" id="AppleScript"><a href="http://rosettacode.org/wiki/Category:AppleScript" title="Category:AppleScript">AppleScript</a></span></h2>
<pre class="applescript highlighted_source"><span class="kw3">on</span> comb<span class="br0">(</span>n, k<span class="br0">)</span><br>	<span class="kw3">set</span> c <span class="kw3">to</span> <span class="br0">{</span><span class="br0">}</span><br>	<span class="kw3">repeat</span> <span class="kw3">with</span> i <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">to</span> k<br>		<span class="kw3">set</span> <span class="kw3">end</span> <span class="kw3">of</span> c <span class="kw3">to</span> i<span class="co2">'</span>s <span class="kw1">contents</span><br>	<span class="kw3">end</span> <span class="kw3">repeat</span><br>	<span class="kw3">set</span> r <span class="kw3">to</span> <span class="br0">{</span>c<span class="co2">'</span>s <span class="kw1">contents</span><span class="br0">}</span><br>	<span class="kw3">repeat</span> <span class="kw3">while</span> <span class="kw3">my</span> next_comb<span class="br0">(</span>c, k, n<span class="br0">)</span><br>		<span class="kw3">set</span> <span class="kw3">end</span> <span class="kw3">of</span> r <span class="kw3">to</span> c<span class="co2">'</span>s <span class="kw1">contents</span><br>	<span class="kw3">end</span> <span class="kw3">repeat</span><br>	<span class="kw3">return</span> r<br><span class="kw3">end</span> comb<br>&nbsp;<br><span class="kw3">on</span> next_comb<span class="br0">(</span>c, k, n<span class="br0">)</span><br>	<span class="kw3">set</span> i <span class="kw3">to</span> k<br>	<span class="kw3">set</span> c<span class="co2">'</span>s <span class="kw1">item</span> i <span class="kw3">to</span> <span class="br0">(</span>c<span class="co2">'</span>s <span class="kw1">item</span> i<span class="br0">)</span> <span class="sy0">+</span> <span class="nu0">1</span><br>	<span class="kw3">repeat</span> <span class="kw3">while</span> <span class="br0">(</span>i &gt; <span class="nu0">1</span> <span class="kw2">and</span> c<span class="co2">'</span>s <span class="kw1">item</span> i ≥ n <span class="sy0">-</span> k <span class="sy0">+</span> <span class="nu0">1</span> <span class="sy0">+</span> i<span class="br0">)</span><br>		<span class="kw3">set</span> i <span class="kw3">to</span> i <span class="sy0">-</span> <span class="nu0">1</span><br>		<span class="kw3">set</span> c<span class="co2">'</span>s <span class="kw1">item</span> i <span class="kw3">to</span> <span class="br0">(</span>c<span class="co2">'</span>s <span class="kw1">item</span> i<span class="br0">)</span> <span class="sy0">+</span> <span class="nu0">1</span><br>	<span class="kw3">end</span> <span class="kw3">repeat</span><br>	<span class="kw3">if</span> <span class="br0">(</span>c<span class="co2">'</span>s <span class="kw1">item</span> <span class="nu0">1</span> &gt; n <span class="sy0">-</span> k <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span> <span class="kw3">then</span> <span class="kw3">return</span> <span class="kw1">false</span>	<br>	<span class="kw3">repeat</span> <span class="kw3">with</span> i <span class="kw3">from</span> i <span class="sy0">+</span> <span class="nu0">1</span> <span class="kw3">to</span> k<br>		<span class="kw3">set</span> c<span class="co2">'</span>s <span class="kw1">item</span> i <span class="kw3">to</span> <span class="br0">(</span>c<span class="co2">'</span>s <span class="kw1">item</span> <span class="br0">(</span>i <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">+</span> <span class="nu0">1</span><br>	<span class="kw3">end</span> <span class="kw3">repeat</span><br>	<span class="kw3">return</span> <span class="kw1">true</span><br><span class="kw3">end</span> next_comb<br>&nbsp;<br><span class="kw3">return</span> comb<span class="br0">(</span><span class="nu0">5</span>, <span class="nu0">3</span><span class="br0">)</span></pre>Output:<pre class="applescript highlighted_source"><span class="br0">{</span><span class="br0">{</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">}</span>, <span class="br0">{</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">4</span><span class="br0">}</span>, <span class="br0">{</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">5</span><span class="br0">}</span>, <span class="br0">{</span><span class="nu0">1</span>, <span class="nu0">3</span>, <span class="nu0">4</span><span class="br0">}</span>, <span class="br0">{</span><span class="nu0">1</span>, <span class="nu0">3</span>, <span class="nu0">5</span><span class="br0">}</span>, <span class="br0">{</span><span class="nu0">1</span>, <span class="nu0">4</span>, <span class="nu0">5</span><span class="br0">}</span>, <span class="br0">{</span><span class="nu0">2</span>, <span class="nu0">3</span>, <span class="nu0">4</span><span class="br0">}</span>, <span class="br0">{</span><span class="nu0">2</span>, <span class="nu0">3</span>, <span class="nu0">5</span><span class="br0">}</span>, <span class="br0">{</span><span class="nu0">2</span>, <span class="nu0">4</span>, <span class="nu0">5</span><span class="br0">}</span>, <span class="br0">{</span><span class="nu0">3</span>, <span class="nu0">4</span>, <span class="nu0">5</span><span class="br0">}</span><span class="br0">}</span></pre>
<p><br>
</p>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=4" title="Edit section: AutoHotkey">edit</a>]</span> <span class="mw-headline" id="AutoHotkey"><a href="http://rosettacode.org/wiki/Category:AutoHotkey" title="Category:AutoHotkey">AutoHotkey</a></span></h2>
<p>contributed by Laszlo on the ahk <a rel="nofollow" class="external text" href="http://www.autohotkey.com/forum/post-276224.html#276224">forum</a>
</p>
<pre class="autohotkey highlighted_source"><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a>&nbsp;% Comb<span class="br0">(</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">)</span><br><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a>&nbsp;% Comb<span class="br0">(</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">)</span><br><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a>&nbsp;% Comb<span class="br0">(</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">)</span><br><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a>&nbsp;% Comb<span class="br0">(</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">)</span><br><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a>&nbsp;% Comb<span class="br0">(</span><span class="nu0">5</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">)</span><br>&nbsp;<br>Comb<span class="br0">(</span>n<span class="sy0">,</span>t<span class="br0">)</span> <span class="br0">{</span> <span class="co1">; Generate all n choose t combinations of 1..n, lexicographically</span><br>   <a href="http://www.autohotkey.com/docs/commands/IfLess.htm"><span class="kw3">IfLess</span></a> n<span class="sy0">,</span><span class="re0">%t%</span><span class="sy0">,</span> <span class="kw1">Return</span><br>   <a href="http://www.autohotkey.com/docs/commands/Loop.htm"><span class="kw3">Loop</span></a> <span class="re0">%t%</span><br>      c<span class="re0">%A_Index%</span> <span class="sy0">:=</span> <a href="http://www.autohotkey.com/docs/Variables.htm#A_Index"><span class="kw2">A_Index</span></a><br>   i <span class="sy0">:=</span> t<span class="sy0">+</span><span class="nu0">1</span><span class="sy0">,</span> c<span class="re0">%i%</span> <span class="sy0">:=</span> n<span class="sy0">+</span><span class="nu0">1</span><br>&nbsp;<br>   <a href="http://www.autohotkey.com/docs/commands/Loop.htm"><span class="kw3">Loop</span></a> <span class="br0">{</span><br>      <a href="http://www.autohotkey.com/docs/commands/Loop.htm"><span class="kw3">Loop</span></a> <span class="re0">%t%</span><br>         i <span class="sy0">:=</span> t<span class="sy0">+</span><span class="nu0">1</span><span class="sy0">-</span><a href="http://www.autohotkey.com/docs/Variables.htm#A_Index"><span class="kw2">A_Index</span></a><span class="sy0">,</span> c <span class="sy0">.=</span> c<span class="re0">%i%</span> <span class="st0">" "</span><br>      c <span class="sy0">.=</span> <span class="st0">"`n"</span>     <span class="co1">; combinations in new lines</span><br>      j <span class="sy0">:=</span> <span class="nu0">1</span><span class="sy0">,</span> i <span class="sy0">:=</span> <span class="nu0">2</span><br>      <a href="http://www.autohotkey.com/docs/commands/Loop.htm"><span class="kw3">Loop</span></a><br>         <span class="kw1">If</span> <span class="br0">(</span>c<span class="re0">%j%</span><span class="sy0">+</span><span class="nu0">1</span> <span class="sy0">=</span> c<span class="re0">%i%</span><span class="br0">)</span><br>             c<span class="re0">%j%</span> <span class="sy0">:=</span> j<span class="sy0">,</span> <span class="sy0">++</span>j<span class="sy0">,</span> <span class="sy0">++</span>i<br>         <span class="kw1">Else</span> <a href="http://www.autohotkey.com/docs/commands/Break.htm"><span class="kw3">Break</span></a><br>      <span class="kw1">If</span> <span class="br0">(</span>j <span class="sy0">&gt;</span> t<span class="br0">)</span><br>         <span class="kw1">Return</span> c<br>      c<span class="re0">%j%</span> <span class="sy0">+=</span> <span class="nu0">1</span><br>   <span class="br0">}</span><br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=5" title="Edit section: AWK">edit</a>]</span> <span class="mw-headline" id="AWK"><a href="http://rosettacode.org/wiki/Category:AWK" title="Category:AWK">AWK</a></span></h2>
<pre class="awk highlighted_source"><span class="kw2">BEGIN</span> <span class="br0">{</span><br>	<span class="co1">## Default values for r and n (Choose 3 from pool of 5).  Can</span><br>	<span class="co1">## alternatively be set on the command line:-</span><br>	<span class="co1">## awk -v r=&lt;number of items being chosen&gt; -v n=&lt;how many to choose from&gt; -f &lt;scriptname&gt;</span><br>	<span class="kw1">if</span> <span class="br0">(</span><span class="kw4">length</span><span class="br0">(</span>r<span class="br0">)</span> <span class="sy2">==</span> <span class="nu0">0</span><span class="br0">)</span> r = <span class="nu0">3</span><br>	<span class="kw1">if</span> <span class="br0">(</span><span class="kw4">length</span><span class="br0">(</span>n<span class="br0">)</span> <span class="sy2">==</span> <span class="nu0">0</span><span class="br0">)</span> n = <span class="nu0">5</span><br>&nbsp;<br>	<span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">1</span>; i <span class="sy2">&lt;=</span> r; i<span class="sy3">++</span><span class="br0">)</span> <span class="br0">{</span> <span class="co1">## First combination of items:</span><br>		A<span class="br0">[</span>i<span class="br0">]</span> = i<br>		<span class="kw1">if</span> <span class="br0">(</span>i <span class="sy2">&lt;</span> r <span class="br0">)</span> <span class="kw5">printf</span> i <span class="kw3">OFS</span><br>		<span class="kw1">else</span> <span class="kw5">print</span> i<span class="br0">}</span><br>&nbsp;<br>	<span class="co1">## While 1st item is less than its maximum permitted value...</span><br>	<span class="kw1">while</span> <span class="br0">(</span>A<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy2">&lt;</span> n <span class="sy3">-</span> r <span class="sy3">+</span> <span class="nu0">1</span><span class="br0">)</span> <span class="br0">{</span><br>		<span class="co1">## loop backwards through all items in the previous</span><br>		<span class="co1">## combination of items until an item is found that is</span><br>		<span class="co1">## less than its maximum permitted value:</span><br>		<span class="kw1">for</span> <span class="br0">(</span>i = r; i <span class="sy2">&gt;=</span> <span class="nu0">1</span>; i<span class="sy3">--</span><span class="br0">)</span> <span class="br0">{</span><br>			<span class="co1">## If the equivalently positioned item in the</span><br>			<span class="co1">## previous combination of items is less than its</span><br>			<span class="co1">## maximum permitted value...</span><br>			<span class="kw1">if</span> <span class="br0">(</span>A<span class="br0">[</span>i<span class="br0">]</span> <span class="sy2">&lt;</span> n <span class="sy3">-</span> r <span class="sy3">+</span> i<span class="br0">)</span> <span class="br0">{</span><br>				<span class="co1">## increment the current item by 1:</span><br>				A<span class="br0">[</span>i<span class="br0">]</span><span class="sy3">++</span><br>				<span class="co1">## Save the current position-index for use</span><br>				<span class="co1">## outside this "for" loop:</span><br>				p = i<br>				<span class="kw1">break</span><span class="br0">}</span><span class="br0">}</span><br>		<span class="co1">## Put consecutive numbers in the remainder of the array,</span><br>		<span class="co1">## counting up from position-index p.</span><br>		<span class="kw1">for</span> <span class="br0">(</span>i = p <span class="sy3">+</span> <span class="nu0">1</span>; i <span class="sy2">&lt;=</span> r; i<span class="sy3">++</span><span class="br0">)</span> A<span class="br0">[</span>i<span class="br0">]</span> = A<span class="br0">[</span>i <span class="sy3">-</span> <span class="nu0">1</span><span class="br0">]</span> <span class="sy3">+</span> <span class="nu0">1</span><br>&nbsp;<br>		<span class="co1">## Print the current combination of items:</span><br>		<span class="kw1">for</span> <span class="br0">(</span>i=<span class="nu0">1</span>; i <span class="sy2">&lt;=</span> r; i<span class="sy3">++</span><span class="br0">)</span> <span class="br0">{</span><br>			<span class="kw1">if</span> <span class="br0">(</span>i <span class="sy2">&lt;</span> r<span class="br0">)</span> <span class="kw5">printf</span> A<span class="br0">[</span>i<span class="br0">]</span> <span class="kw3">OFS</span><br>			<span class="kw1">else</span> <span class="kw5">print</span> A<span class="br0">[</span>i<span class="br0">]</span><span class="br0">}</span><span class="br0">}</span><br>	exit<span class="br0">}</span></pre>
<p>Usage:
</p>
<pre>awk -v r=3 -v n=5 -f combn.awk
</pre>
<p>Output:
</p>
<pre>1 2 3
1 2 4
1 2 5
1 3 4
1 3 5
1 4 5
2 3 4
2 3 5
2 4 5
3 4 5
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=6" title="Edit section: BBC BASIC">edit</a>]</span> <span class="mw-headline" id="BBC_BASIC"><a href="http://rosettacode.org/wiki/Category:BBC_BASIC" title="Category:BBC BASIC">BBC BASIC</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/BBC_BASIC_for_Windows" title="BBC BASIC for Windows">BBC BASIC for Windows</a></div>
<pre class="text highlighted_source">      INSTALL @lib$+"SORTLIB"<br>      sort% = FN_sortinit(0,0)<br>&nbsp;<br>      M% = 3<br>      N% = 5<br>&nbsp;<br>      C% = FNfact(N%)/(FNfact(M%)*FNfact(N%-M%))<br>      DIM s$(C%)<br>      PROCcomb(M%, N%, s$())<br>&nbsp;<br>      CALL sort%, s$(0)<br>      FOR I% = 0 TO C%-1<br>        PRINT s$(I%)<br>      NEXT<br>      END<br>&nbsp;<br>      DEF PROCcomb(C%, N%, s$())<br>      LOCAL I%, U%<br>      FOR U% = 0 TO 2^N%-1<br>        IF FNbits(U%) = C% THEN<br>          s$(I%) = FNlist(U%)<br>          I% += 1<br>        ENDIF<br>      NEXT<br>      ENDPROC<br>&nbsp;<br>      DEF FNbits(U%)<br>      LOCAL N%<br>      WHILE U%<br>        N% += 1<br>        U% = U% AND (U%-1)<br>      ENDWHILE<br>      = N%<br>&nbsp;<br>      DEF FNlist(U%)<br>      LOCAL N%, s$<br>      WHILE U%<br>        IF U% AND 1 s$ += STR$(N%) + " "<br>        N% += 1<br>        U% = U% &gt;&gt; 1<br>      ENDWHILE<br>      = s$<br>&nbsp;<br>      DEF FNfact(N%)<br>      IF N%&lt;=1 THEN = 1 ELSE = N%*FNfact(N%-1)<br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=7" title="Edit section: Bracmat">edit</a>]</span> <span class="mw-headline" id="Bracmat"><a href="http://rosettacode.org/wiki/Category:Bracmat" title="Category:Bracmat">Bracmat</a></span></h2>
<p>The program first constructs a pattern with <code>m</code> variables and an expression that evaluates <code>m</code> variables into a combination.
Then the program constructs a list of the integers <code>0 ... n-1</code>.
The real work is done in the expression <code>!list:!pat</code>. When a combination is found, it is added to the list of combinations. Then we force the program to backtrack and find the next combination by evaluating the always failing <code>~</code>.
When all combinations are found, the pattern fails and we are in the rhs of the last <code>|</code> operator.
</p>
<pre class="text highlighted_source">(comb=<br>  bvar combination combinations list m n pat pvar var<br>.    &nbsp;!arg:(?m.?n)<br>    &amp; ( pat<br>      =  &nbsp;?<br>        &amp;&nbsp;!combinations (.!combination):?combinations<br>        &amp; ~<br>      )<br>    &amp;&nbsp;:?list:?combination:?combinations<br>    &amp;   whl<br>      ' (&nbsp;!m+-1:~&lt;0:?m<br>        &amp; chu$(utf$a+!m):?var<br>        &amp; glf$('(%@?.$var)):(=?pvar)<br>        &amp; '(? ()$pvar ()$pat):(=?pat)<br>        &amp; glf$('(!.$var)):(=?bvar)<br>        &amp; (   '$combination:(=)<br>            &amp; '$bvar:(=?combination)<br>          | '($bvar ()$combination):(=?combination)<br>          )<br>        )<br>    &amp;   whl<br>      ' (!n+-1:~&lt;0:?n&amp;!n&nbsp;!list:?list)<br>    &amp;&nbsp;!list:!pat<br>  |&nbsp;!combinations);</pre>
<pre>comb$(3.5)  
</pre>
<pre>(.0 1 2)
(.0 1 3)
(.0 1 4)
(.0 2 3)
(.0 2 4)
(.0 3 4)
(.1 2 3)
(.1 2 4)
(.1 3 4)
(.2 3 4)
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=8" title="Edit section: C">edit</a>]</span> <span class="mw-headline" id="C"><a href="http://rosettacode.org/wiki/Category:C" title="Category:C">C</a></span></h2>
<pre class="c highlighted_source"><span class="co2">#include &lt;stdio.h&gt;</span><br>&nbsp;<br><span class="coMULTI">/* Type marker stick: using bits to indicate what's chosen.  The stick can't<br> * handle more than 32 items, but the idea is there; at worst, use array instead */</span><br><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">long</span> marker<span class="sy0">;</span><br>marker one <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw4">void</span> comb<span class="br0">(</span><span class="kw4">int</span> pool<span class="sy0">,</span> <span class="kw4">int</span> need<span class="sy0">,</span> marker chosen<span class="sy0">,</span> <span class="kw4">int</span> at<span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw1">if</span> <span class="br0">(</span>pool <span class="sy0">&lt;</span> need <span class="sy0">+</span> at<span class="br0">)</span> <span class="kw1">return</span><span class="sy0">;</span> <span class="coMULTI">/* not enough bits left */</span><br>&nbsp;<br>	<span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>need<span class="br0">)</span> <span class="br0">{</span><br>		<span class="coMULTI">/* got all we needed; print the thing.  if other actions are<br>		 * desired, we could have passed in a callback function. */</span><br>		<span class="kw1">for</span> <span class="br0">(</span>at <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> at <span class="sy0">&lt;</span> pool<span class="sy0">;</span> at<span class="sy0">++</span><span class="br0">)</span><br>			<span class="kw1">if</span> <span class="br0">(</span>chosen <span class="sy0">&amp;</span> <span class="br0">(</span>one <span class="sy0">&lt;&lt;</span> at<span class="br0">)</span><span class="br0">)</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">(</span><span class="st0">"%d "</span><span class="sy0">,</span> at<span class="br0">)</span><span class="sy0">;</span><br>		<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">(</span><span class="st0">"<span class="es1">\n</span>"</span><span class="br0">)</span><span class="sy0">;</span><br>		<span class="kw1">return</span><span class="sy0">;</span><br>	<span class="br0">}</span><br>	<span class="coMULTI">/* if we choose the current item, "or" (|) the bit to mark it so. */</span><br>	comb<span class="br0">(</span>pool<span class="sy0">,</span> need <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">,</span> chosen <span class="sy0">|</span> <span class="br0">(</span>one <span class="sy0">&lt;&lt;</span> at<span class="br0">)</span><span class="sy0">,</span> at <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>	comb<span class="br0">(</span>pool<span class="sy0">,</span> need<span class="sy0">,</span> chosen<span class="sy0">,</span> at <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span>  <span class="coMULTI">/* or don't choose it, go to next */</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span><br><span class="br0">{</span><br>	comb<span class="br0">(</span><span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=9" title="Edit section: Lexicographic ordered generation">edit</a>]</span> <span class="mw-headline" id="Lexicographic_ordered_generation">Lexicographic ordered generation</span></h3>
<p>Without recursions, generate all combinations in sequence. Basic logic: put n items in the first n of m slots; each step, if right most slot can be moved one slot further right, do so; otherwise
find right most item that can be moved, move it one step and put all items already to its right next to it.
</p>
<pre class="c highlighted_source"><span class="co2">#include &lt;stdio.h&gt;</span><br>&nbsp;<br><span class="kw4">void</span> comb<span class="br0">(</span><span class="kw4">int</span> m<span class="sy0">,</span> <span class="kw4">int</span> n<span class="sy0">,</span> <span class="kw4">unsigned</span> <span class="kw4">char</span> <span class="sy0">*</span>c<span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">int</span> i<span class="sy0">;</span><br>	<span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> n<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span> c<span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">=</span> n <span class="sy0">-</span> i<span class="sy0">;</span><br>&nbsp;<br>	<span class="kw1">while</span> <span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span> <span class="br0">{</span><br>		<span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> n<span class="sy0">;</span> i<span class="sy0">--;</span><span class="br0">)</span><br>			<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">(</span><span class="st0">"%d%c"</span><span class="sy0">,</span> c<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">,</span> i <span class="sy0">?</span> <span class="st0">' '</span><span class="sy0">:</span> <span class="st0">'<span class="es1">\n</span>'</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>		<span class="coMULTI">/* this check is not strictly necessary, but if m is not close to n,<br>		   it makes the whole thing quite a bit faster */</span><br>		<span class="kw1">if</span> <span class="br0">(</span>c<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">++</span> <span class="sy0">&lt;</span> m<span class="br0">)</span> <span class="kw1">continue</span><span class="sy0">;</span><br>&nbsp;<br>		<span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> c<span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">&gt;=</span> m <span class="sy0">-</span> i<span class="sy0">;</span><span class="br0">)</span> <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">++</span>i <span class="sy0">&gt;=</span> n<span class="br0">)</span> <span class="kw1">return</span><span class="sy0">;</span><br>		<span class="kw1">for</span> <span class="br0">(</span>c<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">++;</span> i<span class="sy0">;</span> i<span class="sy0">--</span><span class="br0">)</span> c<span class="br0">[</span>i<span class="sy0">-</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> c<span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span><br>	<span class="br0">}</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">unsigned</span> <span class="kw4">char</span> buf<span class="br0">[</span><span class="nu0">100</span><span class="br0">]</span><span class="sy0">;</span><br>	comb<span class="br0">(</span><span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> buf<span class="br0">)</span><span class="sy0">;</span><br>	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=10" title="Edit section: C++">edit</a>]</span> <span class="mw-headline" id="C.2B.2B"><a href="http://rosettacode.org/wiki/Category:C%2B%2B" title="Category:C++">C++</a></span></h2>
<pre class="cpp highlighted_source"><span class="co2">#include &lt;algorithm&gt;</span><br><span class="co2">#include &lt;iostream&gt;</span><br><span class="co2">#include &lt;string&gt;</span><br>&nbsp;<br><span class="kw4">void</span> comb<span class="br0">(</span><span class="kw4">int</span> N, <span class="kw4">int</span> K<span class="br0">)</span><br><span class="br0">{</span><br>    std<span class="sy4">::</span><span class="me2">string</span> bitmask<span class="br0">(</span>K, <span class="nu0">1</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// K leading 1's</span><br>    bitmask.<span class="me1">resize</span><span class="br0">(</span>N, <span class="nu0">0</span><span class="br0">)</span><span class="sy4">;</span> <span class="co1">// N-K trailing 0's</span><br>&nbsp;<br>    <span class="co1">// print integers and permute bitmask</span><br>    <span class="kw1">do</span> <span class="br0">{</span><br>        <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> N<span class="sy4">;</span> <span class="sy2">++</span>i<span class="br0">)</span> <span class="co1">// [0..N-1] integers</span><br>        <span class="br0">{</span><br>            <span class="kw1">if</span> <span class="br0">(</span>bitmask<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span> std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">" "</span> <span class="sy1">&lt;&lt;</span> i<span class="sy4">;</span><br>        <span class="br0">}</span><br>        std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span><br>    <span class="br0">}</span> <span class="kw1">while</span> <span class="br0">(</span>std<span class="sy4">::</span><span class="me2">prev_permutation</span><span class="br0">(</span>bitmask.<span class="me1">begin</span><span class="br0">(</span><span class="br0">)</span>, bitmask.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy4">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span><br><span class="br0">{</span><br>    comb<span class="br0">(</span><span class="nu0">5</span>, <span class="nu0">3</span><span class="br0">)</span><span class="sy4">;</span><br><span class="br0">}</span></pre>
<p>Output:
</p>
<pre> 0 1 2
 0 1 3
 0 1 4
 0 2 3
 0 2 4
 0 3 4
 1 2 3
 1 2 4
 1 3 4
 2 3 4
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=11" title="Edit section: C#">edit</a>]</span> <span class="mw-headline" id="C.23"><span id="C_sharp"><a href="http://rosettacode.org/wiki/Category:C_sharp" title="Category:C sharp">C#</a></span></span></h2>
<pre class="csharp highlighted_source"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span><br><span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw1">public</span> <span class="kw4">class</span> Program<br><span class="br0">{</span><br>    <span class="kw1">public</span> <span class="kw1">static</span> IEnumerable<span class="sy0">&lt;</span><span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span><span class="sy0">&gt;</span> Combinations<span class="br0">(</span><span class="kw4">int</span> m, <span class="kw4">int</span> n<span class="br0">)</span><br>    <span class="br0">{</span><br>            <span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> result <span class="sy0">=</span> <a href="http://www.google.com/search?q=new+msdn.microsoft.com"><span class="kw3">new</span></a> <span class="kw4">int</span><span class="br0">[</span>m<span class="br0">]</span><span class="sy0">;</span><br>            Stack<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span> stack <span class="sy0">=</span> <a href="http://www.google.com/search?q=new+msdn.microsoft.com"><span class="kw3">new</span></a> Stack<span class="sy0">&lt;</span><span class="kw4">int</span><span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>            stack<span class="sy0">.</span><span class="me1">Push</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>            <span class="kw1">while</span> <span class="br0">(</span>stack<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">)</span> <span class="br0">{</span><br>                <span class="kw4">int</span> index <span class="sy0">=</span> stack<span class="sy0">.</span><span class="me1">Count</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span><br>                <span class="kw4">int</span> <span class="kw1">value</span> <span class="sy0">=</span> stack<span class="sy0">.</span><span class="me1">Pop</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>                <span class="kw1">while</span> <span class="br0">(</span><span class="kw1">value</span> <span class="sy0">&lt;</span> n<span class="br0">)</span> <span class="br0">{</span><br>                    result<span class="br0">[</span>index<span class="sy0">++</span><span class="br0">]</span> <span class="sy0">=</span> <span class="kw1">value</span><span class="sy0">++;</span><br>                    stack<span class="sy0">.</span><span class="me1">Push</span><span class="br0">(</span><span class="kw1">value</span><span class="br0">)</span><span class="sy0">;</span><br>                    <span class="kw1">if</span> <span class="br0">(</span>index <span class="sy0">==</span> m<span class="br0">)</span> <span class="br0">{</span><br>                        <span class="kw1">yield</span> <span class="kw1">return</span> result<span class="sy0">;</span><br>                        <span class="kw1">break</span><span class="sy0">;</span><br>                    <span class="br0">}</span><br>                <span class="br0">}</span><br>            <span class="br0">}</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">(</span><span class="br0">)</span><br>    <span class="br0">{</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> c <span class="kw1">in</span> Combinations<span class="br0">(</span><span class="nu0">3</span>, <span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">{</span><br>            <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> c<span class="sy0">.</span><span class="me1">Length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><br>            <span class="br0">{</span><br>                Console<span class="sy0">.</span><span class="me1">Write</span><span class="br0">(</span>c<span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">+</span> <span class="st0">" "</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>            Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>    <span class="br0">}</span><br><span class="br0">}</span></pre>
<p>Here is another implementation that uses recursion, intead of an explicit stack:
</p>
<pre class="csharp highlighted_source">&nbsp;<br><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span><br><span class="kw1">using</span> <span class="co3">System.Collections.Generic</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw1">public</span> <span class="kw4">class</span> Program<br><span class="br0">{</span><br>  <span class="kw1">public</span> <span class="kw1">static</span> IEnumerable<span class="sy0">&lt;</span><span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span><span class="sy0">&gt;</span> FindCombosRec<span class="br0">(</span><span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> buffer, <span class="kw4">int</span> done, <span class="kw4">int</span> begin, <span class="kw4">int</span> end<span class="br0">)</span><br>  <span class="br0">{</span><br>    <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> begin<span class="sy0">;</span> i <span class="sy0">&lt;</span> end<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><br>    <span class="br0">{</span><br>      buffer<span class="br0">[</span>done<span class="br0">]</span> <span class="sy0">=</span> i<span class="sy0">;</span><br>&nbsp;<br>      <span class="kw1">if</span> <span class="br0">(</span>done <span class="sy0">==</span> buffer<span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span><br>        <span class="kw1">yield</span> <span class="kw1">return</span> buffer<span class="sy0">;</span><br>      <span class="kw1">else</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> child <span class="kw1">in</span> FindCombosRec<span class="br0">(</span>buffer, done<span class="sy0">+</span><span class="nu0">1</span>, i<span class="sy0">+</span><span class="nu0">1</span>, end<span class="br0">)</span><span class="br0">)</span><br>          <span class="kw1">yield</span> <span class="kw1">return</span> child<span class="sy0">;</span><br>    <span class="br0">}</span><br>  <span class="br0">}</span><br>&nbsp;<br>  <span class="kw1">public</span> <span class="kw1">static</span> IEnumerable<span class="sy0">&lt;</span><span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span><span class="sy0">&gt;</span> FindCombinations<span class="br0">(</span><span class="kw4">int</span> m, <span class="kw4">int</span> n<span class="br0">)</span><br>  <span class="br0">{</span><br>    <span class="kw1">return</span> FindCombosRec<span class="br0">(</span><a href="http://www.google.com/search?q=new+msdn.microsoft.com"><span class="kw3">new</span></a> <span class="kw4">int</span><span class="br0">[</span>m<span class="br0">]</span>, <span class="nu0">0</span>, <span class="nu0">0</span>, n<span class="br0">)</span><span class="sy0">;</span><br>  <span class="br0">}</span><br>&nbsp;<br>  <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">(</span><span class="br0">)</span><br>  <span class="br0">{</span><br>    <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> c <span class="kw1">in</span> FindCombinations<span class="br0">(</span><span class="nu0">3</span>, <span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">{</span><br>      <span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> c<span class="sy0">.</span><span class="me1">Length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><br>      <span class="br0">{</span><br>        Console<span class="sy0">.</span><span class="me1">Write</span><span class="br0">(</span>c<span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">+</span> <span class="st0">" "</span><span class="br0">)</span><span class="sy0">;</span><br>      <span class="br0">}</span><br>      Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>  <span class="br0">}</span><br><span class="br0">}</span><br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=12" title="Edit section: Clojure">edit</a>]</span> <span class="mw-headline" id="Clojure"><a href="http://rosettacode.org/wiki/Category:Clojure" title="Category:Clojure">Clojure</a></span></h2>
<pre class="clojure highlighted_source"><span class="br0">(</span><span class="kw1">defn</span> combinations<br>  <span class="st0">"If m=1, generate a nested list of numbers [0,n)<br>   If m&gt;1, for each x in [0,n), and for each list in the recursion on [x+1,n), cons the two"</span><br>  <span class="br0">[</span>m n<span class="br0">]</span><br>  <span class="br0">(</span><span class="kw1">letfn</span> <span class="br0">[</span><span class="br0">(</span>comb<span class="sy0">-</span>aux<br>	   <span class="br0">[</span>m start<span class="br0">]</span><br>	   <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">=</span> <span class="nu0">1</span> m<span class="br0">)</span><br>	     <span class="br0">(</span><span class="kw1">for</span> <span class="br0">[</span>x <span class="br0">(</span><span class="kw1">range</span> start n<span class="br0">)</span><span class="br0">]</span><br>	       <span class="br0">(</span>list x<span class="br0">)</span><span class="br0">)</span><br>	     <span class="br0">(</span><span class="kw1">for</span> <span class="br0">[</span>x <span class="br0">(</span><span class="kw1">range</span> start n<span class="br0">)</span><br>		   xs <span class="br0">(</span>comb<span class="sy0">-</span>aux <span class="br0">(</span><span class="kw1">dec</span> m<span class="br0">)</span> <span class="br0">(</span><span class="kw1">inc</span> x<span class="br0">)</span><span class="br0">)</span><span class="br0">]</span><br>	       <span class="br0">(</span><span class="kw1">cons</span> x xs<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">]</span><br>    <span class="br0">(</span>comb<span class="sy0">-</span>aux m <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defn</span> print<span class="sy0">-</span>combinations<br>  <span class="br0">[</span>m n<span class="br0">]</span><br>  <span class="br0">(</span><span class="kw1">doseq</span> <span class="br0">[</span>line <span class="br0">(</span>combinations m n<span class="br0">)</span><span class="br0">]</span><br>    <span class="br0">(</span><span class="kw1">doseq</span> <span class="br0">[</span>n line<span class="br0">]</span><br>      <span class="br0">(</span>printf <span class="st0">"%s "</span> n<span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span>printf <span class="st0">"%n"</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=13" title="Edit section: CoffeeScript">edit</a>]</span> <span class="mw-headline" id="CoffeeScript"><a href="http://rosettacode.org/wiki/Category:CoffeeScript" title="Category:CoffeeScript">CoffeeScript</a></span></h2>
<p>Basic backtracking solution.
</p>
<pre class="coffeescript highlighted_source">&nbsp;<br>combinations = <span class="br0">(</span>n<span class="sy0">,</span> p<span class="br0">)</span> <span class="sy0">-&gt;</span><br>  <span class="kw1">return</span> <span class="br0">[</span> <span class="br0">[</span><span class="br0">]</span> <span class="br0">]</span> <span class="kw1">if</span> p == <span class="nu0">0</span><br>  i = <span class="nu0">0</span><br>  combos = <span class="br0">[</span><span class="br0">]</span><br>  combo = <span class="br0">[</span><span class="br0">]</span><br>  <span class="kw1">while</span> combo.<span class="me1">length</span> <span class="sy0">&lt;</span> p<br>    <span class="kw1">if</span> i <span class="sy0">&lt;</span> n<br>      combo.<span class="me1">push</span> i<br>      i <span class="sy0">+</span>= <span class="nu0">1</span><br>    <span class="kw1">else</span><br>      <span class="kw1">break</span> <span class="kw1">if</span> combo.<span class="me1">length</span> == <span class="nu0">0</span><br>      i = combo.<span class="me1">pop</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">+</span> <span class="nu0">1</span><br>&nbsp;<br>    <span class="kw1">if</span> combo.<span class="me1">length</span> == p<br>      combos.<span class="me1">push</span> clone combo<br>      i = combo.<span class="me1">pop</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">+</span> <span class="nu0">1</span><br>  combos<br>&nbsp;<br>clone = <span class="br0">(</span>arr<span class="br0">)</span> <span class="sy0">-&gt;</span> <span class="br0">(</span>n <span class="kw1">for</span> n <span class="kw1">in</span> arr<span class="br0">)</span><br>&nbsp;<br>N = <span class="nu0">5</span><br><span class="kw1">for</span> i <span class="kw1">in</span> <span class="br0">[</span><span class="nu0">0</span>..<span class="me1">N</span><span class="br0">]</span><br>  console.<span class="me1">log</span> <span class="st0">"------ #{N} #{i}"</span><br>  <span class="kw1">for</span> combo <span class="kw1">in</span> combinations N<span class="sy0">,</span> i<br>    console.<span class="me1">log</span> combo<br>&nbsp;<br>&nbsp;</pre>
<p>output
</p>
<pre class="text highlighted_source">&gt; coffee combo.coffee <br>------ 5 0<br>[]<br>------ 5 1<br>[ 0 ]<br>[ 1 ]<br>[ 2 ]<br>[ 3 ]<br>[ 4 ]<br>------ 5 2<br>[ 0, 1 ]<br>[ 0, 2 ]<br>[ 0, 3 ]<br>[ 0, 4 ]<br>[ 1, 2 ]<br>[ 1, 3 ]<br>[ 1, 4 ]<br>[ 2, 3 ]<br>[ 2, 4 ]<br>[ 3, 4 ]<br>------ 5 3<br>[ 0, 1, 2 ]<br>[ 0, 1, 3 ]<br>[ 0, 1, 4 ]<br>[ 0, 2, 3 ]<br>[ 0, 2, 4 ]<br>[ 0, 3, 4 ]<br>[ 1, 2, 3 ]<br>[ 1, 2, 4 ]<br>[ 1, 3, 4 ]<br>[ 2, 3, 4 ]<br>------ 5 4<br>[ 0, 1, 2, 3 ]<br>[ 0, 1, 2, 4 ]<br>[ 0, 1, 3, 4 ]<br>[ 0, 2, 3, 4 ]<br>[ 1, 2, 3, 4 ]<br>------ 5 5<br>[ 0, 1, 2, 3, 4 ]<br>&nbsp;<br>&nbsp;</pre>
<p><br>
</p>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=14" title="Edit section: Common Lisp">edit</a>]</span> <span class="mw-headline" id="Common_Lisp"><a href="http://rosettacode.org/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></span></h2>
<pre class="lisp highlighted_source"><span class="br0">(</span><span class="kw1">defun</span> map-combinations <span class="br0">(</span>m n fn<span class="br0">)</span><br>  <span class="st0">"Call fn with each m combination of the integers from 0 to n-1 as a list. The list may be destroyed after fn returns."</span><br>  <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>combination <span class="br0">(</span><span class="kw1">make-list</span> m<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span>labels <span class="br0">(</span><span class="br0">(</span>up-from <span class="br0">(</span>low<span class="br0">)</span><br>               <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>start <span class="br0">(</span><span class="nu0">1</span>- low<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>                 <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span><span class="br0">)</span> <span class="br0">(</span>incf start<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>             <span class="br0">(</span>mc <span class="br0">(</span>curr left needed comb-tail<span class="br0">)</span><br>               <span class="br0">(</span><span class="kw1">cond</span><br>                <span class="br0">(</span><span class="br0">(</span><span class="kw1">zerop</span> needed<span class="br0">)</span><br>                 <span class="br0">(</span><span class="kw1">funcall</span> fn combination<span class="br0">)</span><span class="br0">)</span><br>                <span class="br0">(</span><span class="br0">(</span><span class="sy0">=</span> left needed<span class="br0">)</span><br>                 <span class="br0">(</span>map-into comb-tail <span class="br0">(</span>up-from curr<span class="br0">)</span><span class="br0">)</span><br>                 <span class="br0">(</span><span class="kw1">funcall</span> fn combination<span class="br0">)</span><span class="br0">)</span><br>                <span class="br0">(</span>t<br>                 <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span>first comb-tail<span class="br0">)</span> curr<span class="br0">)</span><br>                 <span class="br0">(</span>mc <span class="br0">(</span><span class="nu0">1</span>+ curr<span class="br0">)</span> <span class="br0">(</span><span class="nu0">1</span>- left<span class="br0">)</span> <span class="br0">(</span><span class="nu0">1</span>- needed<span class="br0">)</span> <span class="br0">(</span>rest comb-tail<span class="br0">)</span><span class="br0">)</span><br>                 <span class="br0">(</span>mc <span class="br0">(</span><span class="nu0">1</span>+ curr<span class="br0">)</span> <span class="br0">(</span><span class="nu0">1</span>- left<span class="br0">)</span> needed comb<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>      <span class="br0">(</span>mc <span class="nu0">0</span> n m combination<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></pre>
<p>Example use
</p>
<pre>&gt; (map-combinations 3 5 'print)

(0 1 2) 
(0 1 3) 
(0 1 4) 
(0 2 3) 
(0 2 4) 
(0 3 4) 
(1 2 3) 
(1 2 4) 
(1 3 4) 
(2 3 4) 
(2 3 4)</pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=15" title="Edit section: Recursive method">edit</a>]</span> <span class="mw-headline" id="Recursive_method"> Recursive method </span></h3>
<pre class="lisp highlighted_source"><span class="br0">(</span><span class="kw1">defun</span> comb <span class="br0">(</span>m <span class="kw1">list</span> fn<span class="br0">)</span><br>  <span class="br0">(</span>labels <span class="br0">(</span><span class="br0">(</span>comb1 <span class="br0">(</span><span class="kw1">l</span> c m<span class="br0">)</span><br>		  <span class="br0">(</span><span class="kw1">when</span> <span class="br0">(</span><span class="sy0">&gt;=</span> <span class="br0">(</span><span class="kw1">length</span> <span class="kw1">l</span><span class="br0">)</span> m<span class="br0">)</span><br>		    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">zerop</span> m<span class="br0">)</span> <span class="br0">(</span>return-from comb1 <span class="br0">(</span><span class="kw1">funcall</span> fn c<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>		    <span class="br0">(</span>comb1 <span class="br0">(</span><span class="kw1">cdr</span> <span class="kw1">l</span><span class="br0">)</span> c m<span class="br0">)</span><br>		    <span class="br0">(</span>comb1 <span class="br0">(</span><span class="kw1">cdr</span> <span class="kw1">l</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">cons</span> <span class="br0">(</span>first <span class="kw1">l</span><span class="br0">)</span> c<span class="br0">)</span> <span class="br0">(</span><span class="nu0">1</span>- m<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span>comb1 <span class="kw1">list</span> <span class="kw1">nil</span> m<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>comb <span class="nu0">3</span> '<span class="br0">(</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span><span class="br0">)</span> #'<span class="kw1">print</span><span class="br0">)</span></pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=16" title="Edit section: Alternate, iterative method">edit</a>]</span> <span class="mw-headline" id="Alternate.2C_iterative_method"> Alternate, iterative method </span></h3>
<pre class="lisp highlighted_source"><span class="br0">(</span><span class="kw1">defun</span> next-combination <span class="br0">(</span>n a<span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>k <span class="br0">(</span><span class="kw1">length</span> a<span class="br0">)</span><span class="br0">)</span> m<span class="br0">)</span><br>    <span class="br0">(</span>loop for i from <span class="nu0">1</span> <span class="kw1">do</span><br>        <span class="br0">(</span><span class="kw1">when</span> <span class="br0">(</span><span class="sy0">&gt;</span> i k<span class="br0">)</span> <span class="br0">(</span><span class="kw1">return</span> <span class="kw1">nil</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">(</span><span class="kw1">when</span> <span class="br0">(</span><span class="sy0">&lt;</span> <span class="br0">(</span><span class="kw1">aref</span> a <span class="br0">(</span>- k i<span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span>- n i<span class="br0">)</span><span class="br0">)</span><br>            <span class="br0">(</span><span class="kw1">setf</span> m <span class="br0">(</span><span class="kw1">aref</span> a <span class="br0">(</span>- k i<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>            <span class="br0">(</span>loop for j from i downto <span class="nu0">1</span> <span class="kw1">do</span><br>                <span class="br0">(</span>incf m<span class="br0">)</span><br>                <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span><span class="kw1">aref</span> a <span class="br0">(</span>- k j<span class="br0">)</span><span class="br0">)</span> m<span class="br0">)</span><span class="br0">)</span><br>            <span class="br0">(</span><span class="kw1">return</span> t<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defun</span> all-combinations <span class="br0">(</span>n k<span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">or</span> <span class="br0">(</span><span class="sy0">&lt;</span> k <span class="nu0">0</span><span class="br0">)</span> <span class="br0">(</span><span class="sy0">&lt;</span> n k<span class="br0">)</span><span class="br0">)</span> '<span class="br0">(</span><span class="br0">)</span><br>        <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>a <span class="br0">(</span>make-<span class="kw1">array</span> k<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>            <span class="br0">(</span>loop for i below k <span class="kw1">do</span> <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span><span class="kw1">aref</span> a i<span class="br0">)</span> i<span class="br0">)</span><span class="br0">)</span><br>            <span class="br0">(</span>loop collect <span class="br0">(</span>coerce a '<span class="kw1">list</span><span class="br0">)</span> while <span class="br0">(</span>next-combination n a<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defun</span> map-combinations <span class="br0">(</span>n k fun<span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">and</span> <span class="br0">(</span><span class="sy0">&gt;=</span> k <span class="nu0">0</span><span class="br0">)</span> <span class="br0">(</span><span class="sy0">&gt;=</span> n k<span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>a <span class="br0">(</span>make-<span class="kw1">array</span> k<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>            <span class="br0">(</span>loop for i below k <span class="kw1">do</span> <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span><span class="kw1">aref</span> a i<span class="br0">)</span> i<span class="br0">)</span><span class="br0">)</span><br>            <span class="br0">(</span>loop <span class="kw1">do</span> <span class="br0">(</span><span class="kw1">funcall</span> fun <span class="br0">(</span>coerce a '<span class="kw1">list</span><span class="br0">)</span><span class="br0">)</span> while <span class="br0">(</span>next-combination n a<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="co1">; all-combinations returns a list of lists</span><br>&nbsp;<br><span class="sy0">&gt;</span> <span class="br0">(</span>all-combinations <span class="nu0">4</span> <span class="nu0">3</span><span class="br0">)</span><br><span class="br0">(</span><span class="br0">(</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">2</span><span class="br0">)</span> <span class="br0">(</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">3</span><span class="br0">)</span> <span class="br0">(</span><span class="nu0">0</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span> <span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="co1">; map-combinations applies a function to each combination</span><br>&nbsp;<br><span class="sy0">&gt;</span> <span class="br0">(</span>map-combinations <span class="nu0">6</span> <span class="nu0">4</span> #'<span class="kw1">print</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">4</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">5</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">3</span> <span class="nu0">5</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">4</span> <span class="nu0">5</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">0</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">0</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">5</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">0</span> <span class="nu0">2</span> <span class="nu0">4</span> <span class="nu0">5</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">0</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">5</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">4</span> <span class="nu0">5</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">1</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span><span class="br0">)</span><br><span class="br0">(</span><span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span><span class="br0">)</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=17" title="Edit section: D">edit</a>]</span> <span class="mw-headline" id="D"><a href="http://rosettacode.org/wiki/Category:D" title="Category:D">D</a></span></h2>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=18" title="Edit section: Slow Recursive Version">edit</a>]</span> <span class="mw-headline" id="Slow_Recursive_Version">Slow Recursive Version</span></h3>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Combinations#Python" title="Combinations">Python</a></div>
<pre class="d highlighted_source">T<span class="br0">[</span><span class="br0">]</span><span class="br0">[</span><span class="br0">]</span> comb<span class="br0">(</span>T<span class="br0">)</span><span class="br0">(</span><span class="kw2">in</span> T<span class="br0">[</span><span class="br0">]</span> arr<span class="sy0">,</span> <span class="kw2">in</span> <span class="kw4">int</span> k<span class="br0">)</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> <span class="br0">{</span><br>    <span class="kw1">if</span> <span class="br0">(</span>k <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span> <span class="kw1">return</span> <span class="br0">[</span><span class="br0">[</span><span class="br0">]</span><span class="br0">]</span><span class="sy0">;</span><br>    <span class="kw2">typeof</span><span class="br0">(</span><span class="kw1">return</span><span class="br0">)</span> result<span class="sy0">;</span><br>    <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">immutable</span> i<span class="sy0">,</span> <span class="kw4">immutable</span> x<span class="sy0">;</span> arr<span class="br0">)</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span>suffix<span class="sy0">;</span> arr<span class="br0">[</span>i <span class="sy0">+</span> <span class="nu0">1</span> <span class="sy0">..</span> $<span class="br0">]</span>.<span class="me1">comb</span><span class="br0">(</span>k <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>            result <span class="sy0">~=</span> x <span class="sy0">~</span> suffix<span class="sy0">;</span><br>    <span class="kw1">return</span> result<span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">;</span><br>    <span class="br0">[</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">]</span>.<span class="me1">comb</span><span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span>.<span class="me1">writeln</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<div>
<dl><dt>Output:</dt></dl></div>

<pre>[[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]</pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=19" title="Edit section: More Functional Recursive Version">edit</a>]</span> <span class="mw-headline" id="More_Functional_Recursive_Version">More Functional Recursive Version</span></h3>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Combinations#Haskell" title="Combinations">Haskell</a></div>
<p>Same output.
</p>
<pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">,</span> std.<span class="me1">algorithm</span><span class="sy0">,</span> std.<span class="me1">range</span><span class="sy0">;</span><br>&nbsp;<br>T<span class="br0">[</span><span class="br0">]</span><span class="br0">[</span><span class="br0">]</span> comb<span class="br0">(</span>T<span class="br0">)</span><span class="br0">(</span><span class="kw2">in</span> T<span class="br0">[</span><span class="br0">]</span> s<span class="sy0">,</span> <span class="kw2">in</span> <span class="kw4">int</span> m<span class="br0">)</span> <span class="coMULTI">/*pure*/</span> <span class="kw4">nothrow</span> <span class="br0">{</span><br>  <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>m<span class="br0">)</span> <span class="kw1">return</span> <span class="br0">[</span><span class="br0">[</span><span class="br0">]</span><span class="br0">]</span><span class="sy0">;</span><br>  <span class="kw1">if</span> <span class="br0">(</span>s.<span class="me1">empty</span><span class="br0">)</span> <span class="kw1">return</span> <span class="br0">[</span><span class="br0">]</span><span class="sy0">;</span><br>  <span class="kw1">return</span> s<span class="br0">[</span><span class="nu0">1</span> <span class="sy0">..</span> $<span class="br0">]</span>.<span class="me1">comb</span><span class="br0">(</span>m <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span>.<span class="me1">map</span><span class="sy0">!</span><span class="br0">(</span>x <span class="sy0">=&gt;</span> s<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">~</span> x<span class="br0">)</span>.<span class="me1">array</span> <span class="sy0">~</span><br>         s<span class="br0">[</span><span class="nu0">1</span> <span class="sy0">..</span> $<span class="br0">]</span>.<span class="me1">comb</span><span class="br0">(</span>m<span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="nu0">4</span>.<span class="me1">iota</span>.<span class="me1">array</span>.<span class="me1">comb</span><span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span>.<span class="me1">writeln</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=20" title="Edit section: Fast lazy version">edit</a>]</span> <span class="mw-headline" id="Fast_lazy_version">Fast lazy version</span></h3>
<pre class="d highlighted_source"><span class="kw2">module</span> combinations3<span class="sy0">;</span><br>&nbsp;<br><span class="kw4">ulong</span> binomial<span class="br0">(</span><span class="kw4">long</span> n<span class="sy0">,</span> <span class="kw4">long</span> k<span class="br0">)</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span><br><span class="kw2">in</span> <span class="br0">{</span><br>    <span class="kw2">assert</span><span class="br0">(</span>n <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="st0">"binomial: n must be &gt; 0."</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span> <span class="kw2">body</span> <span class="br0">{</span><br>    <span class="kw1">if</span> <span class="br0">(</span>k <span class="sy0">&lt;</span> <span class="nu0">0</span> <span class="sy0">||</span> k <span class="sy0">&gt;</span> n<span class="br0">)</span><br>        <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br>    <span class="kw1">if</span> <span class="br0">(</span>k <span class="sy0">&gt;</span> <span class="br0">(</span>n <span class="sy0">/</span> <span class="nu0">2</span><span class="br0">)</span><span class="br0">)</span><br>        k <span class="sy0">=</span> n <span class="sy0">-</span> k<span class="sy0">;</span><br>    <span class="kw4">ulong</span> result <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br>    <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">ulong</span> d<span class="sy0">;</span> <span class="nu0">1</span> <span class="sy0">..</span> <span class="me1">k</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span> <span class="br0">{</span><br>        result <span class="sy0">*=</span> n<span class="sy0">;</span><br>        n<span class="sy0">--;</span><br>        result <span class="sy0">/=</span> d<span class="sy0">;</span><br>    <span class="br0">}</span><br>    <span class="kw1">return</span> result<span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br>&nbsp;<br><span class="kw4">struct</span> Combinations<span class="br0">(</span>T<span class="sy0">,</span> <span class="kw4">bool</span> copy<span class="sy0">=</span><span class="kw2">true</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="co1">// Algorithm by Knuth, Pre-fascicle 3A, draft of</span><br>    <span class="co1">// section 7.2.1.3: "Generating all partitions".</span><br>    T<span class="br0">[</span><span class="br0">]</span> items<span class="sy0">;</span><br>    <span class="kw4">int</span> k<span class="sy0">;</span><br>    <span class="kw4">size_t</span> len <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span> <span class="co1">// computed lazily</span><br>&nbsp;<br>    <span class="kw2">this</span><span class="br0">(</span><span class="kw2">in</span> T<span class="br0">[</span><span class="br0">]</span> items<span class="sy0">,</span> <span class="kw2">in</span> <span class="kw4">int</span> k<span class="br0">)</span><br>    <span class="kw2">in</span> <span class="br0">{</span><br>        <span class="kw2">assert</span><span class="br0">(</span>items.<span class="me1">length</span><span class="sy0">,</span> <span class="st0">"combinations: items can't be empty."</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span> <span class="kw2">body</span> <span class="br0">{</span><br>        <span class="kw2">this</span>.<span class="me1">items</span> <span class="sy0">=</span> items.<span class="me1">dup</span><span class="sy0">;</span><br>        <span class="kw2">this</span>.<span class="me1">k</span> <span class="sy0">=</span> k<span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw4">@property</span> <span class="kw4">size_t</span> length<span class="br0">(</span><span class="br0">)</span> <span class="coMULTI">/*logic_const*/</span> <span class="br0">{</span><br>        <span class="kw1">if</span> <span class="br0">(</span>len <span class="sy0">==</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span> <span class="co1">// set cache</span><br>            len <span class="sy0">=</span> <span class="kw2">cast</span><span class="br0">(</span><span class="kw4">size_t</span><span class="br0">)</span>binomial<span class="br0">(</span>items.<span class="me1">length</span><span class="sy0">,</span> k<span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw1">return</span> len<span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw4">int</span> opApply<span class="br0">(</span><span class="kw4">int</span> <span class="kw2">delegate</span><span class="br0">(</span><span class="kw2">ref</span> T<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> dg<span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw1">if</span> <span class="br0">(</span>k <span class="sy0">==</span> items.<span class="me1">length</span><span class="br0">)</span><br>            <span class="kw1">return</span> dg<span class="br0">(</span>items<span class="br0">)</span><span class="sy0">;</span>         <span class="co1">// yield items</span><br>&nbsp;<br>        <span class="kw4">auto</span> outarr <span class="sy0">=</span> <span class="kw2">new</span> T<span class="br0">[</span>k<span class="br0">]</span><span class="sy0">;</span><br>        <span class="kw1">if</span> <span class="br0">(</span>k <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span><br>            <span class="kw1">return</span> dg<span class="br0">(</span>outarr<span class="br0">)</span><span class="sy0">;</span>        <span class="co1">// yield []</span><br>&nbsp;<br>        <span class="kw1">if</span> <span class="br0">(</span>k <span class="sy0">&lt;</span> <span class="nu0">0</span> <span class="sy0">||</span> k <span class="sy0">&gt;</span> items.<span class="me1">length</span><span class="br0">)</span><br>            <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>                 <span class="co1">// yield nothing</span><br>&nbsp;<br>        <span class="kw4">int</span> result<span class="sy0">,</span> x<span class="sy0">;</span><br>        <span class="kw4">immutable</span> n <span class="sy0">=</span> items.<span class="me1">length</span><span class="sy0">;</span><br>        <span class="kw4">auto</span> c <span class="sy0">=</span> <span class="kw2">new</span> <span class="kw4">uint</span><span class="br0">[</span>k <span class="sy0">+</span> <span class="nu0">3</span><span class="br0">]</span><span class="sy0">;</span> <span class="co1">// c[0] isn'k used</span><br>&nbsp;<br>        <span class="kw1">foreach</span> <span class="br0">(</span>j<span class="sy0">;</span> <span class="nu0">1</span> <span class="sy0">..</span> <span class="me1">k</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span><br>            c<span class="br0">[</span>j<span class="br0">]</span> <span class="sy0">=</span> j <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span><br>        c<span class="br0">[</span>k <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> n<span class="sy0">;</span><br>        c<span class="br0">[</span>k <span class="sy0">+</span> <span class="nu0">2</span><span class="br0">]</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>        <span class="kw4">int</span> j <span class="sy0">=</span> k<span class="sy0">;</span><br>&nbsp;<br>        <span class="kw1">while</span> <span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span> <span class="br0">{</span><br>            <span class="co1">// The following lines equal to:</span><br>            <span class="co1">//int pos;</span><br>            <span class="co1">//foreach (i; 1 .. k +1)</span><br>            <span class="co1">//    outarr[pos++] = items[c[i]];</span><br>            <span class="kw4">auto</span> outarr_ptr <span class="sy0">=</span> outarr.<span class="me1">ptr</span><span class="sy0">;</span><br>            <span class="kw4">auto</span> c_ptr <span class="sy0">=</span> <span class="sy0">&amp;</span><span class="br0">(</span>c<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw4">auto</span> c_ptrkp1 <span class="sy0">=</span> <span class="sy0">&amp;</span><span class="br0">(</span>c<span class="br0">[</span>k <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw1">while</span> <span class="br0">(</span>c_ptr <span class="sy0">!=</span> c_ptrkp1<span class="br0">)</span><br>                <span class="sy0">*</span>outarr_ptr<span class="sy0">++</span> <span class="sy0">=</span> items<span class="br0">[</span><span class="sy0">*</span>c_ptr<span class="sy0">++</span><span class="br0">]</span><span class="sy0">;</span><br>&nbsp;<br>&nbsp;<br>            <span class="kw4">static</span> <span class="kw1">if</span> <span class="br0">(</span>copy<span class="br0">)</span> <span class="br0">{</span><br>                <span class="kw4">auto</span> outarr2 <span class="sy0">=</span> outarr.<span class="me1">dup</span><span class="sy0">;</span><br>                result <span class="sy0">=</span> dg<span class="br0">(</span>outarr2<span class="br0">)</span><span class="sy0">;</span> <span class="co1">// yield outarr2</span><br>            <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>                result <span class="sy0">=</span> dg<span class="br0">(</span>outarr<span class="br0">)</span><span class="sy0">;</span> <span class="co1">// yield outarr</span><br>            <span class="br0">}</span><br>&nbsp;<br>            <span class="kw1">if</span> <span class="br0">(</span>j <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">)</span> <span class="br0">{</span><br>                x <span class="sy0">=</span> j<span class="sy0">;</span><br>                c<span class="br0">[</span>j<span class="br0">]</span> <span class="sy0">=</span> x<span class="sy0">;</span><br>                j<span class="sy0">--;</span><br>                <span class="kw1">continue</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>&nbsp;<br>            <span class="kw1">if</span> <span class="br0">(</span><span class="br0">(</span>c<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">&lt;</span> c<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span><br>                c<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="sy0">++;</span><br>                <span class="kw1">continue</span><span class="sy0">;</span><br>            <span class="br0">}</span> <span class="kw1">else</span><br>                j <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span><br>&nbsp;<br>            <span class="kw1">while</span> <span class="br0">(</span><span class="kw2">true</span><span class="br0">)</span> <span class="br0">{</span><br>                c<span class="br0">[</span>j <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> j <span class="sy0">-</span> <span class="nu0">2</span><span class="sy0">;</span><br>                x <span class="sy0">=</span> c<span class="br0">[</span>j<span class="br0">]</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span><br>                <span class="kw1">if</span> <span class="br0">(</span>x <span class="sy0">==</span> c<span class="br0">[</span>j <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><br>                    j<span class="sy0">++;</span><br>                <span class="kw1">else</span><br>                    <span class="kw1">break</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>&nbsp;<br>            <span class="kw1">if</span> <span class="br0">(</span>j <span class="sy0">&gt;</span> k<span class="br0">)</span><br>                <span class="kw1">return</span> result<span class="sy0">;</span> <span class="co1">// End</span><br>&nbsp;<br>            c<span class="br0">[</span>j<span class="br0">]</span> <span class="sy0">=</span> x<span class="sy0">;</span><br>            j<span class="sy0">--;</span><br>        <span class="br0">}</span><br>    <span class="br0">}</span><br><span class="br0">}</span><br>&nbsp;<br>Combinations<span class="sy0">!</span><span class="br0">(</span>T<span class="sy0">,</span>copy<span class="br0">)</span> combinations<span class="br0">(</span><span class="kw4">bool</span> copy<span class="sy0">=</span><span class="kw2">true</span><span class="sy0">,</span> T<span class="br0">)</span><br>                                  <span class="br0">(</span><span class="kw2">in</span> T<span class="br0">[</span><span class="br0">]</span> items<span class="sy0">,</span> <span class="kw2">in</span> <span class="kw4">int</span> k<span class="br0">)</span><br><span class="kw2">in</span> <span class="br0">{</span><br>    <span class="kw2">assert</span><span class="br0">(</span>items.<span class="me1">length</span><span class="sy0">,</span> <span class="st0">"combinations: items can't be empty."</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span> <span class="kw2">body</span> <span class="br0">{</span><br>    <span class="kw1">return</span> Combinations<span class="sy0">!</span><span class="br0">(</span>T<span class="sy0">,</span> copy<span class="br0">)</span><span class="br0">(</span>items<span class="sy0">,</span> k<span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br>&nbsp;<br><span class="co1">// compile with -version=combinations3_main to run main</span><br><span class="kw4">version</span><span class="br0">(</span>combinations3_main<span class="br0">)</span> <span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">,</span> std.<span class="me1">array</span><span class="sy0">;</span><br>    writeln<span class="br0">(</span>array<span class="br0">(</span>combinations<span class="br0">(</span><span class="br0">[</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">]</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=21" title="Edit section: Lazy Lexicographical Combinations">edit</a>]</span> <span class="mw-headline" id="Lazy_Lexicographical_Combinations">Lazy Lexicographical Combinations</span></h3>
<p>Includes an algorithm to find <a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/aa289166.aspx#mth_lexicograp_topic3">mth Lexicographical Element of a Combination</a>.
</p>
<pre class="d highlighted_source"><span class="kw2">module</span> combinations4<span class="sy0">;</span><br><span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">,</span> std.<span class="me1">algorithm</span><span class="sy0">,</span> std.<span class="me1">conv</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw4">ulong</span> choose<span class="br0">(</span><span class="kw4">int</span> n<span class="sy0">,</span> <span class="kw4">int</span> k<span class="br0">)</span> <span class="kw4">nothrow</span><br><span class="kw2">in</span> <span class="br0">{</span><br>    <span class="kw2">assert</span><span class="br0">(</span>n <span class="sy0">&gt;=</span> <span class="nu0">0</span> <span class="sy0">&amp;&amp;</span> k <span class="sy0">&gt;=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="st0">"choose: no negative input."</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span> <span class="kw2">body</span> <span class="br0">{</span><br>    <span class="kw4">static</span> <span class="kw4">ulong</span><span class="br0">[</span><span class="br0">]</span><span class="br0">[</span><span class="br0">]</span> cache<span class="sy0">;</span><br>&nbsp;<br>    <span class="kw1">if</span> <span class="br0">(</span>n <span class="sy0">&lt;</span> k<span class="br0">)</span><br>        <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br>    <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span>n <span class="sy0">==</span> k<span class="br0">)</span><br>        <span class="kw1">return</span> <span class="nu0">1</span><span class="sy0">;</span><br>    <span class="kw1">while</span> <span class="br0">(</span>n <span class="sy0">&gt;=</span> cache.<span class="me1">length</span><span class="br0">)</span><br>        cache <span class="sy0">~=</span> <span class="br0">[</span>1UL<span class="br0">]</span><span class="sy0">;</span> <span class="co1">// = choose(m, 0);</span><br>    <span class="kw4">auto</span> kmax  <span class="sy0">=</span> min<span class="br0">(</span>k<span class="sy0">,</span> n <span class="sy0">-</span> k<span class="br0">)</span><span class="sy0">;</span><br>    <span class="kw1">while</span><span class="br0">(</span>kmax <span class="sy0">&gt;=</span> cache<span class="br0">[</span>n<span class="br0">]</span>.<span class="me1">length</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw4">immutable</span> h <span class="sy0">=</span> cache<span class="br0">[</span>n<span class="br0">]</span>.<span class="me1">length</span><span class="sy0">;</span><br>        cache<span class="br0">[</span>n<span class="br0">]</span> <span class="sy0">~=</span> choose<span class="br0">(</span>n <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">,</span> h <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">+</span> choose<span class="br0">(</span>n <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">,</span> h<span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw1">return</span> cache<span class="br0">[</span>n<span class="br0">]</span><span class="br0">[</span>kmax<span class="br0">]</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> largestV<span class="br0">(</span><span class="kw2">in</span> <span class="kw4">int</span> p<span class="sy0">,</span> <span class="kw2">in</span> <span class="kw4">int</span> q<span class="sy0">,</span> <span class="kw2">in</span> <span class="kw4">long</span> r<span class="br0">)</span> <span class="kw4">nothrow</span><br><span class="kw2">in</span> <span class="br0">{</span><br>    <span class="kw2">assert</span><span class="br0">(</span>p <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="sy0">&amp;&amp;</span> q <span class="sy0">&gt;=</span> <span class="nu0">0</span> <span class="sy0">&amp;&amp;</span> r <span class="sy0">&gt;=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="st0">"largestV: no negative input."</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span> <span class="kw2">body</span> <span class="br0">{</span><br>    <span class="kw4">auto</span> v <span class="sy0">=</span> p <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span><br>    <span class="kw1">while</span> <span class="br0">(</span>choose<span class="br0">(</span>v<span class="sy0">,</span> q<span class="br0">)</span> <span class="sy0">&gt;</span> r<span class="br0">)</span><br>        v<span class="sy0">--;</span><br>    <span class="kw1">return</span> v<span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">struct</span> Comb <span class="br0">{</span><br>    <span class="kw4">immutable</span> <span class="kw4">int</span> n<span class="sy0">,</span> m<span class="sy0">;</span><br>&nbsp;<br>    <span class="kw4">@property</span> <span class="kw4">size_t</span> length<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="coMULTI">/*nothrow*/</span> <span class="br0">{</span><br>        <span class="kw1">return</span> to<span class="sy0">!</span><span class="kw4">size_t</span><span class="br0">(</span>choose<span class="br0">(</span>n<span class="sy0">,</span> m<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> opIndex<span class="br0">(</span><span class="kw2">in</span> <span class="kw4">size_t</span> idx<span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span><br>        <span class="kw1">if</span> <span class="br0">(</span>m <span class="sy0">&lt;</span> <span class="nu0">0</span> <span class="sy0">||</span> n <span class="sy0">&lt;</span> <span class="nu0">0</span><span class="br0">)</span><br>            <span class="kw1">return</span> <span class="br0">[</span><span class="br0">]</span><span class="sy0">;</span><br>        <span class="kw1">if</span> <span class="br0">(</span>idx <span class="sy0">&gt;=</span> length<span class="br0">)</span><br>            <span class="kw2">throw</span> <span class="kw2">new</span> <span class="kw3">Exception</span><span class="br0">(</span><span class="st0">"Out of bound"</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw4">ulong</span> x <span class="sy0">=</span> choose<span class="br0">(</span>n<span class="sy0">,</span> m<span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="sy0">-</span> idx<span class="sy0">;</span><br>        <span class="kw4">int</span> a <span class="sy0">=</span> n<span class="sy0">,</span> b <span class="sy0">=</span> m<span class="sy0">;</span><br>        <span class="kw4">auto</span> res <span class="sy0">=</span> <span class="kw2">new</span> <span class="kw4">int</span><span class="br0">[</span>m<span class="br0">]</span><span class="sy0">;</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span>i<span class="sy0">;</span> <span class="nu0">0</span> <span class="sy0">..</span> <span class="me1">m</span><span class="br0">)</span> <span class="br0">{</span><br>            a <span class="sy0">=</span> largestV<span class="br0">(</span>a<span class="sy0">,</span> b<span class="sy0">,</span> x<span class="br0">)</span><span class="sy0">;</span><br>            x <span class="sy0">=</span> x <span class="sy0">-</span> choose<span class="br0">(</span>a<span class="sy0">,</span> b<span class="br0">)</span><span class="sy0">;</span><br>            b <span class="sy0">=</span> b <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span><br>            res<span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">=</span> n <span class="sy0">-</span> <span class="nu0">1</span> <span class="sy0">-</span> a<span class="sy0">;</span><br>        <span class="br0">}</span><br>        <span class="kw1">return</span> res<span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw4">int</span> opApply<span class="br0">(</span><span class="kw4">int</span> <span class="kw2">delegate</span><span class="br0">(</span><span class="kw2">ref</span> <span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> dg<span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span><br>        <span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> yield<span class="sy0">;</span><br>&nbsp;<br>        <span class="kw1">foreach</span> <span class="br0">(</span>i<span class="sy0">;</span> <span class="nu0">0</span> <span class="sy0">..</span> <span class="me1">length</span><span class="br0">)</span> <span class="br0">{</span><br>            yield <span class="sy0">=</span> <span class="kw2">this</span><span class="br0">[</span>i<span class="br0">]</span><span class="sy0">;</span><br>            <span class="kw1">if</span> <span class="br0">(</span>dg<span class="br0">(</span>yield<span class="br0">)</span><span class="br0">)</span><br>                <span class="kw1">break</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw4">static</span> <span class="kw4">auto</span> On<span class="br0">(</span>T<span class="br0">)</span><span class="br0">(</span><span class="kw2">in</span> T<span class="br0">[</span><span class="br0">]</span> arr<span class="sy0">,</span> <span class="kw2">in</span> <span class="kw4">int</span> m<span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw4">auto</span> comb <span class="sy0">=</span> Comb<span class="br0">(</span>arr.<span class="me1">length</span><span class="sy0">,</span> m<span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>        <span class="kw1">return</span> <span class="kw2">new</span> <span class="kw4">class</span> <span class="br0">{</span><br>            <span class="kw4">@property</span> <span class="kw4">size_t</span> length<span class="br0">(</span><span class="br0">)</span> <span class="kw4">const</span> <span class="coMULTI">/*nothrow*/</span> <span class="br0">{</span><br>                <span class="kw1">return</span> comb.<span class="me1">length</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>&nbsp;<br>            <span class="kw4">int</span> opApply<span class="br0">(</span><span class="kw4">int</span> <span class="kw2">delegate</span><span class="br0">(</span><span class="kw2">ref</span> T<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> dg<span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span><br>                <span class="kw4">auto</span> yield <span class="sy0">=</span> <span class="kw2">new</span> T<span class="br0">[</span>m<span class="br0">]</span><span class="sy0">;</span><br>&nbsp;<br>                <span class="kw1">foreach</span> <span class="br0">(</span>c<span class="sy0">;</span> comb<span class="br0">)</span> <span class="br0">{</span><br>                    <span class="kw1">foreach</span> <span class="br0">(</span>idx<span class="sy0">;</span> <span class="nu0">0</span> <span class="sy0">..</span> <span class="me1">m</span><span class="br0">)</span><br>                        yield<span class="br0">[</span>idx<span class="br0">]</span> <span class="sy0">=</span> arr<span class="br0">[</span>c<span class="br0">[</span>idx<span class="br0">]</span><span class="br0">]</span><span class="sy0">;</span><br>                    <span class="kw1">if</span> <span class="br0">(</span>dg<span class="br0">(</span>yield<span class="br0">)</span><span class="br0">)</span><br>                        <span class="kw1">break</span><span class="sy0">;</span><br>                <span class="br0">}</span><br>&nbsp;<br>                <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>        <span class="br0">}</span><span class="sy0">;</span><br>    <span class="br0">}</span><br><span class="br0">}</span><br>&nbsp;<br>&nbsp;<br><span class="kw4">version</span><span class="br0">(</span>combinations4_main<span class="br0">)</span><br>    <span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span>c<span class="sy0">;</span> Comb.<span class="me1">On</span><span class="br0">(</span><span class="br0">[</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">]</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">)</span><span class="br0">)</span><br>            writeln<span class="br0">(</span>c<span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=22" title="Edit section: E">edit</a>]</span> <span class="mw-headline" id="E"><a href="http://rosettacode.org/wiki/Category:E" title="Category:E">E</a></span></h2>
<pre class="e highlighted_source"><a href="http://wiki.erights.org/wiki/def"><span class="kw4">def</span></a> combinations<span class="br0">(</span>m<span class="sy0">,</span> range<span class="br0">)</span> <span class="br0">{</span><br>  return <a href="http://wiki.erights.org/wiki/if"><span class="kw1">if</span></a> <span class="br0">(</span>m <span class="sy0">&lt;=&gt;</span> <span class="nu0">0</span><span class="br0">)</span> <span class="br0">{</span> <span class="br0">[</span><span class="br0">[</span><span class="br0">]</span><span class="br0">]</span> <span class="br0">}</span> <a href="http://wiki.erights.org/wiki/else"><span class="kw2">else</span></a> <span class="br0">{</span><br>    <a href="http://wiki.erights.org/wiki/def"><span class="kw4">def</span></a> combGenerator <span class="br0">{</span><br>      <a href="http://wiki.erights.org/wiki/to"><span class="kw5">to</span></a> iterate<span class="br0">(</span>f<span class="br0">)</span> <span class="br0">{</span><br>        <a href="http://wiki.erights.org/wiki/for"><span class="kw1">for</span></a> i <a href="http://wiki.erights.org/wiki/in"><span class="kw2">in</span></a> range <span class="br0">{</span><br>          <a href="http://wiki.erights.org/wiki/for"><span class="kw1">for</span></a> suffix <a href="http://wiki.erights.org/wiki/in"><span class="kw2">in</span></a> combinations<span class="br0">(</span>m.<span class="me1">previous</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">,</span> range <span class="sy0">&amp;</span> <span class="br0">(</span><a href="http://wiki.erights.org/wiki/int"><span class="kw6">int</span></a> <span class="sy0">&gt;</span> i<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span><br>            f<span class="br0">(</span><a href="http://wiki.erights.org/wiki/null"><span class="kw6">null</span></a><span class="sy0">,</span> <span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">+</span> suffix<span class="br0">)</span><br>          <span class="br0">}</span><br>        <span class="br0">}</span><br>      <span class="br0">}</span><br>    <span class="br0">}</span><br>  <span class="br0">}</span><br><span class="br0">}</span></pre>
<pre>? for x in combinations(3, 0..4) { println(x) }
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=23" title="Edit section: Egison">edit</a>]</span> <span class="mw-headline" id="Egison"><a href="http://rosettacode.org/wiki/Category:Egison" title="Category:Egison">Egison</a></span></h2>
<pre class="text highlighted_source">&nbsp;<br>(define $comb<br>  (lambda [$n $xs]<br>    (match-all xs (list integer)<br>      [(loop $i [1 ,n] &lt;join _ &lt;cons $a_i ...&gt;&gt; _) a])))<br>&nbsp;<br>(test (comb 3 (between 0 4)))<br>&nbsp;</pre>
<p><b>Output:</b>
</p>
<pre class="text highlighted_source">&nbsp;<br>{[|0 1 2|] [|0 1 3|] [|0 2 3|] [|1 2 3|] [|0 1 4|] [|0 2 4|] [|0 3 4|] [|1 2 4|] [|1 3 4|] [|2 3 4|]}<br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=24" title="Edit section: Erlang">edit</a>]</span> <span class="mw-headline" id="Erlang"><a href="http://rosettacode.org/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></span></h2>
<pre class="erlang highlighted_source">&nbsp;<br><span class="sy3">-</span><span class="re2">module</span><span class="br0">(</span>comb<span class="br0">)</span><span class="sy1">.</span><br><span class="sy3">-</span><span class="re2">compile</span><span class="br0">(</span>export_all<span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">comb</span><span class="br0">(</span><span class="nu0">0</span><span class="sy1">,</span><span class="re5">_</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="br0">[</span><span class="br0">[</span><span class="br0">]</span><span class="br0">]</span><span class="sy1">;</span><br><span class="re3">comb</span><span class="br0">(</span><span class="re5">_</span><span class="sy1">,</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="br0">[</span><span class="br0">]</span><span class="sy1">;</span><br><span class="re3">comb</span><span class="br0">(</span><span class="re5">N</span><span class="sy1">,</span><span class="br0">[</span><span class="re5">H</span>|T<span class="br0">]</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="br0">[</span><span class="br0">[</span><span class="re5">H</span>|L<span class="br0">]</span> <span class="sy3">||</span> <span class="re5">L</span> <span class="sy3">&lt;-</span> <span class="re3">comb</span><span class="br0">(</span><span class="re5">N</span><span class="sy3">-</span><span class="nu0">1</span><span class="sy1">,</span><span class="re5">T</span><span class="br0">)</span><span class="br0">]</span><span class="sy3">++</span><span class="re3">comb</span><span class="br0">(</span><span class="re5">N</span><span class="sy1">,</span><span class="re5">T</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=25" title="Edit section: Elena">edit</a>]</span> <span class="mw-headline" id="Elena"><a href="http://rosettacode.org/wiki/Category:Elena" title="Category:Elena">Elena</a></span></h2>
<pre class="text highlighted_source">#define system.<br>#define system'routines.<br>#define extensions.<br>#define extensions'routines.<br>&nbsp;<br>#symbol M = 3.<br>#symbol N = 5. <br>&nbsp;<br>// --- Numbers ---<br>&nbsp;<br>#symbol numbers = (:anN)<br>[<br>    arrayControl new &amp;length:anN &amp;each: anIndex [ Integer new:(anIndex + 1) ]<br>].<br>&nbsp;<br>// --- Program ---<br>&nbsp;<br>#symbol program =<br>[<br>    #var aNumbers&nbsp;:= numbers:N.    <br>    controlEx for:(Combinator new:(arrayControl new &amp;length:M &amp;each: i [ aNumbers ])) &amp;do: aRow<br>    [<br>        consoleEx writeLine:aRow.<br>    ].<br>].</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=26" title="Edit section: Factor">edit</a>]</span> <span class="mw-headline" id="Factor"><a href="http://rosettacode.org/wiki/Category:Factor" title="Category:Factor">Factor</a></span></h2>
<pre class="text highlighted_source">USING: math.combinatorics prettyprint&nbsp;;<br>&nbsp;<br>5 iota 3 all-combinations .</pre>
<pre>{
    { 0 1 2 }
    { 0 1 3 }
    { 0 1 4 }
    { 0 2 3 }
    { 0 2 4 }
    { 0 3 4 }
    { 1 2 3 }
    { 1 2 4 }
    { 1 3 4 }
    { 2 3 4 }
}
</pre>
<p>This works with any kind of sequence:
</p>
<pre class="text highlighted_source">{ "a" "b" "c" } 2 all-combinations .</pre>
<pre>{ { "a" "b" } { "a" "c" } { "b" "c" } }</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=27" title="Edit section: Fortran">edit</a>]</span> <span class="mw-headline" id="Fortran"><a href="http://rosettacode.org/wiki/Category:Fortran" title="Category:Fortran">Fortran</a></span></h2>
<pre class="fortran highlighted_source"><span class="kw1">program</span> Combinations<br>  <span class="kw3">use</span> iso_fortran_env<br>  <span class="kw3">implicit</span> <span class="kw3">none</span><br>&nbsp;<br>  <span class="kw3">type</span> comb_result<br>     <span class="kw3">integer</span>, <span class="kw3">dimension</span><span class="br0">(</span><span class="sy0">:</span><span class="br0">)</span>, <span class="kw3">allocatable</span> <span class="sy0">::</span> <span class="me2">combs</span><br>  <span class="kw1">end</span> <span class="kw3">type</span> comb_result<br>&nbsp;<br>  <span class="kw3">type</span><span class="br0">(</span>comb_result<span class="br0">)</span>, <span class="kw3">dimension</span><span class="br0">(</span><span class="sy0">:</span><span class="br0">)</span>, <span class="kw3">pointer</span> <span class="sy0">::</span> <span class="me2">r</span><br>  <span class="kw3">integer</span> <span class="sy0">::</span> <span class="me2">i</span>, j<br>&nbsp;<br>  <span class="kw1">call</span> comb<span class="br0">(</span><span class="nu0">5</span>, <span class="nu0">3</span>, r<span class="br0">)</span><br>  <span class="kw1">do</span> i <span class="sy0">=</span> <span class="nu0">0</span>, choose<span class="br0">(</span><span class="nu0">5</span>, <span class="nu0">3</span><span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span><br>     <span class="kw1">do</span> j <span class="sy0">=</span> <span class="nu0">2</span>, <span class="nu0">0</span>, <span class="sy0">-</span><span class="nu0">1</span><br>        write<span class="br0">(</span><span class="sy0">*</span>, <span class="st0">"(I4, ' ')"</span>, <span class="kw1">advance</span><span class="sy0">=</span><span class="st0">"no"</span><span class="br0">)</span> r<span class="br0">(</span>i<span class="br0">)</span><span class="sy0">%</span>combs<span class="br0">(</span>j<span class="br0">)</span><br>     <span class="kw1">end</span> <span class="kw1">do</span><br>     <span class="kw1">deallocate</span><span class="br0">(</span>r<span class="br0">(</span>i<span class="br0">)</span><span class="sy0">%</span>combs<span class="br0">)</span><br>     write<span class="br0">(</span><span class="sy0">*</span>,<span class="sy0">*</span><span class="br0">)</span> <span class="st0">""</span><br>  <span class="kw1">end</span> <span class="kw1">do</span><br>  <span class="kw1">deallocate</span><span class="br0">(</span>r<span class="br0">)</span><br>&nbsp;<br><span class="co1">contains</span><br>&nbsp;<br>  <span class="kw1">function</span> choose<span class="br0">(</span>n, k, <span class="kw1">err</span><span class="br0">)</span><br>    <span class="kw3">integer</span> <span class="sy0">::</span> <span class="me2">choose</span><br>    <span class="kw3">integer</span>, <span class="kw3">intent</span><span class="br0">(</span><span class="kw3">in</span><span class="br0">)</span> <span class="sy0">::</span> <span class="me2">n</span>, k<br>    <span class="kw3">integer</span>, <span class="kw3">optional</span>, <span class="kw3">intent</span><span class="br0">(</span><span class="kw3">out</span><span class="br0">)</span> <span class="sy0">::</span> <span class="kw1">err</span><br>&nbsp;<br>    <span class="kw3">integer</span> <span class="sy0">::</span> <span class="me2">imax</span>, i, imin, ie<br>&nbsp;<br>    ie <span class="sy0">=</span> <span class="nu0">0</span><br>    <span class="kw1">if</span> <span class="br0">(</span> <span class="br0">(</span>n &lt; <span class="nu0">0</span> <span class="br0">)</span> <span class="kw2">.<span class="me1">or</span>.</span> <span class="br0">(</span>k &lt; <span class="nu0">0</span> <span class="br0">)</span> <span class="br0">)</span> <span class="kw1">then</span><br>       write<span class="br0">(</span>ERROR_UNIT, <span class="sy0">*</span><span class="br0">)</span> <span class="st0">"negative in choose"</span><br>       choose <span class="sy0">=</span> <span class="nu0">0</span><br>       ie <span class="sy0">=</span> <span class="nu0">1</span><br>    <span class="kw1">else</span><br>       <span class="kw1">if</span> <span class="br0">(</span> n &lt; k <span class="br0">)</span> <span class="kw1">then</span><br>          choose <span class="sy0">=</span> <span class="nu0">0</span><br>       <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span> n <span class="sy0">==</span> k <span class="br0">)</span> <span class="kw1">then</span><br>          choose <span class="sy0">=</span> <span class="nu0">1</span><br>       <span class="kw1">else</span><br>          imax <span class="sy0">=</span> <span class="kw4">max</span><span class="br0">(</span>k, n<span class="sy0">-</span>k<span class="br0">)</span><br>          imin <span class="sy0">=</span> <span class="kw4">min</span><span class="br0">(</span>k, n<span class="sy0">-</span>k<span class="br0">)</span><br>          choose <span class="sy0">=</span> <span class="nu0">1</span><br>          <span class="kw1">do</span> i <span class="sy0">=</span> imax<span class="sy0">+</span><span class="nu0">1</span>, n<br>             choose <span class="sy0">=</span> choose <span class="sy0">*</span> i<br>          <span class="kw1">end</span> <span class="kw1">do</span><br>          <span class="kw1">do</span> i <span class="sy0">=</span> <span class="nu0">2</span>, imin<br>             choose <span class="sy0">=</span> choose <span class="sy0">/</span> i<br>          <span class="kw1">end</span> <span class="kw1">do</span><br>       <span class="kw1">end</span> <span class="kw1">if</span><br>    <span class="kw1">end</span> <span class="kw1">if</span><br>    <span class="kw1">if</span> <span class="br0">(</span> <span class="kw4">present</span><span class="br0">(</span><span class="kw1">err</span><span class="br0">)</span> <span class="br0">)</span> <span class="kw1">err</span> <span class="sy0">=</span> ie<br>  <span class="kw1">end</span> <span class="kw1">function</span> choose<br>&nbsp;<br>  <span class="kw1">subroutine</span> comb<span class="br0">(</span>n, k, co<span class="br0">)</span><br>    <span class="kw3">integer</span>, <span class="kw3">intent</span><span class="br0">(</span><span class="kw3">in</span><span class="br0">)</span> <span class="sy0">::</span> <span class="me2">n</span>, k<br>    <span class="kw3">type</span><span class="br0">(</span>comb_result<span class="br0">)</span>, <span class="kw3">dimension</span><span class="br0">(</span><span class="sy0">:</span><span class="br0">)</span>, <span class="kw3">pointer</span>, <span class="kw3">intent</span><span class="br0">(</span><span class="kw3">out</span><span class="br0">)</span> <span class="sy0">::</span> <span class="me2">co</span><br>&nbsp;<br>    <span class="kw3">integer</span> <span class="sy0">::</span> <span class="me2">i</span>, j, s, ix, kx, hm, t<br>    <span class="kw3">integer</span> <span class="sy0">::</span> <span class="kw1">err</span><br>&nbsp;<br>    hm <span class="sy0">=</span> choose<span class="br0">(</span>n, k, <span class="kw1">err</span><span class="br0">)</span><br>    <span class="kw1">if</span> <span class="br0">(</span> <span class="kw1">err</span> <span class="sy0">/=</span> <span class="nu0">0</span> <span class="br0">)</span> <span class="kw1">then</span><br>       <span class="kw1">nullify</span><span class="br0">(</span>co<span class="br0">)</span><br>       <span class="kw1">return</span><br>    <span class="kw1">end</span> <span class="kw1">if</span><br>&nbsp;<br>    <span class="kw1">allocate</span><span class="br0">(</span>co<span class="br0">(</span><span class="nu0">0</span><span class="sy0">:</span>hm<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="kw1">do</span> i <span class="sy0">=</span> <span class="nu0">0</span>, hm<span class="sy0">-</span><span class="nu0">1</span><br>       <span class="kw1">allocate</span><span class="br0">(</span>co<span class="br0">(</span>i<span class="br0">)</span><span class="sy0">%</span>combs<span class="br0">(</span><span class="nu0">0</span><span class="sy0">:</span>k<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="kw1">end</span> <span class="kw1">do</span><br>    <span class="kw1">do</span> i <span class="sy0">=</span> <span class="nu0">0</span>, hm<span class="sy0">-</span><span class="nu0">1</span><br>       ix <span class="sy0">=</span> i; kx <span class="sy0">=</span> k<br>       <span class="kw1">do</span> s <span class="sy0">=</span> <span class="nu0">0</span>, n<span class="sy0">-</span><span class="nu0">1</span><br>          <span class="kw1">if</span> <span class="br0">(</span> kx <span class="sy0">==</span> <span class="nu0">0</span> <span class="br0">)</span> <span class="kw1">exit</span><br>          t <span class="sy0">=</span> choose<span class="br0">(</span>n<span class="sy0">-</span><span class="br0">(</span>s<span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span>, kx<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><br>          <span class="kw1">if</span> <span class="br0">(</span> ix &lt; t <span class="br0">)</span> <span class="kw1">then</span><br>             co<span class="br0">(</span>i<span class="br0">)</span><span class="sy0">%</span>combs<span class="br0">(</span>kx<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span> <span class="sy0">=</span> s<br>             kx <span class="sy0">=</span> kx <span class="sy0">-</span> <span class="nu0">1</span><br>          <span class="kw1">else</span><br>             ix <span class="sy0">=</span> ix <span class="sy0">-</span> t<br>          <span class="kw1">end</span> <span class="kw1">if</span><br>       <span class="kw1">end</span> <span class="kw1">do</span><br>    <span class="kw1">end</span> <span class="kw1">do</span><br>&nbsp;<br>  <span class="kw1">end</span> <span class="kw1">subroutine</span> comb<br>&nbsp;<br><span class="kw1">end</span> <span class="kw1">program</span> Combinations</pre>
<p>Alternatively:
</p>
<pre class="fortran highlighted_source"><span class="kw1">program</span> combinations<br>&nbsp;<br>  <span class="kw3">implicit</span> <span class="kw3">none</span><br>  <span class="kw3">integer</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="me2">m_max</span> <span class="sy0">=</span> <span class="nu0">3</span><br>  <span class="kw3">integer</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="me2">n_max</span> <span class="sy0">=</span> <span class="nu0">5</span><br>  <span class="kw3">integer</span>, <span class="kw3">dimension</span> <span class="br0">(</span>m_max<span class="br0">)</span> <span class="sy0">::</span> <span class="me2">comb</span><br>  <span class="kw3">character</span> <span class="br0">(</span><span class="sy0">*</span><span class="br0">)</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="kw1">fmt</span> <span class="sy0">=</span> <span class="st0">'(i0'</span> <span class="sy0">//</span> <span class="kw4">repeat</span> <span class="br0">(</span><span class="st0">', 1x, i0'</span>, m_max <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">//</span> <span class="st0">')'</span><br>&nbsp;<br>  <span class="kw1">call</span> gen <span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><br>&nbsp;<br><span class="co1">contains</span><br>&nbsp;<br>  <span class="kw1">recursive</span> <span class="kw1">subroutine</span> gen <span class="br0">(</span>m<span class="br0">)</span><br>&nbsp;<br>    <span class="kw3">implicit</span> <span class="kw3">none</span><br>    <span class="kw3">integer</span>, <span class="kw3">intent</span> <span class="br0">(</span><span class="kw3">in</span><span class="br0">)</span> <span class="sy0">::</span> <span class="me2">m</span><br>    <span class="kw3">integer</span> <span class="sy0">::</span> <span class="me2">n</span><br>&nbsp;<br>    <span class="kw1">if</span> <span class="br0">(</span>m &gt; m_max<span class="br0">)</span> <span class="kw1">then</span><br>      write <span class="br0">(</span><span class="sy0">*</span>, <span class="kw1">fmt</span><span class="br0">)</span> comb<br>    <span class="kw1">else</span><br>      <span class="kw1">do</span> n <span class="sy0">=</span> <span class="nu0">1</span>, n_max<br>        <span class="kw1">if</span> <span class="br0">(</span><span class="br0">(</span>m <span class="sy0">==</span> <span class="nu0">1</span><span class="br0">)</span> <span class="kw2">.<span class="me1">or</span>.</span> <span class="br0">(</span>n &gt; comb <span class="br0">(</span>m <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> <span class="kw1">then</span><br>          comb <span class="br0">(</span>m<span class="br0">)</span> <span class="sy0">=</span> n<br>          <span class="kw1">call</span> gen <span class="br0">(</span>m <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span><br>        <span class="kw1">end</span> <span class="kw1">if</span><br>      <span class="kw1">end</span> <span class="kw1">do</span><br>    <span class="kw1">end</span> <span class="kw1">if</span><br>&nbsp;<br>  <span class="kw1">end</span> <span class="kw1">subroutine</span> gen<br>&nbsp;<br><span class="kw1">end</span> <span class="kw1">program</span> combinations</pre>
<p>Output:
</p>
<pre class="text highlighted_source">1 2 3<br>1 2 4<br>1 2 5<br>1 3 4<br>1 3 5<br>1 4 5<br>2 3 4<br>2 3 5<br>2 4 5<br>3 4 5</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=28" title="Edit section: GAP">edit</a>]</span> <span class="mw-headline" id="GAP"><a href="http://rosettacode.org/wiki/Category:GAP" title="Category:GAP">GAP</a></span></h2>
<pre class="text highlighted_source"># Built-in<br>Combinations([1 .. n], m);<br>&nbsp;<br>Combinations([1 .. 5], 3);                                     <br># [ [ 1, 2, 3 ], [ 1, 2, 4 ], [ 1, 2, 5 ], [ 1, 3, 4 ], [ 1, 3, 5 ],<br>#   [ 1, 4, 5 ], [ 2, 3, 4 ], [ 2, 3, 5 ], [ 2, 4, 5 ], [ 3, 4, 5 ] ]</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=29" title="Edit section: Go">edit</a>]</span> <span class="mw-headline" id="Go"><a href="http://rosettacode.org/wiki/Category:Go" title="Category:Go">Go</a></span></h2>
<pre class="go highlighted_source"><span class="kw1">package</span> main<br>&nbsp;<br><span class="kw1">import</span> <span class="sy1">(</span><br>    <span class="st0">"fmt"</span><br><span class="sy1">)</span><br>&nbsp;<br><span class="kw4">func</span> main<span class="sy1">()</span> <span class="sy1">{</span><br>    comb<span class="sy1">(</span><span class="nu0">5</span><span class="sy1">,</span> <span class="nu0">3</span><span class="sy1">,</span> <span class="kw4">func</span><span class="sy1">(</span>c <span class="sy1">[]</span><span class="kw4">int</span><span class="sy1">)</span> <span class="sy1">{</span><br>        fmt<span class="sy3">.</span>Println<span class="sy1">(</span>c<span class="sy1">)</span><br>    <span class="sy1">})</span><br><span class="sy1">}</span><br>&nbsp;<br><span class="kw4">func</span> comb<span class="sy1">(</span>n<span class="sy1">,</span> m <span class="kw4">int</span><span class="sy1">,</span> emit <span class="kw4">func</span><span class="sy1">([]</span><span class="kw4">int</span><span class="sy1">))</span> <span class="sy1">{</span><br>    s <span class="sy2">:=</span> <span class="kw3">make</span><span class="sy1">([]</span><span class="kw4">int</span><span class="sy1">,</span> m<span class="sy1">)</span><br>    last <span class="sy2">:=</span> m <span class="sy3">-</span> <span class="nu0">1</span><br>    <span class="kw1">var</span> rc <span class="kw4">func</span><span class="sy1">(</span><span class="kw4">int</span><span class="sy1">,</span> <span class="kw4">int</span><span class="sy1">)</span><br>    rc <span class="sy2">=</span> <span class="kw4">func</span><span class="sy1">(</span><span class="nu2">i</span><span class="sy1">,</span> next <span class="kw4">int</span><span class="sy1">)</span> <span class="sy1">{</span><br>        <span class="kw1">for</span> j <span class="sy2">:=</span> next<span class="sy1">;</span> j &lt; n<span class="sy1">;</span> j<span class="sy2">++</span> <span class="sy1">{</span><br>            s<span class="sy1">[</span><span class="nu2">i</span><span class="sy1">]</span> <span class="sy2">=</span> j<br>            <span class="kw1">if</span> <span class="nu2">i</span> <span class="sy3">==</span> last <span class="sy1">{</span><br>                emit<span class="sy1">(</span>s<span class="sy1">)</span><br>            <span class="sy1">}</span> <span class="kw1">else</span> <span class="sy1">{</span><br>                rc<span class="sy1">(</span><span class="nu2">i</span><span class="sy3">+</span><span class="nu0">1</span><span class="sy1">,</span> j<span class="sy3">+</span><span class="nu0">1</span><span class="sy1">)</span><br>            <span class="sy1">}</span><br>        <span class="sy1">}</span><br>        <span class="kw1">return</span><br>    <span class="sy1">}</span><br>    rc<span class="sy1">(</span><span class="nu0">0</span><span class="sy1">,</span> <span class="nu0">0</span><span class="sy1">)</span><br><span class="sy1">}</span></pre>
<p>Output:
</p>
<pre>[0 1 2]
[0 1 3]
[0 1 4]
[0 2 3]
[0 2 4]
[0 3 4]
[1 2 3]
[1 2 4]
[1 3 4]
[2 3 4]</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=30" title="Edit section: Groovy">edit</a>]</span> <span class="mw-headline" id="Groovy"><a href="http://rosettacode.org/wiki/Category:Groovy" title="Category:Groovy">Groovy</a></span></h2>
<p>Following the spirit of the <a href="http://rosettacode.org/wiki/Combinations#Haskell">Haskell</a> solution.
</p>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=31" title="Edit section: In General">edit</a>]</span> <span class="mw-headline" id="In_General">In General</span></h3>
<p>A recursive closure must be <i>pre-declared</i>.
</p>
<pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> comb<br>comb <span class="sy0">=</span> <span class="br0">{</span> m, list <span class="sy0">-&gt;</span><br>    <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> n <span class="sy0">=</span> list.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size"><span class="kw5">size</span></a><span class="br0">(</span><span class="br0">)</span><br>    m <span class="sy0">==</span> <span class="nu0">0</span> <span class="sy0">?</span><br>        <span class="br0">[</span><span class="br0">[</span><span class="br0">]</span><span class="br0">]</span>&nbsp;:<br>        <span class="br0">(</span><span class="nu0">0</span>..<span class="br0">(</span>n<span class="sy0">-</span>m<span class="br0">)</span><span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject"><span class="kw5">inject</span></a><span class="br0">(</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span> newlist, k <span class="sy0">-&gt;</span><br>            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> sublist <span class="sy0">=</span> <span class="br0">(</span>k<span class="sy0">+</span><span class="nu0">1</span> <span class="sy0">==</span> n<span class="br0">)</span> <span class="sy0">?</span> <span class="br0">[</span><span class="br0">]</span>&nbsp;: list<span class="br0">[</span><span class="br0">(</span>k<span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span>..<span class="sy0">&lt;</span>n<span class="br0">]</span> <br>            newlist <span class="sy0">+=</span> comb<span class="br0">(</span>m<span class="sy0">-</span><span class="nu0">1</span>, sublist<span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect"><span class="kw5">collect</span></a> <span class="br0">{</span> <span class="br0">[</span>list<span class="br0">[</span>k<span class="br0">]</span><span class="br0">]</span> <span class="sy0">+</span> it <span class="br0">}</span><br>        <span class="br0">}</span><br><span class="br0">}</span></pre>
<p>Test program:
</p>
<pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> csny <span class="sy0">=</span> <span class="br0">[</span> <span class="st0">"Crosby"</span>, <span class="st0">"Stills"</span>, <span class="st0">"Nash"</span>, <span class="st0">"Young"</span> <span class="br0">]</span><br><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">"Choose from ${csny}"</span><br><span class="br0">(</span><span class="nu0">0</span>..<span class="br0">(</span>csny.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size"><span class="kw5">size</span></a><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each"><span class="kw5">each</span></a> <span class="br0">{</span> i <span class="sy0">-&gt;</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">"Choose ${i}:"</span><span class="sy0">;</span> comb<span class="br0">(</span>i, csny<span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each"><span class="kw5">each</span></a> <span class="br0">{</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> it <span class="br0">}</span><span class="sy0">;</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a><span class="br0">(</span><span class="br0">)</span> <span class="br0">}</span></pre>
<p>Output:
</p>
<pre style="height:20ex;overflow:scroll;">Choose from [Crosby, Stills, Nash, Young]
Choose 0:
[]

Choose 1:
[Crosby]
[Stills]
[Nash]
[Young]

Choose 2:
[Crosby, Stills]
[Crosby, Nash]
[Crosby, Young]
[Stills, Nash]
[Stills, Young]
[Nash, Young]

Choose 3:
[Crosby, Stills, Nash]
[Crosby, Stills, Young]
[Crosby, Nash, Young]
[Stills, Nash, Young]

Choose 4:
[Crosby, Stills, Nash, Young]</pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=32" title="Edit section: Zero-based Integers">edit</a>]</span> <span class="mw-headline" id="Zero-based_Integers">Zero-based Integers</span></h3>
<pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> comb0 <span class="sy0">=</span> <span class="br0">{</span> m, n <span class="sy0">-&gt;</span> comb<span class="br0">(</span>m, <span class="br0">(</span><span class="nu0">0</span>..<span class="sy0">&lt;</span>n<span class="br0">)</span><span class="br0">)</span> <span class="br0">}</span></pre>
<p>Test program:
</p>
<pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">"Choose out of 5 (zero-based):"</span><br><span class="br0">(</span><span class="nu0">0</span>..<span class="nu0">3</span><span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each"><span class="kw5">each</span></a> <span class="br0">{</span> i <span class="sy0">-&gt;</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">"Choose ${i}:"</span><span class="sy0">;</span> comb0<span class="br0">(</span>i, <span class="nu0">5</span><span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each"><span class="kw5">each</span></a> <span class="br0">{</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> it <span class="br0">}</span><span class="sy0">;</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a><span class="br0">(</span><span class="br0">)</span> <span class="br0">}</span></pre>
<p>Output:
</p>
<pre style="height:20ex;overflow:scroll;">Choose out of 5 (zero-based):
Choose 0:
[]

Choose 1:
[0]
[1]
[2]
[3]
[4]

Choose 2:
[0, 1]
[0, 2]
[0, 3]
[0, 4]
[1, 2]
[1, 3]
[1, 4]
[2, 3]
[2, 4]
[3, 4]

Choose 3:
[0, 1, 2]
[0, 1, 3]
[0, 1, 4]
[0, 2, 3]
[0, 2, 4]
[0, 3, 4]
[1, 2, 3]
[1, 2, 4]
[1, 3, 4]
[2, 3, 4]</pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=33" title="Edit section: One-based Integers">edit</a>]</span> <span class="mw-headline" id="One-based_Integers">One-based Integers</span></h3>
<pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> comb1 <span class="sy0">=</span> <span class="br0">{</span> m, n <span class="sy0">-&gt;</span> comb<span class="br0">(</span>m, <span class="br0">(</span><span class="nu0">1</span>..<span class="me1">n</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">}</span></pre>
<p>Test program:
</p>
<pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">"Choose out of 5 (one-based):"</span><br><span class="br0">(</span><span class="nu0">0</span>..<span class="nu0">3</span><span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each"><span class="kw5">each</span></a> <span class="br0">{</span> i <span class="sy0">-&gt;</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">"Choose ${i}:"</span><span class="sy0">;</span> comb1<span class="br0">(</span>i, <span class="nu0">5</span><span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each"><span class="kw5">each</span></a> <span class="br0">{</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> it <span class="br0">}</span><span class="sy0">;</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a><span class="br0">(</span><span class="br0">)</span> <span class="br0">}</span></pre>
<p>Output:
</p>
<pre style="height:20ex;overflow:scroll;">Choose out of 5 (one-based):
Choose 0:
[]

Choose 1:
[1]
[2]
[3]
[4]
[5]

Choose 2:
[1, 2]
[1, 3]
[1, 4]
[1, 5]
[2, 3]
[2, 4]
[2, 5]
[3, 4]
[3, 5]
[4, 5]

Choose 3:
[1, 2, 3]
[1, 2, 4]
[1, 2, 5]
[1, 3, 4]
[1, 3, 5]
[1, 4, 5]
[2, 3, 4]
[2, 3, 5]
[2, 4, 5]
[3, 4, 5]</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=34" title="Edit section: Haskell">edit</a>]</span> <span class="mw-headline" id="Haskell"><a href="http://rosettacode.org/wiki/Category:Haskell" title="Category:Haskell">Haskell</a></span></h2>
<p>It's more natural to extend the task to all (ordered) sublists of size <i>m</i> of a list.
</p><p>Straightforward, unoptimized implementation with divide-and-conquer:
</p>
<pre class="haskell highlighted_source">comb <span class="sy0">::</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span class="kw4">Int</span></a> <span class="sy0">-&gt;</span> <span class="br0">[</span>a<span class="br0">]</span> <span class="sy0">-&gt;</span> <span class="br0">[</span><span class="br0">[</span>a<span class="br0">]</span><span class="br0">]</span><br>comb <span class="nu0">0</span> <span class="sy0">_</span>      <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span><span class="br0">]</span><span class="br0">]</span><br>comb <span class="sy0">_</span> <span class="br0">[</span><span class="br0">]</span>     <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span><br>comb m <span class="br0">(</span>x:xs<span class="br0">)</span> <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> <span class="br0">(</span>x:<span class="br0">)</span> <span class="br0">(</span>comb <span class="br0">(</span>m<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span> xs<span class="br0">)</span> <span class="sy0">++</span> comb m xs</pre>
<p>In the induction step, either <i>x</i> is not in the result and the recursion proceeds with the rest of the list <i>xs</i>, or it is in the result and then we only need <i>m-1</i> elements.
</p><p>Shorter version of the above:
</p>
<pre class="haskell highlighted_source"><span class="kw1">import</span> Data<span class="sy0">.</span>List <span class="br0">(</span>tails<span class="br0">)</span><br>&nbsp;<br>comb <span class="sy0">::</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span class="kw4">Int</span></a> <span class="sy0">-&gt;</span> <span class="br0">[</span>a<span class="br0">]</span> <span class="sy0">-&gt;</span> <span class="br0">[</span><span class="br0">[</span>a<span class="br0">]</span><span class="br0">]</span><br>comb <span class="nu0">0</span> <span class="sy0">_</span>      <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span><span class="br0">]</span><span class="br0">]</span><br>comb m l <span class="sy0">=</span> <span class="br0">[</span>x:ys <span class="sy0">|</span> x:xs <span class="sy0">&lt;-</span> tails l<span class="sy0">,</span> ys <span class="sy0">&lt;-</span> comb <span class="br0">(</span>m<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span> xs<span class="br0">]</span></pre>
<p>To generate combinations of integers between 0 and <i>n-1</i>, use
</p>
<pre class="haskell highlighted_source">comb0 m n <span class="sy0">=</span> comb m <span class="br0">[</span><span class="nu0">0</span><span class="sy0">..</span>n<span class="sy0">-</span><span class="nu0">1</span><span class="br0">]</span></pre>
<p>Similar, for integers between 1 and <i>n</i>, use
</p>
<pre class="haskell highlighted_source">comb1 m n <span class="sy0">=</span> comb m <span class="br0">[</span><span class="nu0">1</span><span class="sy0">..</span>n<span class="br0">]</span></pre>
<p>Another method is to use the built in <i>Data.List.subsequences</i> function, filter for subsequences of length <i>m</i> and then sort:
</p>
<pre class="haskell highlighted_source"><span class="kw1">import</span> Data<span class="sy0">.</span>List <span class="br0">(</span>sort<span class="sy0">,</span> subsequences<span class="br0">)</span><br>comb m n <span class="sy0">=</span> sort <span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter"><span class="kw3">filter</span></a> <span class="br0">(</span><span class="br0">(</span><span class="sy0">==</span>m<span class="br0">)</span> <span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length"><span class="kw3">length</span></a><span class="br0">)</span> <span class="sy0">$</span> subsequences <span class="br0">[</span><span class="nu0">0</span><span class="sy0">..</span>n<span class="sy0">-</span><span class="nu0">1</span><span class="br0">]</span></pre>
<p>And yet another way is to use the list monad to generate all possible subsets:
</p>
<pre class="haskell highlighted_source">comb m n <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter"><span class="kw3">filter</span></a> <span class="br0">(</span><span class="br0">(</span><span class="sy0">==</span>m <span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length"><span class="kw3">length</span></a><span class="br0">)</span> <span class="sy0">$</span> filterM <span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:const"><span class="kw3">const</span></a> <span class="br0">[</span>True<span class="sy0">,</span> False<span class="br0">]</span><span class="br0">)</span> <span class="br0">[</span><span class="nu0">0</span><span class="sy0">..</span>n<span class="sy0">-</span><span class="nu0">1</span><span class="br0">]</span></pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=35" title="Edit section: Dynamic Programming">edit</a>]</span> <span class="mw-headline" id="Dynamic_Programming">Dynamic Programming</span></h3>
<p>The first solution is inefficient because it repeatedly calculates the same subproblem in different branches of recursion. For example, <code>comb m (x1:x2:xs)</code> involves computing <code>comb (m-1) (x2:xs)</code> and <code>comb m (x2:xs)</code>, both of which (separately) compute <code>comb (m-1) xs</code>. To avoid repeated computation, we can use dynamic programming:
</p>
<pre class="haskell highlighted_source">comb <span class="sy0">::</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span class="kw4">Int</span></a> <span class="sy0">-&gt;</span> <span class="br0">[</span>a<span class="br0">]</span> <span class="sy0">-&gt;</span> <span class="br0">[</span><span class="br0">[</span>a<span class="br0">]</span><span class="br0">]</span><br>comb m xs <span class="sy0">=</span> combsBySize xs <span class="sy0">!!</span> m<br> <span class="kw1">where</span><br>   combsBySize <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr"><span class="kw3">foldr</span></a> f <span class="br0">(</span><span class="br0">[</span><span class="br0">[</span><span class="br0">]</span><span class="br0">]</span>&nbsp;: <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat"><span class="kw3">repeat</span></a> <span class="br0">[</span><span class="br0">]</span><span class="br0">)</span><br>   f x next <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith"><span class="kw3">zipWith</span></a> <span class="br0">(</span><span class="sy0">++</span><span class="br0">)</span> <span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> <span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> <span class="br0">(</span>x:<span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span><span class="br0">[</span><span class="br0">]</span>:next<span class="br0">)</span><span class="br0">)</span> next</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=36" title="Edit section: Icon and Unicon">edit</a>]</span> <span class="mw-headline" id="Icon_and_Unicon"><a href="http://rosettacode.org/wiki/Category:Icon" title="Category:Icon">Icon</a> and <a href="http://rosettacode.org/wiki/Category:Unicon" title="Category:Unicon">Unicon</a></span></h2>
<pre class="icon highlighted_source"><span class="kw1">procedure</span> main<span class="br0">(</span><span class="br0">)</span><br><span class="kw1">return</span> combinations<span class="br0">(</span><span class="nu0">3</span><span class="sy1">,</span><span class="nu0">5</span><span class="sy1">,</span><span class="nu0">0</span><span class="br0">)</span><br><span class="kw1">end</span><br>&nbsp;<br><span class="kw1">procedure</span> combinations<span class="br0">(</span>m<span class="sy1">,</span>n<span class="sy1">,</span>z<span class="br0">)</span>                      <span class="co1"># demonstrate combinations </span><br><span class="sy1">/</span>z <span class="sy1">:=</span> <span class="nu0">1</span><br>&nbsp;<br><span class="kw4">write</span><span class="br0">(</span>m<span class="sy1">,</span><span class="st0">" combinations of "</span><span class="sy1">,</span>n<span class="sy1">,</span><span class="st0">" integers starting from "</span><span class="sy1">,</span>z<span class="br0">)</span><br><span class="kw1">every</span> <span class="kw4">put</span><span class="br0">(</span>L <span class="sy1">:=</span> <span class="br0">[</span><span class="br0">]</span><span class="sy1">,</span> z <span class="kw1">to</span> n <span class="sy1">-</span> <span class="nu0">1</span> <span class="sy1">+</span> z by <span class="nu0">1</span><span class="br0">)</span>            <span class="co1"># generate list of n items from z</span><br><span class="kw4">write</span><span class="br0">(</span><span class="st0">"Intial list<span class="es0">\n</span>"</span><span class="sy1">,</span>list2string<span class="br0">(</span>L<span class="br0">)</span><span class="br0">)</span><br><span class="kw4">write</span><span class="br0">(</span><span class="st0">"Combinations:"</span><span class="br0">)</span><br><span class="kw1">every</span> <span class="kw4">write</span><span class="br0">(</span>list2string<span class="br0">(</span>lcomb<span class="br0">(</span>L<span class="sy1">,</span>m<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br><span class="kw1">end</span><br>&nbsp;<br><span class="kw1">procedure</span> list2string<span class="br0">(</span>L<span class="br0">)</span>                           <span class="co1"># helper function</span><br><span class="kw1">every</span> <span class="br0">(</span>s <span class="sy1">:=</span> <span class="st0">"["</span><span class="br0">)</span> <span class="sy1">||:=</span> <span class="st0">" "</span> <span class="sy1">||</span> <span class="br0">(</span><span class="sy1">!</span>L<span class="sy1">|</span><span class="st0">"]"</span><span class="br0">)</span><br><span class="kw1">return</span> s<br><span class="kw1">end</span><br>&nbsp;<br><span class="kw1">link</span> lists</pre>
The <div class="examplemeta libheader"><b>Library:</b> <a href="http://rosettacode.org/wiki/Category:Icon_Programming_Library" title="Category:Icon Programming Library">Icon Programming Library</a></div> provides the core procedure <a rel="nofollow" class="external text" href="http://www.cs.arizona.edu/icon/library/src/procs/lists.icn">lcomb in lists</a> written by Ralph E. Griswold and Richard L. Goerwitz.
<pre class="icon highlighted_source"><span class="kw1">procedure</span> lcomb<span class="br0">(</span>L<span class="sy1">,</span>i<span class="br0">)</span>			<span class="co1">#: list combinations</span><br>   <span class="kw2">local</span> j<br>&nbsp;<br>   <span class="kw1">if</span> i <span class="sy1">&lt;</span> <span class="nu0">1</span> <span class="kw1">then</span> <span class="kw1">fail</span><br>   <span class="kw1">suspend</span> <span class="kw1">if</span> i <span class="sy1">=</span> <span class="nu0">1</span> <span class="kw1">then</span> <span class="br0">[</span><span class="sy1">!</span>L<span class="br0">]</span><br>      <span class="kw1">else</span> <span class="br0">[</span>L<span class="br0">[</span>j <span class="sy1">:=</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="sy1">*</span>L <span class="sy1">-</span> i <span class="sy1">+</span> <span class="nu0">1</span><span class="br0">]</span><span class="br0">]</span> <span class="sy1">|||</span> lcomb<span class="br0">(</span>L<span class="br0">[</span>j <span class="sy1">+</span> <span class="nu0">1</span><span class="sy1">:</span><span class="nu0">0</span><span class="br0">]</span><span class="sy1">,</span>i <span class="sy1">-</span> <span class="nu0">1</span><span class="br0">)</span><br>&nbsp;<br><span class="kw1">end</span></pre>
Sample output:<pre>3 combinations of 5 integers starting from 0
Intial list
[ 0 1 2 3 4 ]
Combinations:
[ 0 1 2 ]
[ 0 1 3 ]
[ 0 1 4 ]
[ 0 2 3 ]
[ 0 2 4 ]
[ 0 3 4 ]
[ 1 2 3 ]
[ 1 2 4 ]
[ 1 3 4 ]
[ 2 3 4 ]</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=37" title="Edit section: J">edit</a>]</span> <span class="mw-headline" id="J"><a href="http://rosettacode.org/wiki/Category:J" title="Category:J">J</a></span></h2>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=38" title="Edit section: Iteration">edit</a>]</span> <span class="mw-headline" id="Iteration">Iteration</span></h3>
<pre class="j highlighted_source">comb1=: dyad define<br>  c=. <span class="nu0">1</span> {.~ - d=. <span class="nu0">1</span>+<span class="kw2">y</span>-<span class="kw2">x</span><br>  z=. i.<span class="nu0">1</span> <span class="nu0">0</span><br>  <span class="re0">for_j.</span> <span class="sy0">(</span>d-<span class="nu0">1</span>+<span class="kw2">y</span><span class="sy0">)</span>+/&amp;i.d <span class="kw1">do.</span> z=. <span class="sy0">(</span>c#j<span class="sy0">)</span> ,. z{~;<span class="sy0">(</span>-c<span class="sy0">)</span>{.&amp;.&gt;&lt;i.{.c=. +/\.c <span class="kw1">end.</span><br><span class="sy0">)</span></pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=39" title="Edit section: Recursion">edit</a>]</span> <span class="mw-headline" id="Recursion">Recursion</span></h3>
<pre class="j highlighted_source">comb=: dyad define M.<br>  <span class="kw1">if.</span> <span class="sy0">(</span><span class="kw2">x</span>&gt;:<span class="kw2">y</span><span class="sy0">)</span>+.<span class="nu0">0</span>=<span class="kw2">x</span> <span class="kw1">do.</span> i.<span class="sy0">(</span><span class="kw2">x</span>&lt;:<span class="kw2">y</span><span class="sy0">)</span>,<span class="kw2">x</span> <span class="kw1">else.</span> <span class="sy0">(</span><span class="nu0">0</span>,.<span class="kw2">x</span> comb&amp;.&lt;: <span class="kw2">y</span><span class="sy0">)</span>,<span class="nu0">1</span>+<span class="kw2">x</span> comb <span class="kw2">y</span>-<span class="nu0">1</span> <span class="kw1">end.</span><br><span class="sy0">)</span></pre>
<p>The <code>M.</code> uses memoization which greatly reduces the running time.
</p>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=40" title="Edit section: Brute Force">edit</a>]</span> <span class="mw-headline" id="Brute_Force">Brute Force</span></h3>
<p>We can also generate all permutations and exclude those which are not properly sorted combinations. This is inefficient, but efficiency is not always important.
</p>
<pre class="j highlighted_source">combb=: <span class="sy0">(</span>#~ <span class="sy0">((</span>-:/:~<span class="sy0">)</span>&gt;/:~-:\:~<span class="sy0">)</span>"<span class="nu0">1</span><span class="sy0">)</span>@<span class="sy0">(</span># #: [: i. ^~<span class="sy0">)</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=41" title="Edit section: Java">edit</a>]</span> <span class="mw-headline" id="Java"><a href="http://rosettacode.org/wiki/Category:Java" title="Category:Java">Java</a></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Combinations#JavaScript" title="Combinations">JavaScript</a></div>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/Java" title="Java" class="mw-redirect">Java</a> version 1.5+</div>
<pre class="java5 highlighted_source"><span class="kw2">import</span> <span class="co2">java.util.Collections</span><span class="sy0">;</span><br><span class="kw2">import</span> <span class="co2">java.util.LinkedList</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw2">public</span> <span class="kw2">class</span> Comb<span class="br0">{</span><br>&nbsp;<br>        <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw3">void</span> main<span class="br0">(</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span><span class="br0">{</span><br>                <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html"><span class="kw21">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>comb<span class="br0">(</span><span class="nu0">3</span>,<span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw2">public</span> <span class="kw2">static</span> <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a> bitprint<span class="br0">(</span><span class="kw3">int</span> u<span class="br0">)</span><span class="br0">{</span><br>                <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a> s= <span class="st0">""</span><span class="sy0">;</span><br>                <span class="kw1">for</span><span class="br0">(</span><span class="kw3">int</span> n= <span class="nu0">0</span><span class="sy0">;</span>u <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="sy0">;</span>++n, u<span class="sy0">&gt;&gt;</span>= <span class="nu0">1</span><span class="br0">)</span><br>                        <span class="kw1">if</span><span class="br0">(</span><span class="br0">(</span>u <span class="sy0">&amp;</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">)</span> s+= n + <span class="st0">" "</span><span class="sy0">;</span><br>                <span class="kw2">return</span> s<span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw3">int</span> bitcount<span class="br0">(</span><span class="kw3">int</span> u<span class="br0">)</span><span class="br0">{</span><br>                <span class="kw3">int</span> n<span class="sy0">;</span><br>                <span class="kw1">for</span><span class="br0">(</span>n= <span class="nu0">0</span><span class="sy0">;</span>u <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="sy0">;</span>++n, u<span class="sy0">&amp;</span>= <span class="br0">(</span>u - <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><span class="co1">//Turn the last set bit to a 0</span><br>                <span class="kw2">return</span> n<span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw2">public</span> <span class="kw2">static</span> <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/LinkedList.html"><span class="kw46">LinkedList</span></a><span class="sy0">&lt;</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a><span class="sy0">&gt;</span> comb<span class="br0">(</span><span class="kw3">int</span> c, <span class="kw3">int</span> n<span class="br0">)</span><span class="br0">{</span><br>                <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/LinkedList.html"><span class="kw46">LinkedList</span></a><span class="sy0">&lt;</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a><span class="sy0">&gt;</span> s= <span class="kw2">new</span> <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/LinkedList.html"><span class="kw46">LinkedList</span></a><span class="sy0">&lt;</span><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"><span class="kw21">String</span></a><span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>                <span class="kw1">for</span><span class="br0">(</span><span class="kw3">int</span> u= <span class="nu0">0</span><span class="sy0">;</span>u <span class="sy0">&lt;</span> <span class="nu0">1</span> <span class="sy0">&lt;&lt;</span> n<span class="sy0">;</span>u++<span class="br0">)</span><br>                        <span class="kw1">if</span><span class="br0">(</span>bitcount<span class="br0">(</span>u<span class="br0">)</span> == c<span class="br0">)</span> s.<span class="me1">push</span><span class="br0">(</span>bitprint<span class="br0">(</span>u<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>                <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/Collections.html"><span class="kw46">Collections</span></a>.<span class="me1">sort</span><span class="br0">(</span>s<span class="br0">)</span><span class="sy0">;</span><br>                <span class="kw2">return</span> s<span class="sy0">;</span><br>        <span class="br0">}</span><br><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=42" title="Edit section: JavaScript">edit</a>]</span> <span class="mw-headline" id="JavaScript"><a href="http://rosettacode.org/wiki/Category:JavaScript" title="Category:JavaScript">JavaScript</a></span></h2>
<pre class="javascript highlighted_source"><span class="kw1">function</span> bitprint<span class="br0">(</span>u<span class="br0">)</span> <span class="br0">{</span><br>  <span class="kw1">var</span> s<span class="sy0">=</span><span class="st0">""</span><span class="sy0">;</span><br>  <span class="kw1">for</span> <span class="br0">(</span><span class="kw1">var</span> n<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> u<span class="sy0">;</span> <span class="sy0">++</span>n<span class="sy0">,</span> u<span class="sy0">&gt;&gt;=</span><span class="nu0">1</span><span class="br0">)</span><br>    <span class="kw1">if</span> <span class="br0">(</span>u<span class="sy0">&amp;</span><span class="nu0">1</span><span class="br0">)</span> s<span class="sy0">+=</span>n<span class="sy0">+</span><span class="st0">" "</span><span class="sy0">;</span><br>  <span class="kw1">return</span> s<span class="sy0">;</span><br><span class="br0">}</span><br><span class="kw1">function</span> bitcount<span class="br0">(</span>u<span class="br0">)</span> <span class="br0">{</span><br>  <span class="kw1">for</span> <span class="br0">(</span><span class="kw1">var</span> n<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> u<span class="sy0">;</span> <span class="sy0">++</span>n<span class="sy0">,</span> u<span class="sy0">=</span>u<span class="sy0">&amp;</span><span class="br0">(</span>u<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>  <span class="kw1">return</span> n<span class="sy0">;</span><br><span class="br0">}</span><br><span class="kw1">function</span> comb<span class="br0">(</span>c<span class="sy0">,</span>n<span class="br0">)</span> <span class="br0">{</span><br>  <span class="kw1">var</span> s<span class="sy0">=</span><span class="br0">[</span><span class="br0">]</span><span class="sy0">;</span><br>  <span class="kw1">for</span> <span class="br0">(</span><span class="kw1">var</span> u<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> u<span class="sy0">&lt;</span><span class="nu0">1</span><span class="sy0">&lt;&lt;</span>n<span class="sy0">;</span> u<span class="sy0">++</span><span class="br0">)</span><br>    <span class="kw1">if</span> <span class="br0">(</span>bitcount<span class="br0">(</span>u<span class="br0">)</span><span class="sy0">==</span>c<span class="br0">)</span><br>      s.<span class="me1">push</span><span class="br0">(</span>bitprint<span class="br0">(</span>u<span class="br0">)</span><span class="br0">)</span><br>  <span class="kw1">return</span> s.<span class="me1">sort</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>comb<span class="br0">(</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">5</span><span class="br0">)</span></pre>
<p>Alternative recursive version using and an array of values instead of length:
</p>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Combinations#Python" title="Combinations">Python</a></div>
<pre class="javascript highlighted_source"><span class="kw1">function</span> combinations<span class="br0">(</span>arr<span class="sy0">,</span> k<span class="br0">)</span><span class="br0">{</span><br>    <span class="kw1">var</span> i<span class="sy0">,</span><br>    subI<span class="sy0">,</span><br>    ret <span class="sy0">=</span> <span class="br0">[</span><span class="br0">]</span><span class="sy0">,</span><br>    sub<span class="sy0">,</span><br>    next<span class="sy0">;</span><br>    <span class="kw1">for</span><span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> arr.<span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><span class="br0">{</span><br>        <span class="kw1">if</span><span class="br0">(</span>k <span class="sy0">===</span> <span class="nu0">1</span><span class="br0">)</span><span class="br0">{</span><br>            ret.<span class="me1">push</span><span class="br0">(</span> <span class="br0">[</span> arr<span class="br0">[</span>i<span class="br0">]</span> <span class="br0">]</span> <span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><span class="kw1">else</span><span class="br0">{</span><br>            sub <span class="sy0">=</span> combinations<span class="br0">(</span>arr.<span class="me1">slice</span><span class="br0">(</span>i<span class="sy0">+</span><span class="nu0">1</span><span class="sy0">,</span> arr.<span class="me1">length</span><span class="br0">)</span><span class="sy0">,</span> k<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw1">for</span><span class="br0">(</span>subI <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> subI <span class="sy0">&lt;</span> sub.<span class="me1">length</span><span class="sy0">;</span> subI<span class="sy0">++</span> <span class="br0">)</span><span class="br0">{</span><br>                next <span class="sy0">=</span> sub<span class="br0">[</span>subI<span class="br0">]</span><span class="sy0">;</span><br>                next.<span class="me1">unshift</span><span class="br0">(</span>arr<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>                ret.<span class="me1">push</span><span class="br0">(</span> next <span class="br0">)</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>        <span class="br0">}</span><br>    <span class="br0">}</span><br>    <span class="kw1">return</span> ret<span class="sy0">;</span><br><span class="br0">}</span><br>combinations<span class="br0">(</span><span class="br0">[</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">4</span><span class="br0">]</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">)</span><span class="sy0">;</span> <br><span class="co1">// produces: [[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]</span><br>&nbsp;<br>combinations<span class="br0">(</span><span class="br0">[</span><span class="st0">"Crosby"</span><span class="sy0">,</span> <span class="st0">"Stills"</span><span class="sy0">,</span> <span class="st0">"Nash"</span><span class="sy0">,</span> <span class="st0">"Young"</span><span class="br0">]</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">)</span><span class="sy0">;</span> <br><span class="co1">// produces: [["Crosby", "Stills", "Nash"], ["Crosby", "Stills", "Young"], ["Crosby", "Nash", "Young"], ["Stills", "Nash", "Young"]]</span><br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=43" title="Edit section: Julia">edit</a>]</span> <span class="mw-headline" id="Julia"><a href="http://rosettacode.org/wiki/Category:Julia" title="Category:Julia">Julia</a></span></h2>
<p>There is a built-in function <code>combinations</code> that generates an iterable sequence of the combinations that you can loop over. (Note that the combinations are computed on the fly during the loop iteration, and are not pre-computed or stored since there many be a very large number of them.)
</p>
<pre class="text highlighted_source">for i in combinations(1:5,3)<br>    print(i')<br>end</pre>
<div>
<dl><dt>Output:</dt></dl></div>

<pre>1	2	3
1	2	4
1	2	5
1	3	4
1	3	5
1	4	5
2	3	4
2	3	5
2	4	5
3	4	5
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=44" title="Edit section: Logo">edit</a>]</span> <span class="mw-headline" id="Logo"><a href="http://rosettacode.org/wiki/Category:Logo" title="Category:Logo">Logo</a></span></h2>
<pre class="text highlighted_source">to comb&nbsp;:n&nbsp;:list<br>  if&nbsp;:n = 0 [output [[]]]<br>  if empty?&nbsp;:list [output []]<br>  output sentence map [sentence first&nbsp;:list&nbsp;?] comb&nbsp;:n-1 bf&nbsp;:list ~<br>                  comb&nbsp;:n bf&nbsp;:list<br>end<br>print comb 3 [0 1 2 3 4]</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=45" title="Edit section: Lua">edit</a>]</span> <span class="mw-headline" id="Lua"><a href="http://rosettacode.org/wiki/Category:Lua" title="Category:Lua">Lua</a></span></h2>
<pre class="lua highlighted_source">&nbsp;<br><span class="co1">-- Recursive version</span><br><span class="kw1">function</span> map<span class="br0">(</span>f<span class="sy0">,</span> a<span class="sy0">,</span> <span class="sy0">...</span><span class="br0">)</span> <span class="kw1">if</span> a <span class="kw1">then</span> <span class="kw1">return</span> f<span class="br0">(</span>a<span class="br0">)</span><span class="sy0">,</span> map<span class="br0">(</span>f<span class="sy0">,</span> <span class="sy0">...</span><span class="br0">)</span> <span class="kw1">end</span> <span class="kw1">end</span><br><span class="kw1">function</span> incr<span class="br0">(</span>k<span class="br0">)</span> <span class="kw1">return</span> <span class="kw1">function</span><span class="br0">(</span>a<span class="br0">)</span> <span class="kw1">return</span> k <span class="sy0">&gt;</span> a <span class="kw2">and</span> a <span class="kw2">or</span> a<span class="sy0">+</span><span class="nu0">1</span> <span class="kw1">end</span> <span class="kw1">end</span><br><span class="kw1">function</span> combs<span class="br0">(</span>m<span class="sy0">,</span> n<span class="br0">)</span><br>  <span class="kw1">if</span> m <span class="sy0">*</span> n <span class="sy0">==</span> <span class="nu0">0</span> <span class="kw1">then</span> <span class="kw1">return</span> <span class="br0">{</span><span class="br0">{</span><span class="br0">}</span><span class="br0">}</span> <span class="kw1">end</span><br>  <span class="kw1">local</span> ret<span class="sy0">,</span> old <span class="sy0">=</span> <span class="br0">{</span><span class="br0">}</span><span class="sy0">,</span> combs<span class="br0">(</span>m<span class="sy0">-</span><span class="nu0">1</span><span class="sy0">,</span> n<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><br>  <span class="kw1">for</span> i <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span> n <span class="kw1">do</span><br>    <span class="kw1">for</span> k<span class="sy0">,</span> v <span class="kw2">in</span> <span class="kw3">ipairs</span><span class="br0">(</span>old<span class="br0">)</span> <span class="kw1">do</span> ret<span class="br0">[</span><span class="sy0">#</span>ret<span class="sy0">+</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">{</span>i<span class="sy0">,</span> map<span class="br0">(</span>incr<span class="br0">(</span>i<span class="br0">)</span><span class="sy0">,</span> <span class="kw3">unpack</span><span class="br0">(</span>v<span class="br0">)</span><span class="br0">)</span><span class="br0">}</span> <span class="kw1">end</span><br>  <span class="kw1">end</span><br>  <span class="kw1">return</span> ret<br><span class="kw1">end</span><br>&nbsp;<br><span class="kw1">for</span> k<span class="sy0">,</span> v <span class="kw2">in</span> <span class="kw3">ipairs</span><span class="br0">(</span>combs<span class="br0">(</span><span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span> <span class="kw1">do</span> <span class="kw3">print</span><span class="br0">(</span><span class="kw3">unpack</span><span class="br0">(</span>v<span class="br0">)</span><span class="br0">)</span> <span class="kw1">end</span><br>&nbsp;<br><span class="co1">-- Iterative version</span><br><span class="kw1">function</span> icombs<span class="br0">(</span>a<span class="sy0">,</span>b<span class="br0">)</span><br>    <span class="kw1">if</span> a<span class="sy0">==</span><span class="nu0">0</span> <span class="kw1">then</span> <span class="kw1">return</span> <span class="kw1">end</span><br>    <span class="kw1">local</span> taken <span class="sy0">=</span> <span class="br0">{</span><span class="br0">}</span> <span class="kw1">local</span> slots <span class="sy0">=</span> <span class="br0">{</span><span class="br0">}</span><br>    <span class="kw1">for</span> i<span class="sy0">=</span><span class="nu0">1</span><span class="sy0">,</span>a <span class="kw1">do</span> slots<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">=</span><span class="nu0">0</span> <span class="kw1">end</span><br>    <span class="kw1">for</span> i<span class="sy0">=</span><span class="nu0">1</span><span class="sy0">,</span>b <span class="kw1">do</span> taken<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">=</span><span class="kw4">false</span> <span class="kw1">end</span><br>    <span class="kw1">local</span> index <span class="sy0">=</span> <span class="nu0">1</span><br>    <span class="kw1">while</span> index <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">do</span> <span class="kw1">repeat</span><br>        <span class="kw1">repeat</span> slots<span class="br0">[</span>index<span class="br0">]</span> <span class="sy0">=</span> slots<span class="br0">[</span>index<span class="br0">]</span> <span class="sy0">+</span> <span class="nu0">1</span><br>        <span class="kw1">until</span> slots<span class="br0">[</span>index<span class="br0">]</span> <span class="sy0">&gt;</span> b <span class="kw2">or</span> <span class="kw2">not</span> taken<span class="br0">[</span>slots<span class="br0">[</span>index<span class="br0">]</span><span class="br0">]</span><br>        <span class="kw1">if</span> slots<span class="br0">[</span>index<span class="br0">]</span> <span class="sy0">&gt;</span> b <span class="kw1">then</span><br>            slots<span class="br0">[</span>index<span class="br0">]</span> <span class="sy0">=</span> <span class="nu0">0</span><br>            index <span class="sy0">=</span> index <span class="sy0">-</span> <span class="nu0">1</span><br>            <span class="kw1">if</span> index <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">then</span><br>                taken<span class="br0">[</span>slots<span class="br0">[</span>index<span class="br0">]</span><span class="br0">]</span> <span class="sy0">=</span> <span class="kw4">false</span><br>            <span class="kw1">end</span><br>            <span class="kw1">break</span><br>        <span class="kw1">else</span><br>            taken<span class="br0">[</span>slots<span class="br0">[</span>index<span class="br0">]</span><span class="br0">]</span> <span class="sy0">=</span> <span class="kw4">true</span><br>        <span class="kw1">end</span><br>        <span class="kw1">if</span> index <span class="sy0">==</span> a <span class="kw1">then</span><br>            <span class="kw1">for</span> i<span class="sy0">=</span><span class="nu0">1</span><span class="sy0">,</span>a <span class="kw1">do</span> <span class="kw3">io.write</span><span class="br0">(</span>slots<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span> <span class="kw3">io.write</span><span class="br0">(</span><span class="st0">" "</span><span class="br0">)</span> <span class="kw1">end</span><br>            <span class="kw3">io.write</span><span class="br0">(</span><span class="st0">"<span class="es1">\n</span>"</span><span class="br0">)</span><br>            taken<span class="br0">[</span>slots<span class="br0">[</span>index<span class="br0">]</span><span class="br0">]</span> <span class="sy0">=</span> <span class="kw4">false</span><br>            <span class="kw1">break</span><br>        <span class="kw1">end</span><br>        index <span class="sy0">=</span> index <span class="sy0">+</span> <span class="nu0">1</span><br>    <span class="kw1">until</span> <span class="kw4">true</span> <span class="kw1">end</span><br><span class="kw1">end</span><br>&nbsp;<br>icombs<span class="br0">(</span><span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">5</span><span class="br0">)</span><br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=46" title="Edit section: Mathematica">edit</a>]</span> <span class="mw-headline" id="Mathematica"><a href="http://rosettacode.org/wiki/Category:Mathematica" title="Category:Mathematica">Mathematica</a></span></h2>
<pre class="text highlighted_source">combinations[n_Integer, m_Integer]/;m&gt;= 0:=Union[Sort /@ Permutations[Range[0, n - 1], {m}]]</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=47" title="Edit section: M4">edit</a>]</span> <span class="mw-headline" id="M4"><a href="http://rosettacode.org/wiki/Category:M4" title="Category:M4">M4</a></span></h2>
<pre class="text highlighted_source">divert(-1)<br>define(`set',`define(`$1[$2]',`$3')')<br>define(`get',`defn(`$1[$2]')')<br>define(`setrange',`ifelse(`$3',`',$2,`define($1[$2],$3)`'setrange($1,<br>   incr($2),shift(shift(shift($@))))')')<br>define(`for',<br>   `ifelse($#,0,``$0'',<br>   `ifelse(eval($2&lt;=$3),1,<br>   `pushdef(`$1',$2)$4`'popdef(`$1')$0(`$1',incr($2),$3,`$4')')')')<br>define(`show',<br>   `for(`k',0,decr($1),`get(a,k) ')')<br>&nbsp;<br>define(`chklim',<br>   `ifelse(get(`a',$3),eval($2-($1-$3)),<br>      `chklim($1,$2,decr($3))',<br>      `set(`a',$3,incr(get(`a',$3)))`'for(`k',incr($3),decr($2),<br>         `set(`a',k,incr(get(`a',decr(k))))')`'nextcomb($1,$2)')')<br>define(`nextcomb',<br>   `show($1)<br>ifelse(eval(get(`a',0)&lt;$2-$1),1,<br>      `chklim($1,$2,decr($1))')')<br>define(`comb',<br>   `for(`j',0,decr($1),`set(`a',j,j)')`'nextcomb($1,$2)')<br>divert<br>&nbsp;<br>comb(3,5)</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=48" title="Edit section: MATLAB">edit</a>]</span> <span class="mw-headline" id="MATLAB"><a href="http://rosettacode.org/wiki/Category:MATLAB" title="Category:MATLAB">MATLAB</a></span></h2>
<p>This a built-in function in MATLAB called "nchoosek(n,k)". The argument "n" is a vector of values from which the combinations are made, and "k" is a scalar representing the amount of values to include in each combination.
</p><p>Task Solution:
</p>
<pre class="matlab highlighted_source">&gt;&gt; <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/nchoosek.html"><span class="kw2">nchoosek</span></a><span class="br0">(</span><span class="br0">(</span><span class="nu0">0</span>:<span class="nu0">4</span><span class="br0">)</span>,<span class="nu0">3</span><span class="br0">)</span><br>&nbsp;<br><a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html"><span class="kw2">ans</span></a> =<br>&nbsp;<br>     <span class="nu0">0</span>     <span class="nu0">1</span>     <span class="nu0">2</span><br>     <span class="nu0">0</span>     <span class="nu0">1</span>     <span class="nu0">3</span><br>     <span class="nu0">0</span>     <span class="nu0">1</span>     <span class="nu0">4</span><br>     <span class="nu0">0</span>     <span class="nu0">2</span>     <span class="nu0">3</span><br>     <span class="nu0">0</span>     <span class="nu0">2</span>     <span class="nu0">4</span><br>     <span class="nu0">0</span>     <span class="nu0">3</span>     <span class="nu0">4</span><br>     <span class="nu0">1</span>     <span class="nu0">2</span>     <span class="nu0">3</span><br>     <span class="nu0">1</span>     <span class="nu0">2</span>     <span class="nu0">4</span><br>     <span class="nu0">1</span>     <span class="nu0">3</span>     <span class="nu0">4</span><br>     <span class="nu0">2</span>     <span class="nu0">3</span>     <span class="nu0">4</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=49" title="Edit section: Maxima">edit</a>]</span> <span class="mw-headline" id="Maxima"><a href="http://rosettacode.org/wiki/Category:Maxima" title="Category:Maxima">Maxima</a></span></h2>
<pre class="text highlighted_source">next_comb(n, p, a)&nbsp;:= block(<br>   [a: copylist(a), i: p],<br>   if a[1] + p = n + 1 then return(und),<br>   while a[i] - i &gt;= n - p do i: i - 1,<br>   a[i]: a[i] + 1,<br>   for j from i + 1 thru p do a[j]: a[j - 1] + 1,<br>   a<br>)$<br>&nbsp;<br>combinations(n, p)&nbsp;:= block(<br>   [a: makelist(i, i, 1, p), v: [ ]],<br>   while a # 'und do (v: endcons(a, v), a: next_comb(n, p, a)),<br>   v<br>)$<br>&nbsp;<br>combinations(5, 3);<br>/* [[1, 2, 3], <br>    [1, 2, 4], <br>    [1, 2, 5], <br>    [1, 3, 4], <br>    [1, 3, 5], <br>    [1, 4, 5], <br>    [2, 3, 4], <br>    [2, 3, 5], <br>    [2, 4, 5], <br>    [3, 4, 5]] */</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=50" title="Edit section: OCaml">edit</a>]</span> <span class="mw-headline" id="OCaml"><a href="http://rosettacode.org/wiki/Category:OCaml" title="Category:OCaml">OCaml</a></span></h2>
<p>Like the Haskell code:
</p>
<pre class="ocaml highlighted_source"><span class="kw1">let</span> <span class="kw1">rec</span> comb m lst <span class="sy0">=</span><br>  <span class="kw1">match</span> m, lst <span class="kw1">with</span><br>    <span class="nu0">0</span>, _ <span class="sy0">-&gt;</span> <span class="br0">[</span><span class="br0">[</span><span class="br0">]</span><span class="br0">]</span><br>  <span class="sy0">|</span> _, <span class="br0">[</span><span class="br0">]</span> <span class="sy0">-&gt;</span> <span class="br0">[</span><span class="br0">]</span><br>  <span class="sy0">|</span> m, x <span class="sy0">::</span> xs <span class="sy0">-&gt;</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>map <span class="br0">(</span><span class="kw1">fun</span> y <span class="sy0">-&gt;</span> x <span class="sy0">::</span> y<span class="br0">)</span> <span class="br0">(</span>comb <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred"><span class="kw3">pred</span></a> m<span class="br0">)</span> xs<span class="br0">)</span> @<br>                  comb m xs<br><span class="sy0">;;</span><br>comb <span class="nu0">3</span> <span class="br0">[</span><span class="nu0">0</span><span class="sy0">;</span><span class="nu0">1</span><span class="sy0">;</span><span class="nu0">2</span><span class="sy0">;</span><span class="nu0">3</span><span class="sy0">;</span><span class="nu0">4</span><span class="br0">]</span><span class="sy0">;;</span></pre>
<p>Dynamic Programming solution:
</p>
<pre class="ocaml highlighted_source"><span class="kw1">let</span> comb m xs <span class="sy0">=</span><br>  <span class="kw1">let</span> xs <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html"><span class="kw2">Array</span></a><span class="sy0">.</span>of_list xs <span class="kw1">in</span><br>  <span class="kw1">if</span> m <span class="sy0">&gt;</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html"><span class="kw2">Array</span></a><span class="sy0">.</span>length xs <span class="kw1">then</span><br>    <span class="br0">[</span><span class="br0">]</span><br>  <span class="kw1">else</span> <span class="kw1">begin</span><br>    <span class="kw1">let</span> arr <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html"><span class="kw2">Array</span></a><span class="sy0">.</span>make <span class="br0">(</span>m<span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span> <span class="br0">[</span><span class="br0">]</span> <span class="kw1">in</span><br>    arr<span class="sy0">.</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span> <span class="sy0">&lt;-</span> <span class="br0">[</span><span class="br0">[</span><span class="br0">]</span><span class="br0">]</span><span class="sy0">;</span><br>    <span class="kw1">for</span> j <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">to</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html"><span class="kw2">Array</span></a><span class="sy0">.</span>length xs <span class="sy0">-</span> m <span class="kw1">do</span><br>      <span class="kw1">for</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> m <span class="kw1">do</span><br>        arr<span class="sy0">.</span><span class="br0">(</span>i<span class="br0">)</span> <span class="sy0">&lt;-</span> arr<span class="sy0">.</span><span class="br0">(</span>i<span class="br0">)</span> @ <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>map <span class="br0">(</span><span class="kw1">fun</span> ys <span class="sy0">-&gt;</span> xs<span class="sy0">.</span><span class="br0">(</span>j<span class="sy0">+</span>i<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">::</span>ys<span class="br0">)</span> arr<span class="sy0">.</span><span class="br0">(</span>i<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><br>      <span class="kw1">done</span> <br>    <span class="kw1">done</span><span class="sy0">;</span><br>    arr<span class="sy0">.</span><span class="br0">(</span>m<span class="br0">)</span><br>  <span class="kw1">end</span><br><span class="sy0">;;</span><br>comb <span class="nu0">3</span> <span class="br0">[</span><span class="nu0">0</span><span class="sy0">;</span><span class="nu0">1</span><span class="sy0">;</span><span class="nu0">2</span><span class="sy0">;</span><span class="nu0">3</span><span class="sy0">;</span><span class="nu0">4</span><span class="br0">]</span><span class="sy0">;;</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=51" title="Edit section: Octave">edit</a>]</span> <span class="mw-headline" id="Octave"><a href="http://rosettacode.org/wiki/Category:Octave" title="Category:Octave">Octave</a></span></h2>
<pre class="octave highlighted_source"><a href="http://octave.sourceforge.net/octave/function/nchoosek.html"><span class="kw6">nchoosek</span></a><span class="br0">(</span><span class="br0">[</span><span class="nu0">0</span><span class="sy4">:</span><span class="nu0">4</span><span class="br0">]</span><span class="sy5">,</span> <span class="nu0">3</span><span class="br0">)</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=52" title="Edit section: Oz">edit</a>]</span> <span class="mw-headline" id="Oz"><a href="http://rosettacode.org/wiki/Category:Oz" title="Category:Oz">Oz</a></span></h2>
<p>This can be implemented as a trivial application of finite set constraints:
</p>
<pre class="oz highlighted_source"><span class="kw1">declare</span><br>  <span class="kw1">fun</span> <span class="br0">{</span><span class="re1">Comb</span> M N<span class="br0">}</span><br>     <span class="kw1">proc</span> <span class="br0">{</span><span class="re1">CombScript</span> Comb<span class="br0">}</span><br>        <span class="co1">%% Comb is a subset of [0..N-1]</span><br>        Comb = <span class="br0">{</span>FS<span class="sy0">.</span>var<span class="sy0">.</span>upperBound <span class="br0">{</span>List<span class="sy0">.</span>number 0 N<span class="sy0">-</span>1 1<span class="br0">}</span><span class="br0">}</span><br>        <span class="co1">%% Comb has cardinality M</span><br>        <span class="br0">{</span>FS<span class="sy0">.</span>card Comb M<span class="br0">}</span><br>        <span class="co1">%% enumerate all possibilities</span><br>        <span class="br0">{</span>FS<span class="sy0">.</span>distribute naive <span class="br0">[</span>Comb<span class="br0">]</span><span class="br0">}</span><br>     <span class="kw1">end</span><br>  <span class="kw1">in</span><br>     <span class="co1">%% Collect all solutions and convert to lists</span><br>     <span class="br0">{</span>Map <span class="br0">{</span>SearchAll CombScript<span class="br0">}</span> FS<span class="sy0">.</span>reflect<span class="sy0">.</span>upperBoundList<span class="br0">}</span><br>  <span class="kw1">end</span><br><span class="kw1">in</span><br>  <span class="br0">{</span>Inspect <span class="br0">{</span>Comb 3 5<span class="br0">}</span><span class="br0">}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=53" title="Edit section: PARI/GP">edit</a>]</span> <span class="mw-headline" id="PARI.2FGP"><a href="http://rosettacode.org/wiki/Category:PARI/GP" title="Category:PARI/GP">PARI/GP</a></span></h2>
<pre class="parigp highlighted_source">c<span class="br0">(</span>n<span class="sy0">,</span>k<span class="sy0">,</span>r<span class="sy0">,</span>d<span class="br0">)</span><span class="sy0">=</span><span class="br0">{</span><br>    <span class="kw1">if</span><span class="br0">(</span>d<span class="sy0">==</span>k<span class="sy0">,</span><br>        <span class="kw1">for</span><span class="br0">(</span>i<span class="sy0">=</span><span class="nu1">2</span><span class="sy0">,</span>k<span class="sy0">+</span><span class="nu1">1</span><span class="sy0">,</span><br>            <span class="kw1">print1</span><span class="br0">(</span>r<span class="br0">[</span>i<span class="br0">]</span><span class="st0">" "</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw1">print</span><br>    <span class="sy0">,</span><br>        <span class="kw1">for</span><span class="br0">(</span>i<span class="sy0">=</span>r<span class="br0">[</span>d<span class="sy0">+</span><span class="nu1">1</span><span class="br0">]</span><span class="sy0">+</span><span class="nu1">1</span><span class="sy0">,</span>n<span class="sy0">,</span><br>            r<span class="br0">[</span>d<span class="sy0">+</span><span class="nu1">2</span><span class="br0">]</span><span class="sy0">=</span>i<span class="sy0">;</span><br>            c<span class="br0">(</span>n<span class="sy0">,</span>k<span class="sy0">,</span>r<span class="sy0">,</span>d<span class="sy0">+</span><span class="nu1">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br>c<span class="br0">(</span><span class="nu1">5</span><span class="sy0">,</span><span class="nu1">3</span><span class="sy0">,</span><span class="kw1">vector</span><span class="br0">(</span><span class="nu1">5</span><span class="sy0">,</span>i<span class="sy0">,</span>i<span class="sy0">-</span><span class="nu1">1</span><span class="br0">)</span><span class="sy0">,</span><span class="nu1">0</span><span class="br0">)</span><br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=54" title="Edit section: Pascal">edit</a>]</span> <span class="mw-headline" id="Pascal"><a href="http://rosettacode.org/wiki/Category:Pascal" title="Category:Pascal">Pascal</a></span></h2>
<pre class="pascal highlighted_source"><span class="kw1">Program</span> Combinations<span class="sy1">;</span><br>&nbsp;<br><span class="kw1">const</span><br> m_max <span class="sy3">=</span> <span class="nu0">3</span><span class="sy1">;</span><br> n_max <span class="sy3">=</span> <span class="nu0">5</span><span class="sy1">;</span><br><span class="kw1">var</span><br> combination<span class="sy1">:</span> <span class="kw4">array</span> <span class="br0">[</span><span class="nu0">1</span><span class="sy1">..</span><span class="me1">m_max</span><span class="br0">]</span> <span class="kw1">of</span> <span class="kw4">integer</span><span class="sy1">;</span><br>&nbsp;<br> <span class="kw1">procedure</span> generate<span class="br0">(</span>m<span class="sy1">:</span> <span class="kw4">integer</span><span class="br0">)</span><span class="sy1">;</span><br>  <span class="kw1">var</span><br>   n<span class="sy1">,</span> i<span class="sy1">:</span> <span class="kw4">integer</span><span class="sy1">;</span><br>  <span class="kw1">begin</span><br>   <span class="kw1">if</span> <span class="br0">(</span>m &gt; m_max<span class="br0">)</span> <span class="kw1">then</span><br>    <span class="kw1">begin</span><br>    <span class="kw1">for</span> i <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">1</span> <span class="kw1">to</span> m_max <span class="kw1">do</span><br>     <span class="kw3">write</span> <span class="br0">(</span>combination<span class="br0">[</span>i<span class="br0">]</span><span class="sy1">,</span> <span class="st0">' '</span><span class="br0">)</span><span class="sy1">;</span><br>    <span class="kw3">writeln</span><span class="sy1">;</span><br>    <span class="kw1">end</span><br>   <span class="kw1">else</span><br>    <span class="kw1">for</span> n <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">1</span> <span class="kw1">to</span> n_max <span class="kw1">do</span><br>     <span class="kw1">if</span> <span class="br0">(</span><span class="br0">(</span>m <span class="sy3">=</span> <span class="nu0">1</span><span class="br0">)</span> <span class="kw1">or</span> <span class="br0">(</span>n &gt; combination<span class="br0">[</span>m<span class="sy3">-</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><span class="br0">)</span> <span class="kw1">then</span><br>      <span class="kw1">begin</span><br>       combination<span class="br0">[</span>m<span class="br0">]</span> <span class="sy1">:</span><span class="sy3">=</span> n<span class="sy1">;</span><br>       generate<span class="br0">(</span>m <span class="sy3">+</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy1">;</span><br>      <span class="kw1">end</span><span class="sy1">;</span><br>   <span class="kw1">end</span><span class="sy1">;</span> <br>&nbsp;<br><span class="kw1">begin</span><br> generate<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="sy1">;</span><br><span class="kw1">end</span><span class="sy1">.</span></pre>
<p>output
</p>
<pre>1 2 3 
1 2 4 
1 2 5 
1 3 4 
1 3 5 
1 4 5 
2 3 4 
2 3 5 
2 4 5 
3 4 5 
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=55" title="Edit section: Perl">edit</a>]</span> <span class="mw-headline" id="Perl"><a href="http://rosettacode.org/wiki/Category:Perl" title="Category:Perl">Perl</a></span></h2>
<div class="examplemeta libheader"><b>Library:</b> <a href="http://rosettacode.org/wiki/Category:Math::Combinatorics" title="Category:Math::Combinatorics">Math::Combinatorics</a><a href="http://rosettacode.org/mw/index.php?title=Combinatorics&action=edit&redlink=1" class="new" title="Combinatorics (page does not exist)">Combinatorics</a></div>
<pre class="perl highlighted_source"><span class="kw2">use</span> Math<span class="sy0">::</span><span class="me2">Combinatorics</span><span class="sy0">;</span><br>&nbsp;<br><span class="re0">@n</span> <span class="sy0">=</span> <span class="br0">(</span><span class="nu0">0</span> <span class="sy0">..</span> <span class="nu0">4</span><span class="br0">)</span><span class="sy0">;</span><br><a href="http://perldoc.perl.org/functions/print.html"><span class="kw3">print</span></a> <a href="http://perldoc.perl.org/functions/join.html"><span class="kw3">join</span></a><span class="br0">(</span><span class="st0">"<span class="es0">\n</span>"</span><span class="sy0">,</span> <a href="http://perldoc.perl.org/functions/map.html"><span class="kw3">map</span></a> <span class="br0">{</span> <a href="http://perldoc.perl.org/functions/join.html"><span class="kw3">join</span></a><span class="br0">(</span><span class="st0">" "</span><span class="sy0">,</span> <span class="sy0">@</span><span class="br0">{</span><span class="co5">$_</span><span class="br0">}</span><span class="br0">)</span> <span class="br0">}</span> combine<span class="br0">(</span><span class="nu0">3</span><span class="sy0">,</span> <span class="re0">@n</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">,</span> <span class="st0">"<span class="es0">\n</span>"</span><span class="sy0">;</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=56" title="Edit section: Perl5i">edit</a>]</span> <span class="mw-headline" id="Perl5i"><a href="http://rosettacode.org/wiki/Category:Perl5i" title="Category:Perl5i">Perl5i</a></span></h2>
<p>Use a recursive solution, derived from the Perl6 (Haskell) solution
</p>
<ul>
<li> If we run out of eligable characters, we've gone too far, and won't find a solution along this path.
</li><li> If we are looking for a single character, each character in @set is elegible, so return each as the single element of an array.
</li><li> We have not yet reached the last character, so there are two possibilities:
<ol>
<li> push the first element of the set onto the front of an N-1 length combination from the remainder of the set.
</li><li> skip the current element, and generate an N-length combination from the remainder
</li></ol>
</li></ul>
<p>The major <i>Perl5i</i> -isms are the implicit "autoboxing" of the intermediate resulting array into an array object, with the use of unshift() as a method, and the "func" keyword and signature.
Note that Perl can construct ranges of numbers or of letters, so it is natural to identify the characters as 'a' .. 'e'.
</p>
<pre class="text highlighted_source">&nbsp;<br>use perl5i::2;<br>&nbsp;<br># ----------------------------------------<br># generate combinations of length $n consisting of characters<br># from the sorted set @set, using each character once in a<br># combination, with sorted strings in sorted order.<br>#<br># Returns a list of array references, each containing one combination.<br>#<br>func combine($n, @set) {<br>  return unless @set;<br>  return map { [ $_ ] } @set if $n == 1;<br>&nbsp;<br>  my ($head) = shift @set;<br>  my @result = combine( $n-1, @set );<br>  for my $subarray ( @result ) {<br>   $subarray-&gt;unshift( $head );<br>  }<br>  return ( @result, combine( $n, @set ) );<br>}<br>&nbsp;<br>say @$_ for combine( 3, ('a'..'e') );<br>&nbsp;</pre>
<p>Output
</p>
<pre>abc
abd
abe
acd
ace
ade
bcd
bce
bde
cde
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=57" title="Edit section: Perl 6">edit</a>]</span> <span class="mw-headline" id="Perl_6"><a href="http://rosettacode.org/wiki/Category:Perl_6" title="Category:Perl 6">Perl 6</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/Rakudo" title="Rakudo">rakudo</a> version 2014-01-24</div>
<pre class="perl6 highlighted_source"><span class="sy0">.</span><span class="kw3">say</span> <span class="kw1">for</span> combinations<span class="br0">(</span><span class="nu0">5</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">)</span><span class="sy0">;</span></pre>
<div>
<dl><dt>Output:</dt></dl></div>

<pre>0 1 2
0 1 3
0 1 4
0 2 3
0 2 4
0 3 4
1 2 3
1 2 4
1 3 4
2 3 4</pre>
<p>Here is a more explicit code, with the same output.
</p>
<pre class="perl6 highlighted_source"><span class="kw2">sub</span> combinations<span class="br0">(</span>Int <span class="re0">$n</span><span class="sy0">,</span> Int <span class="re0">$k</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw1">return</span> <span class="br0">[</span><span class="br0">]</span> <span class="kw1">if</span> <span class="re0">$k</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br>    <span class="kw1">return</span> <span class="br0">(</span><span class="br0">)</span> <span class="kw1">if</span> <span class="re0">$k</span> <span class="sy0">&gt;</span> <span class="re0">$n</span><span class="sy0">;</span><br>    gather <span class="br0">{</span><br>        take <span class="br0">[</span><span class="nu0">0</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">1</span><span class="sy0">..^</span><span class="re0">$n</span><span class="br0">)</span><span class="br0">[</span><span class="sy0">@</span><span class="re0">$_</span><span class="br0">]</span><span class="br0">]</span> <span class="kw1">for</span> combinations<span class="br0">(</span><span class="re0">$n</span><span class="sy0">-</span><span class="nu0">1</span><span class="sy0">,</span> <span class="re0">$k</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>        take <span class="br0">[</span><span class="br0">(</span><span class="nu0">1</span><span class="sy0">..^</span><span class="re0">$n</span><span class="br0">)</span><span class="br0">[</span><span class="sy0">@</span><span class="re0">$_</span><span class="br0">]</span><span class="br0">]</span>    <span class="kw1">for</span> combinations<span class="br0">(</span><span class="re0">$n</span><span class="sy0">-</span><span class="nu0">1</span><span class="sy0">,</span> <span class="re0">$k</span>  <span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br><span class="br0">}</span><br>&nbsp;<br><span class="sy0">.</span><span class="kw3">say</span> <span class="kw1">for</span> combinations<span class="br0">(</span><span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">)</span><span class="sy0">;</span></pre>
<p>The built-in functions is somewhat faster, however. Go figure.
</p>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=58" title="Edit section: PicoLisp">edit</a>]</span> <span class="mw-headline" id="PicoLisp"><a href="http://rosettacode.org/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Combinations#Scheme" title="Combinations">Scheme</a></div>
<pre class="text highlighted_source">(de comb (M Lst)<br>   (cond<br>      ((=0 M) '(NIL))<br>      ((not Lst))<br>      (T<br>         (conc<br>            (mapcar<br>               '((Y) (cons (car Lst) Y))<br>               (comb (dec M) (cdr Lst)) )<br>            (comb M (cdr Lst)) ) ) ) )<br>&nbsp;<br>(comb 3 (1 2 3 4 5))</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=59" title="Edit section: Pop11">edit</a>]</span> <span class="mw-headline" id="Pop11"><a href="http://rosettacode.org/wiki/Category:Pop11" title="Category:Pop11">Pop11</a></span></h2>
<p>Natural recursive solution: first we choose first number i and then we recursively generate all combinations of m - 1 numbers between i + 1 and n - 1. Main work is done in the internal 'do_combs' function, the outer 'comb' just sets up variable to accumulate results and reverses the final result.
</p><p>The 'el_lst' parameter to 'do_combs' contains partial combination (list of numbers which were chosen in previous steps) in reverse order.
</p>
<pre class="text highlighted_source">define comb(n, m);<br>    lvars ress = [];<br>    define do_combs(l, m, el_lst);<br>        lvars i;<br>        if m = 0 then<br>            cons(rev(el_lst), ress) -&gt; ress;<br>        else<br>            for i from l to n - m do<br>                do_combs(i + 1, m - 1, cons(i, el_lst));<br>            endfor;<br>        endif;<br>    enddefine;<br>    do_combs(0, m, []);<br>    rev(ress);<br>enddefine;<br>&nbsp;<br>comb(5, 3) ==&gt;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=60" title="Edit section: Prolog">edit</a>]</span> <span class="mw-headline" id="Prolog"><a href="http://rosettacode.org/wiki/Category:Prolog" title="Category:Prolog">Prolog</a></span></h2>
<p>The solutions work with SWI-Prolog <br>
Solution with library clpfd&nbsp;: we first create a list of M elements, we say that the members of the list are numbers between 1 and N and there are in ascending order, finally we ask for a solution.
</p>
<pre class="prolog highlighted_source"><span class="sy1">:-</span> use_module<span class="br0">(</span>library<span class="br0">(</span>clpfd<span class="br0">)</span><span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>comb_clpfd<span class="br0">(</span>L<span class="sy4">,</span> M<span class="sy4">,</span> N<span class="br0">)</span> <span class="sy1">:-</span><br>    length<span class="br0">(</span>L<span class="sy4">,</span> M<span class="br0">)</span><span class="sy4">,</span><br>    L ins <span class="nu0">1</span><span class="sy4">..</span>N<span class="sy4">,</span><br>    chain<span class="br0">(</span>L<span class="sy4">,</span> #<span class="sy6">&lt;</span><span class="br0">)</span><span class="sy4">,</span><br>    label<span class="br0">(</span>L<span class="br0">)</span><span class="sy4">.</span></pre>
<p>output&nbsp;: <br>
</p>
<pre class="prolog highlighted_source"> <span class="sy1">?-</span> comb_clpfd<span class="br0">(</span>L<span class="sy4">,</span> <span class="nu0">3</span><span class="sy4">,</span> <span class="nu0">5</span><span class="br0">)</span><span class="sy4">,</span> writeln<span class="br0">(</span>L<span class="br0">)</span><span class="sy4">,</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">fail</span></a><span class="sy4">.</span><br><span class="br0">[</span><span class="nu0">1</span><span class="sy4">,</span><span class="nu0">2</span><span class="sy4">,</span><span class="nu0">3</span><span class="br0">]</span><br><span class="br0">[</span><span class="nu0">1</span><span class="sy4">,</span><span class="nu0">2</span><span class="sy4">,</span><span class="nu0">4</span><span class="br0">]</span><br><span class="br0">[</span><span class="nu0">1</span><span class="sy4">,</span><span class="nu0">2</span><span class="sy4">,</span><span class="nu0">5</span><span class="br0">]</span><br><span class="br0">[</span><span class="nu0">1</span><span class="sy4">,</span><span class="nu0">3</span><span class="sy4">,</span><span class="nu0">4</span><span class="br0">]</span><br><span class="br0">[</span><span class="nu0">1</span><span class="sy4">,</span><span class="nu0">3</span><span class="sy4">,</span><span class="nu0">5</span><span class="br0">]</span><br><span class="br0">[</span><span class="nu0">1</span><span class="sy4">,</span><span class="nu0">4</span><span class="sy4">,</span><span class="nu0">5</span><span class="br0">]</span><br><span class="br0">[</span><span class="nu0">2</span><span class="sy4">,</span><span class="nu0">3</span><span class="sy4">,</span><span class="nu0">4</span><span class="br0">]</span><br><span class="br0">[</span><span class="nu0">2</span><span class="sy4">,</span><span class="nu0">3</span><span class="sy4">,</span><span class="nu0">5</span><span class="br0">]</span><br><span class="br0">[</span><span class="nu0">2</span><span class="sy4">,</span><span class="nu0">4</span><span class="sy4">,</span><span class="nu0">5</span><span class="br0">]</span><br><span class="br0">[</span><span class="nu0">3</span><span class="sy4">,</span><span class="nu0">4</span><span class="sy4">,</span><span class="nu0">5</span><span class="br0">]</span><br>false<span class="sy4">.</span></pre>
<p>Another solution&nbsp;:
</p>
<pre class="prolog highlighted_source">comb_Prolog<span class="br0">(</span>L<span class="sy4">,</span> M<span class="sy4">,</span> N<span class="br0">)</span> <span class="sy1">:-</span><br>    length<span class="br0">(</span>L<span class="sy4">,</span> M<span class="br0">)</span><span class="sy4">,</span><br>    fill<span class="br0">(</span>L<span class="sy4">,</span> <span class="nu0">1</span><span class="sy4">,</span> N<span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>fill<span class="br0">(</span><span class="br0">[</span><span class="br0">]</span><span class="sy4">,</span> _<span class="sy4">,</span> _<span class="br0">)</span><span class="sy4">.</span><br>&nbsp;<br>fill<span class="br0">(</span><span class="br0">[</span>H <span class="sy5">|</span> T<span class="br0">]</span><span class="sy4">,</span> Min<span class="sy4">,</span> Max<span class="br0">)</span> <span class="sy1">:-</span><br>    between<span class="br0">(</span>Min<span class="sy4">,</span> Max<span class="sy4">,</span> H<span class="br0">)</span><span class="sy4">,</span><br>    H1 <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">is</span></a> H <span class="sy3">+</span> <span class="nu0">1</span><span class="sy4">,</span><br>    fill<span class="br0">(</span>T<span class="sy4">,</span> H1<span class="sy4">,</span> Max<span class="br0">)</span><span class="sy4">.</span><br>&nbsp;</pre>
<p>with the same output.
</p>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=61" title="Edit section: List comprehension">edit</a>]</span> <span class="mw-headline" id="List_comprehension">List comprehension</span></h3>
<p>Works with SWI-Prolog, library <b>clpfd</b> from <b>Markus Triska</b>, and list comprehension (see <a href="http://rosettacode.org/wiki/List_comprehensions" title="List comprehensions">List comprehensions</a> ).
</p>
<pre class="prolog highlighted_source"><span class="sy1">:-</span> use_module<span class="br0">(</span>library<span class="br0">(</span>clpfd<span class="br0">)</span><span class="br0">)</span><span class="sy4">.</span><br>comb_lstcomp<span class="br0">(</span>N<span class="sy4">,</span> M<span class="sy4">,</span> V<span class="br0">)</span> <span class="sy1">:-</span><br>	V <span class="sy6">&lt;</span><span class="sy3">-</span> <span class="br0">{</span>L	<span class="sy5">&amp;</span> length<span class="br0">(</span>L<span class="sy4">,</span> N<span class="br0">)</span><span class="sy4">,</span> L ins <span class="nu0">1</span><span class="sy4">..</span>M <span class="sy5">&amp;</span> all_distinct<span class="br0">(</span>L<span class="br0">)</span><span class="sy4">,</span> chain<span class="br0">(</span>L<span class="sy4">,</span> #<span class="sy6">&lt;</span><span class="br0">)</span><span class="sy4">,</span> label<span class="br0">(</span>L<span class="br0">)</span><span class="br0">}</span><span class="sy4">.</span><br>&nbsp;</pre>
<p>Output&nbsp;:
</p>
<pre>2?- comb_lstcomp(3, 5, V).
V = [[1,2,3],[1,2,4],[1,2,5],[1,3,4],[1,3,5],[1,4,5],[2,3,4],[2,3,5],[2,4,5],[3,4,5]]&nbsp;;
false.
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=62" title="Edit section: Pure">edit</a>]</span> <span class="mw-headline" id="Pure"><a href="http://rosettacode.org/wiki/Category:Pure" title="Category:Pure">Pure</a></span></h2>
<pre class="text highlighted_source">comb m n = comb m (0..n-1) with<br>  comb 0 _ = [[]];<br>  comb _ [] = [];<br>  comb m (x:xs) = [x:xs | xs = comb (m-1) xs] + comb m xs;<br>end;<br>&nbsp;<br>comb 3 5;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=63" title="Edit section: PureBasic">edit</a>]</span> <span class="mw-headline" id="PureBasic"><a href="http://rosettacode.org/wiki/Category:PureBasic" title="Category:PureBasic">PureBasic</a></span></h2>
<pre class="purebasic highlighted_source"><span class="kw1">Procedure</span>.s Combinations<span class="br0">(</span>amount, choose<span class="br0">)</span><br>  <span class="kw1">NewList</span> comb.s<span class="br0">(</span><span class="br0">)</span><br>  <span class="co1">; all possible combinations with {amount} Bits</span><br>  <span class="kw1">For</span> a <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> <span class="nu0">1</span> <span class="sy0">&lt;&lt;</span> amount<br>    count <span class="sy0">=</span> <span class="nu0">0</span><br>    <span class="co1">; count set bits</span><br>    <span class="kw1">For</span> x <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> amount<br>      <span class="kw1">If</span> <span class="br0">(</span><span class="nu0">1</span> <span class="sy0">&lt;&lt;</span> x<span class="br0">)</span><span class="sy0">&amp;</span>a<br>        count <span class="sy0">+</span> <span class="nu0">1</span><br>      <span class="kw1">EndIf</span><br>    <span class="kw1">Next</span><br>    <span class="co1">; if set bits are equal to combination length</span><br>    <span class="co1">; we generate a String representing our combination and add it to list</span><br>    <span class="kw1">If</span> count <span class="sy0">=</span> choose<br>      string$ <span class="sy0">=</span> <span class="st0">""</span><br>      <span class="kw1">For</span> x <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> amount<br>        <span class="kw1">If</span> <span class="br0">(</span>a <span class="sy0">&gt;&gt;</span> x<span class="br0">)</span><span class="sy0">&amp;</span><span class="nu0">1</span><br>          <span class="co1">; replace x by x+1 to start counting with 1</span><br>          String$ <span class="sy0">+</span> <span class="kw2">Str</span><span class="br0">(</span>x<span class="br0">)</span> <span class="sy0">+</span> <span class="st0">" "</span><br>        <span class="kw1">EndIf</span><br>      <span class="kw1">Next</span><br>      <span class="kw2">AddElement</span><span class="br0">(</span>comb<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>      comb<span class="br0">(</span><span class="br0">)</span> <span class="sy0">=</span> string$<br>    <span class="kw1">EndIf</span><br>  <span class="kw1">Next</span><br>  <span class="co1">; now we sort our list and format it for output as string</span><br>  <span class="kw2">SortList</span><span class="br0">(</span>comb<span class="br0">(</span><span class="br0">)</span>, #PB_Sort_Ascending<span class="br0">)</span><br>  <span class="kw1">ForEach</span> comb<span class="br0">(</span><span class="br0">)</span><br>    <span class="kw3">out</span>$ <span class="sy0">+</span> <span class="st0">", [ "</span> <span class="sy0">+</span> comb<span class="br0">(</span><span class="br0">)</span> <span class="sy0">+</span> <span class="st0">"]"</span><br>  <span class="kw1">Next</span><br>  <span class="kw1">ProcedureReturn</span> <span class="kw2">Mid</span><span class="br0">(</span><span class="kw3">out</span>$, <span class="nu0">3</span><span class="br0">)</span><br><span class="kw1">EndProcedure</span><br>&nbsp;<br><span class="kw1">Debug</span> Combinations<span class="br0">(</span><span class="nu0">5</span>, <span class="nu0">3</span><span class="br0">)</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=64" title="Edit section: Python">edit</a>]</span> <span class="mw-headline" id="Python"><a href="http://rosettacode.org/wiki/Category:Python" title="Category:Python">Python</a></span></h2>
<p>Starting from Python 2.6 and 3.0 you have a pre-defined function that returns an iterator. Here we turn the result into a list for easy printing:
</p>
<pre class="python highlighted_source"><span class="sy0">&gt;&gt;&gt;</span> <span class="kw1">from</span> <span class="kw3">itertools</span> <span class="kw1">import</span> combinations<br><span class="sy0">&gt;&gt;&gt;</span> <span class="kw2">list</span><span class="br0">(</span>combinations<span class="br0">(</span><span class="kw2">range</span><span class="br0">(</span><span class="nu0">5</span><span class="br0">)</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">)</span><span class="br0">)</span><br><span class="br0">[</span><span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">)</span><span class="sy0">,</span> <span class="br0">(</span><span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">)</span><span class="br0">]</span></pre>
<p>Earlier versions could use functions like the following:
</p>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Combinations#E" title="Combinations">E</a></div>
<pre class="python highlighted_source"><span class="kw1">def</span> comb<span class="br0">(</span>m<span class="sy0">,</span> lst<span class="br0">)</span>:<br>    <span class="kw1">if</span> m <span class="sy0">==</span> <span class="nu0">0</span>:<br>        <span class="kw1">return</span> <span class="br0">[</span><span class="br0">[</span><span class="br0">]</span><span class="br0">]</span><br>    <span class="kw1">else</span>:<br>        <span class="kw1">return</span> <span class="br0">[</span><span class="br0">[</span>x<span class="br0">]</span> + suffix <span class="kw1">for</span> i<span class="sy0">,</span> x <span class="kw1">in</span> <span class="kw2">enumerate</span><span class="br0">(</span>lst<span class="br0">)</span><br>                <span class="kw1">for</span> suffix <span class="kw1">in</span> comb<span class="br0">(</span>m - <span class="nu0">1</span><span class="sy0">,</span> lst<span class="br0">[</span>i + <span class="nu0">1</span>:<span class="br0">]</span><span class="br0">)</span><span class="br0">]</span></pre>
<p>Example:
</p>
<pre class="python highlighted_source"><span class="sy0">&gt;&gt;&gt;</span> comb<span class="br0">(</span><span class="nu0">3</span><span class="sy0">,</span> <span class="kw2">range</span><span class="br0">(</span><span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span><br><span class="br0">[</span><span class="br0">[</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">]</span><span class="sy0">,</span> <span class="br0">[</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">]</span><span class="sy0">,</span> <span class="br0">[</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">]</span><span class="sy0">,</span> <span class="br0">[</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">]</span><span class="sy0">,</span> <span class="br0">[</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">]</span><span class="sy0">,</span> <span class="br0">[</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">]</span><span class="sy0">,</span> <span class="br0">[</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">]</span><span class="sy0">,</span> <span class="br0">[</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">]</span><span class="sy0">,</span> <span class="br0">[</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">]</span><span class="sy0">,</span> <span class="br0">[</span><span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">]</span><span class="br0">]</span></pre>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Combinations#Haskell" title="Combinations">Haskell</a></div>
<pre class="python highlighted_source"><span class="kw1">def</span> comb<span class="br0">(</span>m<span class="sy0">,</span> s<span class="br0">)</span>:<br>    <span class="kw1">if</span> m <span class="sy0">==</span> <span class="nu0">0</span>: <span class="kw1">return</span> <span class="br0">[</span><span class="br0">[</span><span class="br0">]</span><span class="br0">]</span><br>    <span class="kw1">if</span> s <span class="sy0">==</span> <span class="br0">[</span><span class="br0">]</span>: <span class="kw1">return</span> <span class="br0">[</span><span class="br0">]</span><br>    <span class="kw1">return</span> <span class="br0">[</span>s<span class="br0">[</span>:<span class="nu0">1</span><span class="br0">]</span> + a <span class="kw1">for</span> a <span class="kw1">in</span> comb<span class="br0">(</span>m-<span class="nu0">1</span><span class="sy0">,</span> s<span class="br0">[</span><span class="nu0">1</span>:<span class="br0">]</span><span class="br0">)</span><span class="br0">]</span> + comb<span class="br0">(</span>m<span class="sy0">,</span> s<span class="br0">[</span><span class="nu0">1</span>:<span class="br0">]</span><span class="br0">)</span><br>&nbsp;<br><span class="kw1">print</span> comb<span class="br0">(</span><span class="nu0">3</span><span class="sy0">,</span> <span class="kw2">range</span><span class="br0">(</span><span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=65" title="Edit section: Racket">edit</a>]</span> <span class="mw-headline" id="Racket"><a href="http://rosettacode.org/wiki/Category:Racket" title="Category:Racket">Racket</a></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="http://rosettacode.org/wiki/Combinations#Haskell" title="Combinations">Haskell</a></div>
<pre class="text highlighted_source">&nbsp;<br>(define sublists<br>  (match-lambda**<br>   [(0 _)           '(())]<br>   [(_ '())         '()]<br>   [(m (cons x xs)) (append (map (curry cons x) (sublists (- m 1) xs)) <br>                            (sublists m xs))]))<br>&nbsp;<br>(define (combinations n m)<br>  (sublists n (range m)))<br>&nbsp;</pre>
<p>Output:
</p>
<pre>&gt; (combinations 3 5)
'((0 1 2)
  (0 1 3)
  (0 1 4)
  (0 2 3)
  (0 2 4)
  (0 3 4)
  (1 2 3)
  (1 2 4)
  (1 3 4)
  (2 3 4))
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=66" title="Edit section: R">edit</a>]</span> <span class="mw-headline" id="R"><a href="http://rosettacode.org/wiki/Category:R" title="Category:R">R</a></span></h2>
<pre class="text highlighted_source">print(combn(0:4, 3))</pre>
<p>Combinations are organized per column, so to provide an output similar to the one in the task text, we need the following:
</p>
<pre class="text highlighted_source">r &lt;- combn(0:4, 3)<br>for(i in 1:choose(5,3)) print(r[,i])</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=67" title="Edit section: REXX">edit</a>]</span> <span class="mw-headline" id="REXX"><a href="http://rosettacode.org/wiki/Category:REXX" title="Category:REXX">REXX</a></span></h2>
<p>This REXX program supports up to 62 symbols (one symbol for each "thing").
<br>It supports any number of "things" beyond the 62 symbols by using the actual number instead of a symbol.
</p>
<pre class="rexx highlighted_source"><span class="coMULTI">/*REXX program shows combination sets for  X  things taken  Y  at a time*/</span><br>@abc=<span class="st0">'abcdefghijklmnopqrstuvwxyz'</span>; @abcU=@abc; <span class="kw2">upper</span> @abcU; @digs=<span class="nu0">123456789</span><br><span class="kw1">parse</span> <span class="kw1">arg</span> x y symbols <span class="sy0">.</span>;  <span class="kw1">if</span> x==<span class="st0">''</span> <span class="sy0">|</span> x==<span class="st0">','</span> <span class="kw3">then</span> x=<span class="nu0">5</span><br>                          <span class="kw1">if</span> y==<span class="st0">''</span> <span class="sy0">|</span> y==<span class="st0">','</span> <span class="kw3">then</span> y=<span class="nu0">3</span><br><span class="kw1">if</span> symbols==<span class="st0">''</span> <span class="kw3">then</span> symbols=@digs<span class="sy0">||</span>@abc<span class="sy0">||</span>@abcU    <span class="coMULTI">/*symbol table string.*/</span><br><span class="kw1">say</span> <span class="st0">"────────────"</span> x <span class="st0">'things taken'</span> y <span class="st0">"at a time:"</span><br><span class="kw1">say</span> <span class="st0">"────────────"</span> combN<span class="br0">(</span>x,y<span class="br0">)</span> <span class="st0">'combinations.'</span><br><span class="kw1">exit</span>                                   <span class="coMULTI">/*stick a fork in it, we're done.*/</span><br><span class="coMULTI">/*──────────────────────────────────COMBN subroutine────────────────────*/</span><br>combN: <span class="kw1">procedure</span> <span class="kw1">expose</span> symbols;  <span class="kw1">parse</span> <span class="kw1">arg</span> x,y;   base=x+<span class="nu0">1</span>;  bbase=base-y<br>!<span class="sy0">.</span>=<span class="nu0">0</span>;           <span class="kw1">do</span> i=<span class="nu0">1</span> <span class="kw2">for</span> y;   &nbsp;!<span class="sy0">.</span>i=i<br>                <span class="kw3">end</span>   <span class="coMULTI">/*i*/</span><br>&nbsp;<br>          <span class="kw1">do</span> j=<span class="nu0">1</span>;  L=;           <span class="kw1">do</span> d=<span class="nu0">1</span> <span class="kw2">for</span> y<br>                                 L=L   <span class="kw6">word</span><span class="br0">(</span><span class="kw6">substr</span><span class="br0">(</span>symbols,!<span class="sy0">.</span>d,<span class="nu0">1</span><span class="br0">)</span>  &nbsp;!<span class="sy0">.</span>d,<span class="nu0">1</span><span class="br0">)</span><br>                                 <span class="kw3">end</span>   <span class="coMULTI">/*d*/</span><br>          <span class="kw1">say</span> L<br>         &nbsp;!<span class="sy0">.</span>y=!<span class="sy0">.</span>y+<span class="nu0">1</span>;   <span class="kw1">if</span>&nbsp;!<span class="sy0">.</span>y==base   <span class="kw3">then</span>   <span class="kw1">if</span> <span class="sy0">.</span>combUp<span class="br0">(</span>y-<span class="nu0">1</span><span class="br0">)</span>   <span class="kw3">then</span> <span class="kw1">leave</span><br>          <span class="kw3">end</span>         <span class="coMULTI">/*j*/</span><br><span class="kw1">return</span> j<br>&nbsp;<br><span class="sy0">.</span>combUp: <span class="kw1">procedure</span> <span class="kw1">expose</span>&nbsp;!<span class="sy0">.</span> y bbase;  <span class="kw1">parse</span> <span class="kw1">arg</span> d;  <span class="kw1">if</span> d==<span class="nu0">0</span> <span class="kw3">then</span> <span class="kw1">return</span> <span class="nu0">1</span><br>p=!<span class="sy0">.</span>d;        <span class="kw1">do</span> u=d <span class="kw2">to</span> y;    &nbsp;!<span class="sy0">.</span>u=p+<span class="nu0">1</span><br>              <span class="kw1">if</span>&nbsp;!<span class="sy0">.</span>u==bbase+u <span class="kw3">then</span> <span class="kw1">return</span> <span class="sy0">.</span>combUp<span class="br0">(</span>u-<span class="nu0">1</span><span class="br0">)</span><br>              p=!<span class="sy0">.</span>u<br>              <span class="kw3">end</span>     <span class="coMULTI">/*u*/</span><br><span class="kw1">return</span> <span class="nu0">0</span></pre>
<p><b>output</b> when the following was specified: <tt> 5 3 01234 </tt>
</p>
<pre style="overflow:scroll">──────────── 5 things taken 3 at a time:
 0 1 2
 0 1 3
 0 1 4
 0 2 3
 0 2 4
 0 3 4
 1 2 3
 1 2 4
 1 3 4
 2 3 4
──────────── 10 combinations.
</pre>
<p><b>output</b> when the following was specified: <tt> 5 3 abcde </tt>
</p>
<pre style="overflow:scroll">──────────── 5 things taken 3 at a time:
 a b c
 a b d
 a b e
 a c d
 a c e
 a d e
 b c d
 b c e
 b d e
 c d e
──────────── 10 combinations.
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=68" title="Edit section: Ruby">edit</a>]</span> <span class="mw-headline" id="Ruby"><a href="http://rosettacode.org/wiki/Category:Ruby" title="Category:Ruby">Ruby</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/Ruby" title="Ruby" class="mw-redirect">Ruby</a> version 1.8.7+</div>
<pre class="ruby highlighted_source"><span class="kw1">def</span> comb<span class="br0">(</span>m, n<span class="br0">)</span><br>  <span class="br0">(</span><span class="nu0">0</span>...<span class="me1">n</span><span class="br0">)</span>.<span class="me1">to_a</span>.<span class="me1">combination</span><span class="br0">(</span>m<span class="br0">)</span>.<span class="me1">to_a</span><br><span class="kw1">end</span><br>&nbsp;<br>comb<span class="br0">(</span><span class="nu0">3</span>, <span class="nu0">5</span><span class="br0">)</span>  <span class="co1"># =&gt; [[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=69" title="Edit section: Rust">edit</a>]</span> <span class="mw-headline" id="Rust"><a href="http://rosettacode.org/wiki/Category:Rust" title="Category:Rust">Rust</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/Rust" title="Rust" class="mw-redirect">Rust</a> version 0.9</div>
<pre class="text highlighted_source">&nbsp;<br>fn comb&lt;T: std::fmt::Default&gt;(arr: &amp;[T], n: uint) {<br>  let mut incl_arr: ~[bool] = std::vec::from_elem(arr.len(), false);<br>  comb_intern(arr, n, incl_arr, 0);<br>}<br>&nbsp;<br>fn comb_intern&lt;T: std::fmt::Default&gt;(arr: &amp;[T], n: uint, incl_arr: &amp;mut [bool], index: uint) {<br>  if (arr.len() &lt; n + index) { return; }<br>  if (n == 0) {<br>    let mut it = arr.iter().zip(incl_arr.iter()).filter_map(|(val, incl)|<br>      if (*incl) { Some(val) } else { None }<br>    );<br>    for val in it { print!("{} ", *val); }<br>    print("\n");<br>    return;<br>  }<br>&nbsp;<br>  incl_arr[index] = true;<br>  comb_intern(arr, n-1, incl_arr, index+1);<br>  incl_arr[index] = false;<br>&nbsp;<br>  comb_intern(arr, n, incl_arr, index+1);<br>}<br>&nbsp;<br>fn main() {<br>  let arr1 = ~[1, 2, 3, 4, 5];<br>  comb(arr1, 3);<br>&nbsp;<br>  let arr2 = ~["A", "B", "C", "D", "E"];<br>  comb(arr2, 3);<br>}<br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=70" title="Edit section: Scala">edit</a>]</span> <span class="mw-headline" id="Scala"><a href="http://rosettacode.org/wiki/Category:Scala" title="Category:Scala">Scala</a></span></h2>
<pre class="scala highlighted_source"><a href="http://scala-lang.org/"><span class="kw1">implicit</span></a> <a href="http://scala-lang.org/"><span class="kw1">def</span></a> toComb<span class="br0">(</span>m<span class="sy0">:</span> Int<span class="br0">)</span> <span class="sy0">=</span> <a href="http://scala-lang.org/"><span class="kw1">new</span></a> AnyRef <span class="br0">{</span><br>  <a href="http://scala-lang.org/"><span class="kw1">def</span></a> comb<span class="br0">(</span>n<span class="sy0">:</span> Int<span class="br0">)</span> <span class="sy0">=</span> recurse<span class="br0">(</span>m, List.<span class="me1">range</span><span class="br0">(</span><span class="nu0">0</span>, n<span class="br0">)</span><span class="br0">)</span><br>  <a href="http://scala-lang.org/"><span class="kw1">private</span></a> <a href="http://scala-lang.org/"><span class="kw1">def</span></a> recurse<span class="br0">(</span>m<span class="sy0">:</span> Int, l<span class="sy0">:</span> List<span class="br0">[</span>Int<span class="br0">]</span><span class="br0">)</span><span class="sy0">:</span> List<span class="br0">[</span>List<span class="br0">[</span>Int<span class="br0">]</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">(</span>m, l<span class="br0">)</span> <a href="http://scala-lang.org/"><span class="kw1">match</span></a> <span class="br0">{</span><br>    <a href="http://scala-lang.org/"><span class="kw1">case</span></a> <span class="br0">(</span><span class="nu0">0</span>, <span class="sy0">_</span><span class="br0">)</span>   <span class="sy0">=&gt;</span> List<span class="br0">(</span>Nil<span class="br0">)</span><br>    <a href="http://scala-lang.org/"><span class="kw1">case</span></a> <span class="br0">(</span><span class="sy0">_</span>, Nil<span class="br0">)</span> <span class="sy0">=&gt;</span> Nil<br>    <a href="http://scala-lang.org/"><span class="kw1">case</span></a> <span class="sy0">_</span>        <span class="sy0">=&gt;</span> <span class="br0">(</span>recurse<span class="br0">(</span>m - <span class="nu0">1</span>, l.<span class="me1">tail</span><span class="br0">)</span> map <span class="br0">(</span>l.<span class="me1">head</span> <span class="sy0">::</span> <span class="sy0">_</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">:::</span> recurse<span class="br0">(</span>m, l.<span class="me1">tail</span><span class="br0">)</span><br>  <span class="br0">}</span><br><span class="br0">}</span></pre>
<p>Usage:
</p>
<pre>scala&gt; 3 comb 5
res170: List[List[Int]] = List(List(0, 1, 2), List(0, 1, 3), List(0, 1, 4), List(0, 2, 3), List(0, 2, 4), List(0, 3, 4),
 List(1, 2, 3), List(1, 2, 4), List(1, 3, 4), List(2, 3, 4))
</pre>
<h3><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=71" title="Edit section: Scala 2.9.x">edit</a>]</span> <span class="mw-headline" id="Scala_2.9.x">Scala 2.9.x</span></h3>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/Scala" title="Scala" class="mw-redirect">Scala</a> version 2.9.1</div>
<pre class="scala highlighted_source">scala<span class="sy0">&gt;</span> <span class="br0">(</span><span class="nu0">0</span> to <span class="nu0">4</span> toList<span class="br0">)</span> combinations<span class="br0">(</span><span class="nu0">3</span><span class="br0">)</span> toList<br>res1<span class="sy0">:</span> List<span class="br0">[</span>List<span class="br0">[</span>Int<span class="br0">]</span><span class="br0">]</span> <span class="sy0">=</span> List<span class="br0">(</span>List<span class="br0">(</span><span class="nu0">0</span>, <span class="nu0">1</span>, <span class="nu0">2</span><span class="br0">)</span>, List<span class="br0">(</span><span class="nu0">0</span>, <span class="nu0">1</span>, <span class="nu0">3</span><span class="br0">)</span>, List<span class="br0">(</span><span class="nu0">0</span>, <span class="nu0">1</span>, <span class="nu0">4</span><span class="br0">)</span>, List<span class="br0">(</span><span class="nu0">0</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">)</span>, List<span class="br0">(</span><span class="nu0">0</span>, <span class="nu0">2</span>, <span class="nu0">4</span><span class="br0">)</span>, List<span class="br0">(</span><span class="nu0">0</span>, <span class="nu0">3</span>, <span class="nu0">4</span><span class="br0">)</span>, List<span class="br0">(</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">)</span>, List<span class="br0">(</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">4</span><span class="br0">)</span>, List<span class="br0">(</span><span class="nu0">1</span>, <span class="nu0">3</span>, <span class="nu0">4</span><span class="br0">)</span>, List<span class="br0">(</span><span class="nu0">2</span>, <span class="nu0">3</span>, <span class="nu0">4</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=72" title="Edit section: Scheme">edit</a>]</span> <span class="mw-headline" id="Scheme"><a href="http://rosettacode.org/wiki/Category:Scheme" title="Category:Scheme">Scheme</a></span></h2>
<p>Like the Haskell code:
</p>
<pre class="scheme highlighted_source"><span class="br0">(</span><span class="kw1">define</span> <span class="br0">(</span>comb m lst<span class="br0">)</span><br>  <span class="br0">(</span><span class="kw1">cond</span> <span class="br0">(</span><span class="br0">(</span><span class="sy0">=</span> m <span class="nu0">0</span><span class="br0">)</span> '<span class="br0">(</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">(</span><span class="br0">(</span><span class="kw1">null?</span> lst<span class="br0">)</span> '<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="br0">(</span><span class="kw1">else</span> <span class="br0">(</span><span class="kw1">append</span> <span class="br0">(</span><span class="kw1">map</span> <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>y<span class="br0">)</span> <span class="br0">(</span><span class="kw1">cons</span> <span class="br0">(</span><span class="kw1">car</span> lst<span class="br0">)</span> y<span class="br0">)</span><span class="br0">)</span><br>                           <span class="br0">(</span>comb <span class="br0">(</span><span class="sy0">-</span> m <span class="nu0">1</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">cdr</span> lst<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>                      <span class="br0">(</span>comb m <span class="br0">(</span><span class="kw1">cdr</span> lst<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>comb <span class="nu0">3</span> '<span class="br0">(</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><span class="br0">)</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=73" title="Edit section: Seed7">edit</a>]</span> <span class="mw-headline" id="Seed7"><a href="http://rosettacode.org/wiki/Category:Seed7" title="Category:Seed7">Seed7</a></span></h2>
<pre class="text highlighted_source">$ include "seed7_05.s7i";<br>&nbsp;<br>const type: combinations is array array integer;<br>&nbsp;<br>const func combinations: comb (in array integer: arr, in integer: k) is func<br>  result<br>    var combinations: combResult is combinations.value;<br>  local<br>    var integer: x is 0;<br>    var integer: i is 0;<br>    var array integer: suffix is 0 times 0;<br>  begin<br>    if k = 0 then<br>      combResult&nbsp;:= 1 times 0 times 0;<br>    else<br>      for x key i range arr do<br>        for suffix range comb(arr[succ(i) ..], pred(k)) do<br>          combResult &amp;:= [] (x) &amp; suffix;<br>        end for;<br>      end for;<br>    end if;<br>  end func;<br>&nbsp;<br>const proc: main is func<br>  local<br>    var array integer: aCombination is 0 times 0;<br>    var integer: element is 0;<br>  begin<br>    for aCombination range comb([] (0, 1, 2, 3, 4), 3) do<br>      for element range aCombination do<br>        write(element lpad 3);<br>      end for;<br>      writeln;<br>    end for;<br>  end func;</pre>
<p>Output:
</p>
<pre>  0  1  2
  0  1  3
  0  1  4
  0  2  3
  0  2  4
  0  3  4
  1  2  3
  1  2  4
  1  3  4
  2  3  4
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=74" title="Edit section: SETL">edit</a>]</span> <span class="mw-headline" id="SETL"><a href="http://rosettacode.org/wiki/Category:SETL" title="Category:SETL">SETL</a></span></h2>
<pre class="text highlighted_source">print({0..4} npow 3);</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=75" title="Edit section: Smalltalk">edit</a>]</span> <span class="mw-headline" id="Smalltalk"><a href="http://rosettacode.org/wiki/Category:Smalltalk" title="Category:Smalltalk">Smalltalk</a></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="http://rosettacode.org/wiki/Pharo" title="Pharo">Pharo</a> version 1.3-13315</div>
<pre class="smalltalk highlighted_source">&nbsp;<br><span class="br0">(</span><span class="re5">0</span> to: <span class="re5">4</span><span class="br0">)</span> <br>    combinations: <span class="re5">3</span> atATimeDo: <span class="br0">[</span>&nbsp;:<span class="re5">x</span> | <br>        <span class="st0">':-)'</span> logCr: <span class="re5">x</span> <span class="br0">]</span>.<br>&nbsp;<br><span class="coMULTI">"output on Transcript:<br>#(0 1 2)<br>#(0 1 3)<br>#(0 1 4)<br>#(0 2 3)<br>#(0 2 4)<br>#(0 3 4)<br>#(1 2 3)<br>#(1 2 4)<br>#(1 3 4)<br>#(2 3 4)"</span><br>&nbsp;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=76" title="Edit section: Standard ML">edit</a>]</span> <span class="mw-headline" id="Standard_ML"><a href="http://rosettacode.org/wiki/Category:Standard_ML" title="Category:Standard ML">Standard ML</a></span></h2>
<pre class="text highlighted_source">fun comb (0, _    ) = [[]]<br>  | comb (_, []   ) = []<br>  | comb (m, x::xs) = map (fn y =&gt; x&nbsp;:: y) (comb (m-1, xs)) @<br>                  comb (m, xs)<br>;<br>comb (3, [0,1,2,3,4]);</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=77" title="Edit section: Tcl">edit</a>]</span> <span class="mw-headline" id="Tcl"><a href="http://rosettacode.org/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></span></h2>
<p>ref<a rel="nofollow" class="external autonumber" href="http://wiki.tcl.tk/2553">[1]</a>
</p>
<pre class="tcl highlighted_source"><span class="kw1">proc</span> comb <span class="br0">{</span>m n<span class="br0">}</span> <span class="br0">{</span><br>    <span class="kw1">set</span> <span class="kw1">set</span> <span class="br0">[</span><span class="kw2">list</span><span class="br0">]</span><br>    <span class="kw1">for</span> <span class="br0">{</span><span class="kw1">set</span> i <span class="nu0">0</span><span class="br0">}</span> <span class="br0">{</span><span class="re0">$i</span> <span class="sy0">&lt;</span> <span class="re0">$n</span><span class="br0">}</span> <span class="br0">{</span><span class="kw2">incr</span> i<span class="br0">}</span> <span class="br0">{</span><span class="kw2">lappend</span> <span class="kw1">set</span> <span class="re0">$i</span><span class="br0">}</span><br>    <span class="kw1">return</span> <span class="br0">[</span>combinations <span class="re0">$set</span> <span class="re0">$m</span><span class="br0">]</span><br><span class="br0">}</span><br><span class="kw1">proc</span> combinations <span class="br0">{</span><span class="kw2">list</span> size<span class="br0">}</span> <span class="br0">{</span><br>    <span class="kw1">if</span> <span class="br0">{</span><span class="re0">$size</span> == <span class="nu0">0</span><span class="br0">}</span> <span class="br0">{</span><br>        <span class="kw1">return</span> <span class="br0">[</span><span class="kw2">list</span> <span class="br0">[</span><span class="kw2">list</span><span class="br0">]</span><span class="br0">]</span><br>    <span class="br0">}</span><br>    <span class="kw1">set</span> retval <span class="br0">{</span><span class="br0">}</span><br>    <span class="kw1">for</span> <span class="br0">{</span><span class="kw1">set</span> i <span class="nu0">0</span><span class="br0">}</span> <span class="br0">{</span><span class="br0">(</span><span class="re0">$i</span> + <span class="re0">$size</span><span class="br0">)</span> <span class="sy0">&lt;</span>= <span class="br0">[</span><span class="kw2">llength</span> <span class="re0">$list</span><span class="br0">]</span><span class="br0">}</span> <span class="br0">{</span><span class="kw2">incr</span> i<span class="br0">}</span> <span class="br0">{</span><br>        <span class="kw1">set</span> firstElement <span class="br0">[</span><span class="kw2">lindex</span> <span class="re0">$list</span> <span class="re0">$i</span><span class="br0">]</span><br>        <span class="kw1">set</span> remainingElements <span class="br0">[</span><span class="kw2">lrange</span> <span class="re0">$list</span> <span class="br0">[</span><span class="kw1">expr</span> <span class="br0">{</span><span class="re0">$i</span> + <span class="nu0">1</span><span class="br0">}</span><span class="br0">]</span> end<span class="br0">]</span><br>        <span class="kw1">foreach</span> subset <span class="br0">[</span>combinations <span class="re0">$remainingElements</span> <span class="br0">[</span><span class="kw1">expr</span> <span class="br0">{</span><span class="re0">$size</span> - <span class="nu0">1</span><span class="br0">}</span><span class="br0">]</span><span class="br0">]</span> <span class="br0">{</span><br>            <span class="kw2">lappend</span> retval <span class="br0">[</span>linsert <span class="re0">$subset</span> <span class="nu0">0</span> <span class="re0">$firstElement</span><span class="br0">]</span><br>        <span class="br0">}</span><br>    <span class="br0">}</span><br>    <span class="kw1">return</span> <span class="re0">$retval</span><br><span class="br0">}</span><br>&nbsp;<br>comb <span class="nu0">3</span> <span class="nu0">5</span> <span class="sy0">;</span><span class="co1"># ==&gt; {0 1 2} {0 1 3} {0 1 4} {0 2 3} {0 2 4} {0 3 4} {1 2 3} {1 2 4} {1 3 4} {2 3 4}</span></pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=78" title="Edit section: TXR">edit</a>]</span> <span class="mw-headline" id="TXR"><a href="http://rosettacode.org/wiki/Category:TXR" title="Category:TXR">TXR</a></span></h2>
<p>TXR has repeating and non-repeating permutation and combination functions that produce lazy lists. They are generic over lists, strings and vectors. In addition, the combinations function also works over hashes.
</p><p>Combinations and permutations are produced in lexicographic order (except in the case of hashes).
</p>
<pre class="text highlighted_source">@(do <br>   (defun comb-n-m (n m)<br>     (comb (range* 0 n) m))<br>&nbsp;<br>   (put-line `3 comb 5 = @(comb-n-m 5 3)`))</pre>
<p>Run:
</p>
<pre>$ txr combinations.txr 
3 comb 5 = ((0 1 2) (0 1 3) (0 1 4) (0 2 3) (0 2 4) (0 3 4) (1 2 4) (1 3 4) (2 3 4))</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=79" title="Edit section: Ursala">edit</a>]</span> <span class="mw-headline" id="Ursala"><a href="http://rosettacode.org/wiki/Category:Ursala" title="Category:Ursala">Ursala</a></span></h2>
<p>Most of the work is done by the standard library function <code>choices</code>, whose implementation is shown here for the sake of comparison with other solutions,
</p>
<pre class="text highlighted_source">choices = ^(iota@r,~&amp;l); leql@a^&amp; ~&amp;al?\&amp;! ~&amp;arh2fabt2RDfalrtPXPRT</pre>
<p>where <code>leql</code> is the predicate that compares list lengths. The main body of the algorithm (<code>~&amp;arh2fabt2RDfalrtPXPRT</code>) concatenates the results of two recursive calls, one of which finds all combinations of the required size from the tail of the list, and the other of which finds all combinations of one less size from the tail, and then inserts the head into each.
<code>choices</code> generates combinations of an arbitrary set but
not necessarily in sorted order, which can be done like this.
</p>
<pre class="text highlighted_source">#import std<br>#import nat<br>&nbsp;<br>combinations = @rlX choices^|(iota,~&amp;); -&lt; @p nleq+ ==-~rh</pre>
<ul><li> The sort combinator (<code>-&lt;</code>) takes a binary predicate to a function that sorts a list in order of that predicate.
</li><li> The predicate in this case begins by zipping its two arguments together with <code>@p</code>.
</li><li> The prefiltering operator <code>-~</code> scans a list from the beginning until it finds the first item to falsify a predicate (in this case equality, <code>==</code>) and returns a pair of lists with the scanned items satisfying the predicate on the left and the remaining items on the right.
</li><li> The <code>rh</code> suffix on the <code>-~</code> operator causes it to return only the head of the right list as its result, which in this case will be the first pair of unequal items in the list.
</li><li> The <code>nleq</code> function then tests whether the left side of this pair is less than or equal to the right.
</li><li> The overall effect of using everything starting from the <code>@p</code> as the predicate to a sort combinator is therefore to sort a list of lists of natural numbers according to the order of the numbers in the first position where they differ.
</li></ul>
<p>test program:
</p>
<pre class="text highlighted_source">#cast&nbsp;%nLL<br>&nbsp;<br>example = combinations(3,5)</pre>
<p>output:
</p>
<pre>&lt;
   &lt;0,1,2&gt;,
   &lt;0,1,3&gt;,
   &lt;0,1,4&gt;,
   &lt;0,2,3&gt;,
   &lt;0,2,4&gt;,
   &lt;0,3,4&gt;,
   &lt;1,2,3&gt;,
   &lt;1,2,4&gt;,
   &lt;1,3,4&gt;,
   &lt;2,3,4&gt;&gt;</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=80" title="Edit section: V">edit</a>]</span> <span class="mw-headline" id="V"><a href="http://rosettacode.org/wiki/Category:V" title="Category:V">V</a></span></h2>
<p>like scheme (using variables)
</p>
<pre class="text highlighted_source">[comb [m lst] let<br>   [ [m zero?] [[[]]]<br>     [lst null?] [[]]<br>     [true] [m pred lst rest comb [lst first swap cons]  map<br>            m lst rest comb concat]<br>   ] when].</pre>
<p>Using destructuring view and stack not *pure at all
</p>
<pre class="text highlighted_source">[comb<br>   [ [pop zero?] [pop pop [[]]]<br>     [null?] [pop pop []]<br>     [true] [ [m lst&nbsp;: [m pred lst rest comb [lst first swap cons]  map<br>            m lst rest comb concat]] view i ]<br>   ] when].</pre>
<p>Pure concatenative version
</p>
<pre class="text highlighted_source">[comb<br>   [2dup [a b&nbsp;: a b a b] view].<br>   [2pop pop pop].<br>&nbsp;<br>   [ [pop zero?] [2pop [[]]]<br>     [null?] [2pop []]<br>     [true] [2dup [pred] dip uncons swapd comb [cons] map popd rollup rest comb concat]<br>   ] when].</pre>
<p>Using it
</p>
<pre>|3 [0 1 2 3 4] comb
=[[0 1 2] [0 1 3] [0 1 4] [0 2 3] [0 2 4] [0 3 4] [1 2 3] [1 2 4] [1 3 4] [2 3 4]]
</pre>
<h2><span class="editsection">[<a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit&section=81" title="Edit section: XPL0">edit</a>]</span> <span class="mw-headline" id="XPL0"><a href="http://rosettacode.org/wiki/Category:XPL0" title="Category:XPL0">XPL0</a></span></h2>
<pre class="text highlighted_source">code ChOut=8, CrLf=9, IntOut=11;<br>def M=3, N=5;<br>int A(N-1);<br>&nbsp;<br>proc Combos(D, S);      \Display all size M combinations of N in sorted order<br>int  D, S;              \depth of recursion, starting value of N<br>int  I;<br>[if D&lt;M then            \depth &lt; size<br>      for I:= S to N-1 do<br>        [A(D):= I;<br>        Combos(D+1, I+1);<br>        ]<br>else [for I:= 0 to M-1 do<br>        [IntOut(0, A(I));  ChOut(0, ^ )];<br>     CrLf(0);<br>     ];<br>];<br>&nbsp;<br>Combos(0, 0)</pre>
<p>Output:
</p>
<pre>0 1 2 
0 1 3 
0 1 4 
0 2 3 
0 2 4 
0 3 4 
1 2 3 
1 2 4 
1 3 4 
2 3 4 
</pre>
 
 
</div>  
 
<div class="printfooter">
Retrieved from "<a href="http://rosettacode.org/mw/index.php?title=Combinations&oldid=177162">http://rosettacode.org/mw/index.php?title=Combinations&amp;oldid=177162</a>" </div>
 
 
<div id="catlinks" class="catlinks"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="http://rosettacode.org/wiki/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="http://rosettacode.org/wiki/Category:Programming_Tasks" title="Category:Programming Tasks">Programming Tasks</a></li><li><a href="http://rosettacode.org/wiki/Category:Discrete_math" title="Category:Discrete math">Discrete math</a></li><li><a href="http://rosettacode.org/wiki/Category:Ada" title="Category:Ada">Ada</a></li><li><a href="http://rosettacode.org/wiki/Category:ALGOL_68" title="Category:ALGOL 68">ALGOL 68</a></li><li><a href="http://rosettacode.org/wiki/Category:AppleScript" title="Category:AppleScript">AppleScript</a></li><li><a href="http://rosettacode.org/wiki/Category:AutoHotkey" title="Category:AutoHotkey">AutoHotkey</a></li><li><a href="http://rosettacode.org/wiki/Category:AWK" title="Category:AWK">AWK</a></li><li><a href="http://rosettacode.org/wiki/Category:BBC_BASIC" title="Category:BBC BASIC">BBC BASIC</a></li><li><a href="http://rosettacode.org/wiki/Category:Bracmat" title="Category:Bracmat">Bracmat</a></li><li><a href="http://rosettacode.org/wiki/Category:C" title="Category:C">C</a></li><li><a href="http://rosettacode.org/wiki/Category:C%2B%2B" title="Category:C++">C++</a></li><li><a href="http://rosettacode.org/wiki/Category:C_sharp" title="Category:C sharp">C sharp</a></li><li><a href="http://rosettacode.org/wiki/Category:Clojure" title="Category:Clojure">Clojure</a></li><li><a href="http://rosettacode.org/wiki/Category:CoffeeScript" title="Category:CoffeeScript">CoffeeScript</a></li><li><a href="http://rosettacode.org/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></li><li><a href="http://rosettacode.org/wiki/Category:D" title="Category:D">D</a></li><li><a href="http://rosettacode.org/wiki/Category:E" title="Category:E">E</a></li><li><a href="http://rosettacode.org/wiki/Category:Egison" title="Category:Egison">Egison</a></li><li><a href="http://rosettacode.org/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></li><li><a href="http://rosettacode.org/wiki/Category:Elena" title="Category:Elena">Elena</a></li><li><a href="http://rosettacode.org/wiki/Category:Factor" title="Category:Factor">Factor</a></li><li><a href="http://rosettacode.org/wiki/Category:Fortran" title="Category:Fortran">Fortran</a></li><li><a href="http://rosettacode.org/wiki/Category:GAP" title="Category:GAP">GAP</a></li><li><a href="http://rosettacode.org/wiki/Category:Go" title="Category:Go">Go</a></li><li><a href="http://rosettacode.org/wiki/Category:Groovy" title="Category:Groovy">Groovy</a></li><li><a href="http://rosettacode.org/wiki/Category:Haskell" title="Category:Haskell">Haskell</a></li><li><a href="http://rosettacode.org/wiki/Category:Icon" title="Category:Icon">Icon</a></li><li><a href="http://rosettacode.org/wiki/Category:Unicon" title="Category:Unicon">Unicon</a></li><li><a href="http://rosettacode.org/wiki/Category:Icon_Programming_Library" title="Category:Icon Programming Library">Icon Programming Library</a></li><li><a href="http://rosettacode.org/wiki/Category:J" title="Category:J">J</a></li><li><a href="http://rosettacode.org/wiki/Category:Java" title="Category:Java">Java</a></li><li><a href="http://rosettacode.org/wiki/Category:JavaScript" title="Category:JavaScript">JavaScript</a></li><li><a href="http://rosettacode.org/wiki/Category:Julia" title="Category:Julia">Julia</a></li><li><a href="http://rosettacode.org/wiki/Category:Logo" title="Category:Logo">Logo</a></li><li><a href="http://rosettacode.org/wiki/Category:Lua" title="Category:Lua">Lua</a></li><li><a href="http://rosettacode.org/wiki/Category:Mathematica" title="Category:Mathematica">Mathematica</a></li><li><a href="http://rosettacode.org/wiki/Category:M4" title="Category:M4">M4</a></li><li><a href="http://rosettacode.org/wiki/Category:MATLAB" title="Category:MATLAB">MATLAB</a></li><li><a href="http://rosettacode.org/wiki/Category:Maxima" title="Category:Maxima">Maxima</a></li><li><a href="http://rosettacode.org/wiki/Category:OCaml" title="Category:OCaml">OCaml</a></li><li><a href="http://rosettacode.org/wiki/Category:Octave" title="Category:Octave">Octave</a></li><li><a href="http://rosettacode.org/wiki/Category:Oz" title="Category:Oz">Oz</a></li><li><a href="http://rosettacode.org/wiki/Category:PARI/GP" title="Category:PARI/GP">PARI/GP</a></li><li><a href="http://rosettacode.org/wiki/Category:Pascal" title="Category:Pascal">Pascal</a></li><li><a href="http://rosettacode.org/wiki/Category:Perl" title="Category:Perl">Perl</a></li><li><a href="http://rosettacode.org/wiki/Category:Perl5i" title="Category:Perl5i">Perl5i</a></li><li><a href="http://rosettacode.org/wiki/Category:Perl_6" title="Category:Perl 6">Perl 6</a></li><li><a href="http://rosettacode.org/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></li><li><a href="http://rosettacode.org/wiki/Category:Pop11" title="Category:Pop11">Pop11</a></li><li><a href="http://rosettacode.org/wiki/Category:Prolog" title="Category:Prolog">Prolog</a></li><li><a href="http://rosettacode.org/wiki/Category:Pure" title="Category:Pure">Pure</a></li><li><a href="http://rosettacode.org/wiki/Category:PureBasic" title="Category:PureBasic">PureBasic</a></li><li><a href="http://rosettacode.org/wiki/Category:Python" title="Category:Python">Python</a></li><li><a href="http://rosettacode.org/wiki/Category:Racket" title="Category:Racket">Racket</a></li><li><a href="http://rosettacode.org/wiki/Category:R" title="Category:R">R</a></li><li><a href="http://rosettacode.org/wiki/Category:REXX" title="Category:REXX">REXX</a></li><li><a href="http://rosettacode.org/wiki/Category:Ruby" title="Category:Ruby">Ruby</a></li><li><a href="http://rosettacode.org/wiki/Category:Rust" title="Category:Rust">Rust</a></li><li><a href="http://rosettacode.org/wiki/Category:Scala" title="Category:Scala">Scala</a></li><li><a href="http://rosettacode.org/wiki/Category:Scheme" title="Category:Scheme">Scheme</a></li><li><a href="http://rosettacode.org/wiki/Category:Seed7" title="Category:Seed7">Seed7</a></li><li><a href="http://rosettacode.org/wiki/Category:SETL" title="Category:SETL">SETL</a></li><li><a href="http://rosettacode.org/wiki/Category:Smalltalk" title="Category:Smalltalk">Smalltalk</a></li><li><a href="http://rosettacode.org/wiki/Category:Standard_ML" title="Category:Standard ML">Standard ML</a></li><li><a href="http://rosettacode.org/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></li><li><a href="http://rosettacode.org/wiki/Category:TXR" title="Category:TXR">TXR</a></li><li><a href="http://rosettacode.org/wiki/Category:Ursala" title="Category:Ursala">Ursala</a></li><li><a href="http://rosettacode.org/wiki/Category:V" title="Category:V">V</a></li><li><a href="http://rosettacode.org/wiki/Category:XPL0" title="Category:XPL0">XPL0</a></li></ul></div></div>  
<div class="visualClear"></div>
 
 
</div>
 
</div>
 
 
<div id="mw-head" class="noprint">
 
<div id="p-personal" class="">
<h5>Personal tools</h5>
<ul>
<li id="pt-createaccount"><a href="http://rosettacode.org/mw/index.php?title=Special:UserLogin&returnto=Combinations&type=signup">Create account</a></li>
<li id="pt-login"><a href="http://rosettacode.org/mw/index.php?title=Special:UserLogin&returnto=Combinations" title="You are encouraged to log in; however, it is not mandatory [alt-shift-o]" accesskey="o">Log in</a></li>
</ul>
</div>
 
<div id="left-navigation">
 
<div id="p-namespaces" class="vectorTabs">
<h5>Namespaces</h5>
<ul>
<li id="ca-nstab-main" class="selected"><span><a href="http://rosettacode.org/wiki/Combinations" title="View the content page [alt-shift-c]" accesskey="c">Page</a></span></li>
<li id="ca-talk"><span><a href="http://rosettacode.org/wiki/Talk:Combinations" title="Discussion about the content page [alt-shift-t]" accesskey="t">Discussion</a></span></li>
</ul>
</div>
 
 
<div id="p-variants" class="vectorMenu emptyPortlet">
<h4>
</h4>
<h5><span>Variants</span><a href="http://rosettacode.org/wiki/Combinations#"></a></h5>
<div class="menu">
<ul>
</ul>
</div>
</div>
 
</div>
<div id="right-navigation">
 
<div id="p-views" class="vectorTabs">
<h5>Views</h5>
<ul>
<li id="ca-view" class="selected"><span><a href="http://rosettacode.org/wiki/Combinations">Read</a></span></li>
<li id="ca-edit"><span><a href="http://rosettacode.org/mw/index.php?title=Combinations&action=edit" title="You can edit this page. Please use the preview button before saving [alt-shift-e]" accesskey="e">Edit</a></span></li>
<li id="ca-history" class="collapsible"><span><a href="http://rosettacode.org/mw/index.php?title=Combinations&action=history" title="Past revisions of this page [alt-shift-h]" accesskey="h">View history</a></span></li>
</ul>
</div>
 
 
<div id="p-cactions" class="vectorMenu emptyPortlet">
<h5><span>Actions</span><a href="http://rosettacode.org/wiki/Combinations#"></a></h5>
<div class="menu">
<ul>
</ul>
</div>
</div>
 
 
<div id="p-search">
<h5><label for="searchInput">Search</label></h5>
<form action="http://rosettacode.org/mw/index.php" id="searchform">
<div>
<input type="search" name="search" title="Search Rosetta Code [alt-shift-f]" accesskey="f" id="searchInput" autocomplete="off" placeholder="Search"> <input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton"> <input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton"> <input type="hidden" name="title" value="Special:Search">
</div>
</form>
</div>
 
</div>
</div>
 
 
<div id="mw-panel" class="noprint">
 
<div id="p-logo"><a style="background-image: url(/mw/title.png);" href="http://rosettacode.org/wiki/Rosetta_Code" title="Visit the main page"></a></div>
 
 
<div class="portal" id="p-Community">
<h5>Community</h5>
<div class="body">
<ul>
<li id="n-Twitter"><a href="http://twitter.com/rosettacode" rel="nofollow">Twitter</a></li>
<li id="n-Chat.2FIRC"><a href="http://rosettacode.org/wiki/Special:WebChat">Chat/IRC</a></li>
<li id="n-Planet"><a href="http://rosettacode.org/planet" rel="nofollow">Planet</a></li>
<li id="n-The-Village-Pump"><a href="http://rosettacode.org/wiki/Rosetta_Code:Village_Pump">The Village Pump</a></li>
<li id="n-Finances"><a href="http://rosettacode.org/wiki/Rosetta_Code:Finances">Finances</a></li>
</ul>
</div>
</div>
 
 
<div class="portal" id="p-Explore">
<h5>Explore</h5>
<div class="body">
<ul>
<li id="n-Languages"><a href="http://rosettacode.org/wiki/Category:Programming_Languages">Languages</a></li>
<li id="n-Tasks"><a href="http://rosettacode.org/wiki/Category:Programming_Tasks">Tasks</a></li>
<li id="n-recentchanges"><a href="http://rosettacode.org/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [alt-shift-r]" accesskey="r">Recent changes</a></li>
<li id="n-Similar-sites"><a href="http://rosettacode.org/wiki/Help:Similar_Sites">Similar sites</a></li>
<li id="n-randompage"><a href="http://rosettacode.org/wiki/Special:Random" title="Load a random page [alt-shift-x]" accesskey="x">Random page</a></li>
</ul>
</div>
</div>
 
 
<div class="portal" id="p-Misc">
<h5>Misc</h5>
<div class="body">
 
<div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background-color: transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 106px; height: 24px; background-position: initial initial; background-repeat: initial initial;"><iframe frameborder="0" hspace="0" marginheight="0" marginwidth="0" scrolling="no" style="position: static; top: 0px; width: 106px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 24px;" tabindex="0" vspace="0" width="100%" id="I0_1394786672987" name="I0_1394786672987" src="./Combinations - Rosetta Code_files/fastbutton.htm" title="+1" data-gapiattached="true"></iframe></div>
 
<script type="text/rocketscript" data-rocketoptimized="true">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
<iframe id="twitter-widget-0" scrolling="no" frameborder="0" allowtransparency="true" src="./Combinations - Rosetta Code_files/tweet_button.1393899192.htm" class="twitter-share-button twitter-tweet-button twitter-count-horizontal" title="Twitter Tweet Button" data-twttr-rendered="true" style="width: 139px; height: 28px;"></iframe>
<script type="text/rocketscript" data-rocketoptimized="true">!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
<script data-rocketsrc="http://www.stumbleupon.com/hostedbadge.php?s=2" type="text/rocketscript" data-rocketoptimized="true"></script><su:badge layout="2"></su:badge> <script type="text/rocketscript" data-rocketoptimized="true">   (function() {     var li = document.createElement('script'); li.type = 'text/javascript'; li.async = true;     li.src = window.location.protocol + '//platform.stumbleupon.com/1/widgets.js';     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(li, s);   })(); </script><script type="text/javascript" src="./Combinations - Rosetta Code_files/hostedbadge.php"></script> </div>
</div>
 
 
 
 
<div class="portal" id="p-tb">
<h5>Toolbox</h5>
<div class="body">
<ul>
<li id="t-whatlinkshere"><a href="http://rosettacode.org/wiki/Special:WhatLinksHere/Combinations" title="A list of all wiki pages that link here [alt-shift-j]" accesskey="j">What links here</a></li>
<li id="t-recentchangeslinked"><a href="http://rosettacode.org/wiki/Special:RecentChangesLinked/Combinations" title="Recent changes in pages linked from this page [alt-shift-k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="http://rosettacode.org/wiki/Special:SpecialPages" title="A list of all special pages [alt-shift-q]" accesskey="q">Special pages</a></li>
<li id="t-print"><a href="http://rosettacode.org/mw/index.php?title=Combinations&printable=yes" rel="alternate" title="Printable version of this page [alt-shift-p]" accesskey="p">Printable version</a></li>
<li id="t-permalink"><a href="http://rosettacode.org/mw/index.php?title=Combinations&oldid=177162" title="Permanent link to this revision of the page">Permanent link</a></li>
<li id="t-smwbrowselink"><a href="http://rosettacode.org/wiki/Special:Browse/Combinations" title="Special:Browse/Combinations">Browse properties</a></li> </ul>
</div>
</div>
 
 
 
</div>
 
 
<div id="footer">
<ul id="footer-info">
<li id="footer-info-lastmod"> This page was last modified on 27 February 2014, at 05:29.</li>
<li id="footer-info-copyright">Content is available under <a class="external" href="http://www.gnu.org/licenses/fdl-1.2.html">GNU Free Documentation License 1.2</a>.</li>
</ul>
<ul id="footer-places">
<li id="footer-places-privacy"><a href="http://rosettacode.org/wiki/Rosetta_Code:Privacy_policy" title="Rosetta Code:Privacy policy">Privacy policy</a></li>
<li id="footer-places-about"><a href="http://rosettacode.org/wiki/Rosetta_Code:About" title="Rosetta Code:About">About Rosetta Code</a></li>
<li id="footer-places-disclaimer"><a href="http://rosettacode.org/wiki/Rosetta_Code:General_disclaimer" title="Rosetta Code:General disclaimer">Disclaimers</a></li>
</ul>
<ul id="footer-icons" class="noprint">
<li id="footer-copyrightico">
<a href="http://www.gnu.org/licenses/fdl-1.2.html"><img src="./Combinations - Rosetta Code_files/gnu-fdl.png" alt="GNU Free Documentation License 1.2" width="88" height="31"></a>
</li>
<li id="footer-poweredbyico">
<a href="http://www.mediawiki.org/"><img src="./Combinations - Rosetta Code_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31"></a>
<a href="http://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki"><img src="./Combinations - Rosetta Code_files/smw_button.png" alt="Powered by Semantic MediaWiki" width="88" height="31"></a>
</li>
</ul>
<div style="clear:both"></div>
</div>
 
<script type="text/rocketscript" data-rocketoptimized="true">if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script><script data-rocketsrc="http://rosettacode.org/mw/load.php?debug=false&amp;lang=en&amp;modules=skins.vector&amp;only=scripts&amp;skin=vector&amp;*" type="text/rocketscript" data-rocketoptimized="true"></script><script type="text/javascript" src="./Combinations - Rosetta Code_files/load(1).php"></script>
<script type="text/rocketscript" data-rocketoptimized="true">if(window.mw){
mw.loader.load(["mediawiki.user","mediawiki.page.ready","mediawiki.searchSuggest"], null, true);
}</script>
<script type="text/rocketscript" data-rocketoptimized="true">/* CloudFlare analytics upgrade */
</script>
<script data-rocketsrc="http://rosettacode.org/mw/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*" type="text/rocketscript" data-rocketoptimized="true"></script><script type="text/javascript" src="./Combinations - Rosetta Code_files/load(2).php"></script>
 


<script data-rocketsrc="/mw/load.php?debug=false&amp;lang=en&amp;modules=jquery.autoEllipsis%2CcheckboxShiftClick%2ChighlightText%2CmakeCollapsible%2Cmw-jump%2Cplaceholder%2Csuggestions%7Cmediawiki.api%2CsearchSuggest%2Cuser%7Cmediawiki.page.ready&amp;skin=vector&amp;version=20140205T133950Z&amp;*" data-rocketoptimized="true" type="text/javascript"></script><iframe name="oauth2relay1404265498" id="oauth2relay1404265498" src="./Combinations - Rosetta Code_files/postmessageRelay.htm" tabindex="-1" style="width: 1px; height: 1px; position: absolute; top: -100px;"></iframe><div class="suggestions" style="display: none; font-size: 13px;"><div class="suggestions-results"></div><div class="suggestions-special"></div></div><script id="twitter-csp-test"></script></body></html>