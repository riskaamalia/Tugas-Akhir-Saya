<?php


/**
 * @name Connect to Hbase Stargate server with PHP
 * @author Mr.Ping (Jonathan)
*/

class teshbase {

    var $host, $port;


    function __construct($host='127.0.0.1', $port=8080) {
        $this->host = $host;
        $this->port = $port;
    }
   
  /**
     * @name    Select one row
     * @example $obj->select('table', 'row', 'column1'));
     * @return array
    */
    public function select($table, $row, $column=null) {
        $column = !empty($column) ? '/'.$column : '';			//dan ternyata si kolom parameter itu kolom family
        $obj = $this->write('SELECT', '/'.$table.'/'.$row.$column);	//localhost:8080

        if(!is_object($obj)) {
            return false;
        }

        $arr = array();
	foreach($obj->Row[0]->Cell as $k=>$r) {
            $keyName = preg_replace('#:$#','', base64_decode($obj->Row[0]->Cell[$k]->column));
            if(!array_key_exists($keyName, $arr)) {
            $arr[$keyName] = base64_decode($obj->Row[0]->Cell[$k]->{'$'});
	 }
	$convert = $arr[$keyName];	//nama kolom family dan kolomnya
        }
        
	return $convert;
    }

   
    public function ambil_nama_kolom($table,$row,$column=null) {
        $column = !empty($column) ? '/'.$column : '';
        $obj = $this->write('SCAN', '/'.$table.'/'.$row.$column);

        if(!is_object($obj)) {
            return false;
        }

        $arr = array();
        foreach($obj->Row[0]->Cell as $k=>$r) {
            $keyName = preg_replace('#:$#','', base64_decode($obj->Row[0]->Cell[$k]->column));
        }
        return $keyName;
    }
    /**
     * @name    Write request
     * @access  private
     * @return  json_decode OR header
  */  
    private function write($method, $path, $content=null) {
        $curl = curl_init();
		curl_setopt($curl, CURLOPT_URL, 'http://'.$this->host.':'.$this->port.$path);
		curl_setopt($curl, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
		curl_setopt($curl, CURLOPT_HEADER, 1);
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
		curl_setopt($curl, CURLOPT_MAXREDIRS, 3);
		curl_setopt($curl, CURLOPT_HTTPHEADER, array(
			'Content-Type: application/json',
			'Accept: application/json',
			'Connection: Close',
		));

		switch(strtoupper($method)){
			case 'DELETE':
				curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'DELETE');
				break;
			case 'PUT':
				curl_setopt($curl, CURLOPT_PUT, 1);
				$file = tmpfile();
				fwrite($file, $content);
				fseek($file, 0);
				curl_setopt($curl, CURLOPT_INFILE, $file);
				curl_setopt($curl, CURLOPT_INFILESIZE, strlen($content));
				break;
			case 'POST':
				curl_setopt($curl, CURLOPT_POST, 1);
				curl_setopt($curl, CURLOPT_POSTFIELDS, $content);
				break;
			case 'GET':
				curl_setopt($curl, CURLOPT_HTTPGET, 1);
				break;
			case 'SCAN':
				curl_setopt($curl, CURLOPT_HTTPGET, 1);
				break;

		}

		$data = curl_exec($curl);
        curl_close($curl);
        $buff = $data;

        return ereg('{', $buff) ? json_decode(preg_replace('#^.*?\{#s', '{', $buff)) : $buff;
    }


    /**
     * @name    Table List
     * @example $obj->list_table());
     * @return  orray
*/    
    public function list_table() {
        $obj = $this->write('GET', '/');

        $arr = array();
        foreach($obj->table as $k=>$r) {
            if(!in_array($r->name, $arr)) {
                array_push($arr, $r->name);
            }
        }
        return $arr;
    }


    /**
     * @name    Table Schema
     * @example $obj->table_schema('table'));
     * @return  object
    */
    public function table_schema($table) {
        $obj = $this->write('GET', '/'.$table.'/schema');
        return $obj;
    }
  


    /**
     * @name    Insert
     * @example $obj->insert('table', 'row', array('column1' => 'value1'));
     * @return  boolean
*/    
    public function post($table, $row, $data) {
        $cell = array();
        foreach($data as $k=>$r) {
            array_push($cell, array('column'=>base64_encode($k), '$'=>base64_encode($r)));
        }
        $json = '{"Row":[{"Cell":'.json_encode($cell).'}]}';

        $str = $this->write('POST', '/'.$table.'/'.$row, $json);

        return ereg('HTTP/1.1 200', $str) ? true : false;
    }


    /**
     * @name    Remove
     * @example $obj->remove('table', 'row');
     * @example $obj->remove('table', 'row', 'column');
     * @example $obj->remove('table', 'row', array('column1', 'column2'));
     * @return  boolean
  */  
    public function remove($table, $row, $data=null) {
        if($data) {
            if(is_array($data)) {
                foreach($data as $k=>$r) {
                    $str = $this->write('DELETE', '/'.$table.'/'.$row.'/'.$r);
                    if(!ereg('HTTP/1.1 200', $str)) {
                        return 'error';
                    }
                }
            }
            else {
                $str = $this->write('DELETE', '/'.$table.'/'.$row.'/'.$data);
            }
        }
        else {
            $str = $this->write('DELETE', '/'.$table.'/'.$row);
        }
        return ereg('HTTP/1.1 200', $str) ? true : false;
    }

 }

$obj_query = new teshbase ();
for ($y=0;$y<1114;$y++) {
//747 column=url_pembobotan_pdf:5439=BOBOT, timestamp=1432738771909, value=2.53148
$id_term = 5439;
$row_url [$y] = $obj_query -> select("url",$y,"url_pembobotan_pdf:".$id_term."=BOBOT");
	if ($row_url [$y] != NULL) { 
		echo $row_url [$y]."<br>" ;
	}
}
?>
